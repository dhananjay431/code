"use strict";

var InExRender = function () {
  function InExRender() {}

  var _proto = InExRender.prototype;

  _proto.init = function init(params) {
    this.eGui = document.createElement('span');
    this.eGui.innerHTML = JSON.stringify(params);
  };

  _proto.getGui = function getGui() {
    return this.eGui;
  };

  return InExRender;
}();
'use strict';

angular.module('App.main', ['ui.router', 'ngAnimate', 'ngSanitize', 'ui.bootstrap', 'ngTable']).config(function ($stateProvider, $urlRouterProvider, $locationProvider) {
  $urlRouterProvider.otherwise("main");
  $stateProvider.state('main', {
    url: '/main',
    templateUrl: 'app/main/app.main.html',
    controller: 'App.mainCtrl as vm'
  });
}).controller('App.mainCtrl', function ($scope) {
  var vm = this;
  vm.a1 = 123;
  delete localStorage.projectCode;
  $.cordys.ajax({
    method: "GetRoles",
    namespace: "http://schemas.cordys.com/1.0/ldap",
    parameters: {
      dn: "",
      depth: ""
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);

      if (localStorage.user) {
        $scope.CordysRole = JSON.parse(localStorage.user).USER_ROLE;
      } else {
        $scope.CordysRole = "notARole";
        console.log("not a role");
      }

      if ($scope.CordysRole.includes("MSIE")) {
        $scope.roles = "MSIE";
        localStorage.role = "MSIE";
        vm.navigation = [{
          "label": "Create",
          "route": "mainApp.ProjectRequirement",
          "icon": "fas fa-plus-square",
          "display": "true"
        }, {
          "label": "Search",
          "route": "search",
          "icon": "fas fa-search",
          "display": "true"
        }, {
          "label": "Inbox",
          "route": "erfqInbox",
          "icon": "fas fa-envelope",
          "display": "true"
        }, {
          "label": "My eRFQ",
          "route": "erfq",
          "icon": "fas fa-list",
          "display": "true"
        }, {
          "label": "Quote Comparision",
          "route": "quoteComparisionCtrl",
          "icon": "fas fa-adjust",
          "display": "true"
        }, {
          "label": "Toolmaker Summary",
          "route": "mainApp.create",
          "icon": "fas fa-clipboard-list",
          "display": "true"
        }, {
          "label": "Finalize Toolmaker",
          "route": "finalize",
          "icon": "check_box",
          "display": "false"
        }, {
          "label": "Toolmaker Register",
          "route": "toolmaker_register",
          "icon": "fas fa-user-plus",
          "display": "true"
        }];
      }

      if ($scope.CordysRole.includes("TOOLMAKER")) {
        $scope.roles = "TOOLMAKER";
        vm.navigation = [{
          "label": "Create",
          "route": "mainApp.ProjectRequirement",
          "icon": "fas fa-plus-square",
          "display": "false"
        }, {
          "label": "Search",
          "route": "search",
          "icon": "fas fa-search",
          "display": "false"
        }, {
          "label": "Inbox",
          "route": "erfqInbox",
          "icon": "fas fa-envelope",
          "display": "true"
        }, {
          "label": "My eRFQ",
          "route": "erfq",
          "icon": "fas fa-list",
          "display": "true"
        }, {
          "label": "Quote Comparision",
          "route": "quoteComparisionCtrl",
          "icon": "fas fa-adjust",
          "display": "false"
        }, {
          "label": "Toolmaker Summary",
          "route": "mainApp.create",
          "icon": "fas fa-clipboard-list",
          "display": "false"
        }, {
          "label": "Finalize Toolmaker",
          "route": "finalize",
          "icon": "check_box",
          "display": "false"
        }, {
          "label": "Toolmaker Register",
          "route": "toolmaker_register",
          "icon": "fas fa-user-plus",
          "display": "false"
        }];
      }

      if ($scope.CordysRole.includes("ASSET MANAGER")) {
        $scope.roles = "ASSET MANAGER";
        vm.navigation = [{
          "label": "Create",
          "route": "mainApp.ProjectRequirement",
          "icon": "fas fa-plus-square",
          "display": "false"
        }, {
          "label": "Search",
          "route": "search",
          "icon": "fas fa-search",
          "display": "true"
        }, {
          "label": "Inbox",
          "route": "erfqInbox",
          "icon": "fas fa-envelope",
          "display": "true"
        }, {
          "label": "My eRFQ",
          "route": "erfq",
          "icon": "fas fa-list",
          "display": "true"
        }, {
          "label": "Quote Comparision",
          "route": "quoteComparisionCtrl",
          "icon": "fas fa-adjust",
          "display": "false"
        }, {
          "label": "Toolmaker Summary",
          "route": "mainApp.create",
          "icon": "fas fa-clipboard-list",
          "display": "false"
        }, {
          "label": "Finalize Toolmaker",
          "route": "finalize",
          "icon": "check_box",
          "display": "true"
        }, {
          "label": "Toolmaker Register",
          "route": "toolmaker_register",
          "icon": "fas fa-user-plus",
          "display": "true"
        }];
      }

      if ($scope.CordysRole.includes("STAMPING LEAD")) {
        $scope.roles = "STAMPING LEAD";
        vm.navigation = [{
          "label": "Create",
          "route": "mainApp.ProjectRequirement",
          "icon": "fas fa-plus-square",
          "display": "false"
        }, {
          "label": "Search",
          "route": "search",
          "icon": "fas fa-search",
          "display": "true"
        }, {
          "label": "Inbox",
          "route": "erfqInbox",
          "icon": "fas fa-envelope",
          "display": "true"
        }, {
          "label": "My eRFQ",
          "route": "erfq",
          "icon": "fas fa-list",
          "display": "false"
        }, {
          "label": "Quote Comparision",
          "route": "quoteComparisionCtrl",
          "icon": "fas fa-adjust",
          "display": "false"
        }, {
          "label": "Toolmaker Summary",
          "route": "mainApp.create",
          "icon": "fas fa-clipboard-list",
          "display": "false"
        }, {
          "label": "Finalize Toolmaker",
          "route": "finalize",
          "icon": "check_box",
          "display": "false"
        }, {
          "label": "Toolmaker Register",
          "route": "toolmaker_register",
          "icon": "fas fa-user-plus",
          "display": "false"
        }];
      }
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      alert("Error in loading data");
    }
  });
});
angular.module('App.plugins', ['ngTouch', 'ngAnimate', 'ngFileUpload', 'ngSanitize', 'ui.bootstrap']).directive('dbNav', function () {
  return {
    template: '<section id="dbnav">\n    <img src="assets/images/msPrintImage.png" alt="" style="float:left;">\n    <nav class="navbar navbar-expand-lg navbar-light bg-danger">\n        <div class="collapse navbar-collapse show" id="navbarSupportedContent">\n            <ul class="navbar-nav mr-auto">\n                <li class="topNav">\n                    <a style="margin-right: 100px;color: white;">CME Stamping </a>\n                </li>\n                <li class="nav-item">\n                    <a style="color: white;" class="nav-link" ui-sref="main"> Home </a>\n                </li>\n                <li class="topNav">\n                    <a style="color: white;"> | </a>\n                </li>\n                <li class="nav-item">\n                    <a style="color: white;" class="nav-link" ui-sref="main"> Sitemap </a>\n                </li>\n                <li class="topNav">\n                    <a style="color: white;"> | </a>\n                </li>\n                <li class="nav-item">\n                    <a style="color: white;" class="nav-link" ui-sref="main"> Contact Us </a>\n                </li>\n                <li class="topNav">\n                    <a style="color: white;"> | </a>\n                </li>\n                <li class="nav-item">\n                    <a style="color: white;" class="nav-link" ui-sref="main"> Feedback </a>\n                </li>\n\n            </ul>\n            <a style="margin-left: 400px;color: white;"> {{username}} </a>\n        </div>\n    </nav>\n</section>'
  };
}).directive('dbSide', function () {
  return {
    template: '<nav id="sidebar">\n    <div class="sidebar-header">\n        <h3>eRFQ</h3>\n    </div>\n\n    <ul class="ml-2 list-unstyled border components">\n        <li class="active" ng-repeat="d in vm.data">\n\n            <a ng-If="d.state==undefined" role="button" data-toggle="collapse" data-target="#{{d.id}}" aria-expanded="true" aria-controls="collapseExample" ng-click="d.flag=!d.flag">\n    {{d.name}} <i class="float-right fas" ng-click="d.flag=!d.flag" ng-class="{\'fa-chevron-right\':d.flag==false,\'fa-angle-down\':d.flag==true}"></i>\n  </a>\n            <a ng-If="d.state!=undefined" role="button" data-toggle="collapse" ui-sref="{{d.state}}" ui-sref-active="bg-light" aria-expanded="false" aria-controls="collapseExample">\n    {{d.name}}\n  </a>\n\n            <ul class="collapse show list-unstyled" ng-if="d.child.length > 0" id="{{d.id}}">\n                <li ng-repeat="x in d.child">\n                    <a ui-sref="{{x.state}}" ui-sref-active="bg-light" style="color:#000;"><i class="fas fa-arrow-right"></i>  {{x.name}}</a>\n                </li>\n            </ul>\n        </li>\n\n    </ul>\n</nav>'
  };
});
"use strict";
"use strict";

angular.module('App.quoteComparisionCtrl').controller('basicCostCtrl', function ($scope, Upload, $window, $log, $state, NgTableParams, cmm) {
  console.log("cmm=>", cmm);
  $scope.data = {};
  $scope.gridOptions = {};
  $scope.cmm = cmm;
  $scope.cmm.label = 'A';
  $scope.decimals = parseInt("2");
  $scope.budgetedParam = '';
  $scope.partNum = '';
  $scope.toolmakerDropdown = [];
  $scope.PanelGrpDrpdwn = [];
  $scope.budgetedToolmk = [];
  $scope.MaterialGrades = [];
  $scope.setArr = [];
  $scope.funcRun = 0;
  $scope.cmm.selectedPart;

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.xl = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": true,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions2.api.exportDataAsCsv(params);
  };

  $scope.gridOptions2 = {
    enableColResize: true,
    headerHeight: 40,
    rowHeight: 40,
    pagination: true,
    paginationPageSize: 10,
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: CustomHeaderGroup,
      htmlText: htmlText,
      genderCellRenderer: CellRender,
      cellSelect: CellSelect
    },
    columnDefs: [{
      headerName: "S.No",
      width: 80,
      cellRenderer: function cellRenderer(params) {
        return parseInt(params.node.id) + 1;
      }
    }, {
      headerName: "Part Number",
      field: "PART_NUMBER",
      cellClass: 'PART_NUMBER'
    }, {
      headerName: "Nomenclature",
      field: "PART_NAME",
      cellClass: 'PART_NAME'
    }, {
      headerName: "Budgated Toolmaker",
      field: "BUDGETED_TOOLMAKER"
    }, {
      headerName: "Blanking Die",
      field: "BASICCOST_BLANKINGDIE",
      cellClass: 'BASICCOST_BLANKINGDIE',
      singleClickEdit: true,
      editable: true,
      cellRenderer: 'genderCellRenderer',
      cellRendererParams: function cellRendererParams(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            value: d.value,
            key: d.key
          };
        });

        return {
          params2: _t
        };
      },
      cellEditorSelector: function cellEditorSelector(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            text: d.value,
            value: d.key
          };
        });

        return {
          component: 'cellSelect',
          params: {
            values: _t
          }
        };
      }
    }, {
      headerName: "Budgeted Basic Cost(In Lakhs)",
      field: "BUDGETED_BASIC_COST",
      cellClass: 'BUDGETED_BASIC_COST',
      valueGetter: 'data.BASICCOST_BLANKINGDIE',
      cellRenderer: function cellRenderer(params) {
        if (params.data.BASICCOST_BLANKINGDIE == "Excluded") return params.data.EX_BUDGETED_BASIC_COST;else return params.data.IN_BUDGETED_BASIC_COST;
      }
    }, {
      headerName: "Budgeted Blanking Die Cost(In Lakhs)",
      field: "BUDGETED_BLANKING_DIE",
      cellClass: 'BUDGETED_BLANKING_DIE',
      valueGetter: 'data.BASICCOST_BLANKINGDIE',
      cellRenderer: function cellRenderer(params) {
        if (params.data.BASICCOST_BLANKINGDIE == "Excluded") return params.data.EX_BUDGETED_BLANKING_DIE;else return params.data.IN_BUDGETED_BLANKING_DIE;
      }
    }]
  };

  $scope.colAdd = function (data) {
    var key = _.keys(data[0]).filter(function (d) {
      return d.match(/TOOLMAKER[0-9]/i);
    });

    for (var i = 0; i < key.length; i++) {
      $scope.gridOptions2.columnDefs.push({
        headerName: data[0][key[i]].TOOLMAKERNAME,
        children: [{
          headerName: "Quoted Cost(Original Currency)",
          field: key[i] + ".QUOTED_COST"
        }, {
          headerName: "Quoted Cost(In Lakhs)",
          field: key[i] + ".QUOTED_COST_LKH"
        }, {
          headerName: "Blanking Die Cost",
          field: key[i] + ".BLANKING_DIE"
        }],
        valueGetter: 'data.BASICCOST_BLANKINGDIE',
        cellRenderer: function cellRenderer(params) {
          var obj = _.keys(params.data).filter(function (dd) {
            return dd.match(/^TOOLMAKER/i);
          }).map(function (dd) {
            return params.data[dd];
          }).filter(function (dd) {
            return dd.TOOLMAKERNAME == params.colDef.headerName;
          });

          if (params.data.BASICCOST_BLANKINGDIE == "Excluded") return obj[0].EX_QUOTED_COST;else return obj[0].IN_QUOTED_COST;
          if (params.data.BASICCOST_BLANKINGDIE == "Excluded") return obj[1].EX_QUOTED_COST_LKH;else return obj[1].IN_QUOTED_COST_LKH;
          if (params.data.BASICCOST_BLANKINGDIE == "Excluded") return obj[2].EX_BLANKING_DIE;else return obj[2].IN_BLANKING_DIE;
        }
      });
    }

    $scope.gridOptions2.api.setColumnDefs($scope.gridOptions2.columnDefs);
    $scope.funcRun += 1;
  };

  $scope.changePrj = function (projectCode, panelGroup, baseNum, prefered) {
    debugger;
    $scope.panelGroup = panelGroup;
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "BasicCost",
        "panelGroup": panelGroup,
        "projectCode": projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": baseNum,
        "decimalPlace": $scope.decimals,
        "preferences": prefered,
        "ComparePref": '',
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");

        if ($scope.gridOptions.data.length == 0) {
          toastr.error("Factors' Values are not Set!!!");
          return;
        }

        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);

        if ($scope.funcRun == 0) {
          $scope.colAdd($scope.gridOptions.data);
        }

        $.cordys.ajax({
          method: "GetToolMakersforCompair",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "projectCode": $scope.cmm.projectCode,
            "panelGroup": $scope.panelGroup
          },
          success: function success(data) {
            $scope.tmkdrp = $.cordys.json.findObjects(data, "ERFQ_TOOLMAKER_MASTER");
            $scope.toolmakerDropdown = [];

            for (var t = 0; t < $scope.tmkdrp.length; t++) {
              $scope.toolmakerDropdown.push($scope.tmkdrp[t]);
            }

            if (cmm.filtObj != null || cmm.filtObj != undefined) {
              $scope.filtObj = cmm.filtObj;
            }

            if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
              $scope.fillValue1($scope.filtObj.filterMG);
              $scope.fillValue2($scope.filtObj.filterBT);
              $scope.fillValue3($scope.filtObj.filterPG);

              if ($scope.toolmakerDropdown.length != 0) {
                var tk = cmm.filtObj.filtertmk;

                for (var t = 0; t < tk.length; t++) {
                  var a = tk[t];
                  $scope.toolmakerDropdown[a].selected1 = true;
                }
              }
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.error("Unable to load data. Please try refreshing the page.");
          }
        });
        $scope.makeHeader();
        $scope.settleData();
        console.log("Basic Cost:", $scope.gridOptions2.columnDefs);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    if (newValue.projectCode != oldValue.projectCode || newValue.label != oldValue.label) $scope.openruPBox('1', newValue.projectCode, newValue.label, cmm.baslineNum);

    if (document.getElementById("filterBtn") != undefined && document.getElementById("ruPBtn") != undefined && document.getElementById("preFBtn") != undefined) {
      document.getElementById("filterBtn").style.backgroundColor = "#202121";
      document.getElementById("ruPBtn").style.backgroundColor = "#dfdede";
      document.getElementById("preFBtn").style.backgroundColor = "#dfdede";
    }
  }, true);

  $scope.openruPBox = function (valv, pc, pg, bln) {
    debugger;
    document.getElementById("filterBtn").style.backgroundColor = "#202121";
    document.getElementById("ruPBtn").style.backgroundColor = "#dc3545";
    document.getElementById("preFBtn").style.backgroundColor = "#dfdede";
    $scope.cell = [];
    $scope.factors = [];
    $scope.currencies = [];
    $scope.landings = [];
    $scope.showLF = false;
    $scope.showCF = false;

    $scope.dataCF = function (currencies) {
      $scope.tableParams = new NgTableParams({}, {
        filterDelay: 0,
        dataset: currencies
      });
    };

    $scope.dataLF = function (landings) {
      $scope.tableParams = new NgTableParams({}, {
        filterDelay: 0,
        dataset: landings
      });
    };

    $.cordys.ajax({
      method: "GetFactorsbyProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        projectCode: $scope.cmm.projectCode,
        factor: 'Landed'
      },
      dataType: "* json",
      async: false,
      success: function success(a1) {
        var temp = $.cordys.json.findObjects(a1, "RootTag");

        if (temp[0].ERFQFACTOR.length > 0) {
          for (var i = 0; i < temp[0].ERFQFACTOR.length; i++) {
            if (temp[0].ERFQFACTOR[i].FACTOR_VALUE == "") {
              temp[0].ERFQFACTOR[i].SAVE = "Insert";
            } else {
              temp[0].ERFQFACTOR[i].FACTOR_VALUE = parseInt(temp[0].ERFQFACTOR[i].FACTOR_VALUE);
              temp[0].ERFQFACTOR[i].SAVE = "Update";
            }

            $scope.factors.push(temp[0].ERFQFACTOR[i]);
          }

          $scope.landings = temp[0].ERFQFACTOR;
        } else {
          if (temp[0].ERFQFACTOR.FACTOR_VALUE == "") {
            temp[0].ERFQFACTOR.SAVE = "Insert";
          } else {
            temp[0].ERFQFACTOR.FACTOR_VALUE = parseInt(temp[0].ERFQFACTOR.FACTOR_VALUE);
            temp[0].ERFQFACTOR.SAVE = "Update";
          }

          $scope.factors.push(temp[0].ERFQFACTOR);
          $scope.landings.push(temp[0].ERFQFACTOR);
        }

        $scope.dataLF($scope.landings);

        if (temp[0].COMPARISONFACT == "true") {
          $scope.showLF = true;
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
    $.cordys.ajax({
      method: "GetFactorsbyProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        projectCode: $scope.cmm.projectCode,
        factor: 'Currency'
      },
      dataType: "* json",
      async: false,
      success: function success(a2) {
        var temp = $.cordys.json.findObjects(a2, "RootTag");

        if (temp[0].ERFQFACTOR.length > 0) {
          for (var i = 0; i < temp[0].ERFQFACTOR.length; i++) {
            if (temp[0].ERFQFACTOR[i].FACTOR_VALUE == "") {
              temp[0].ERFQFACTOR[i].SAVE = "Insert";
            } else {
              temp[0].ERFQFACTOR[i].FACTOR_VALUE = parseInt(temp[0].ERFQFACTOR[i].FACTOR_VALUE);
              temp[0].ERFQFACTOR[i].SAVE = "Update";
            }

            $scope.factors.push(temp[0].ERFQFACTOR[i]);
          }

          $scope.currencies = temp[0].ERFQFACTOR;
        } else {
          if (temp[0].ERFQFACTOR.FACTOR_VALUE == "") {
            temp[0].ERFQFACTOR.SAVE = "Insert";
          } else {
            temp[0].ERFQFACTOR.FACTOR_VALUE = parseInt(temp[0].ERFQFACTOR.FACTOR_VALUE);
            temp[0].ERFQFACTOR.SAVE = "Update";
          }

          $scope.factors.push(temp[0].ERFQFACTOR);
          $scope.currencies.push(temp[0].ERFQFACTOR);
        }

        $scope.dataCF($scope.currencies);

        if (temp[0].COMPARISONFACT == "true") {
          $scope.showCF = true;
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });

    if ($scope.showCF == true && $scope.showLF == true && valv == '1') {
      $scope.openpreFBox(valv);
      $scope.changePrj(pc, pg, bln, $scope.pf);
    } else {
      if (valv == '0') {
        console.log("opening popup!!!");
      } else {
        toastr.error("Factor value missing or not set.");
      }
    }
  };

  $scope.saveLCFactors = function (l, c) {
    debugger;

    for (var i = 0; i < l.length; i++) {
      if (l[i].SAVE == "Insert") {
        $.cordys.ajax({
          method: "UpdateErfqQuoteFactor",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "new": {
                "ERFQ_QUOTE_FACTOR": {
                  FACTOR_NAME: l[i].FACTOR_NAME,
                  FACTOR_VALUE: l[i].FACTOR_VALUE,
                  FACTOR: l[i].FACTOR,
                  PROJECT_CODE: $scope.cmm.projectCode
                }
              }
            }
          },
          success: function success(response) {
            console.log("new landing Inserted");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      } else if (l[i].SAVE == "Update") {
        $.cordys.ajax({
          method: "UpdateErfqQuoteFactor",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_QUOTE_FACTOR": {
                  QUOTE_FACTOR_SRNO: l[i].FACTOR_SRNO
                }
              },
              "new": {
                "ERFQ_QUOTE_FACTOR": {
                  FACTOR_VALUE: l[i].FACTOR_VALUE
                }
              }
            }
          },
          success: function success(response) {
            console.log("landing updated");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }
    }

    for (var i = 0; i < c.length; i++) {
      if (c[i].SAVE == "Insert") {
        $.cordys.ajax({
          method: "UpdateErfqQuoteFactor",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "new": {
                "ERFQ_QUOTE_FACTOR": {
                  FACTOR_NAME: c[i].FACTOR_NAME,
                  FACTOR_VALUE: c[i].FACTOR_VALUE,
                  FACTOR: c[i].FACTOR,
                  PROJECT_CODE: $scope.cmm.projectCode
                }
              }
            }
          },
          success: function success(response) {
            console.log("new currency inserted");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      } else if (c[i].SAVE == "Update") {
        $.cordys.ajax({
          method: "UpdateErfqQuoteFactor",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_QUOTE_FACTOR": {
                  QUOTE_FACTOR_SRNO: c[i].FACTOR_SRNO
                }
              },
              "new": {
                "ERFQ_QUOTE_FACTOR": {
                  FACTOR_VALUE: c[i].FACTOR_VALUE
                }
              }
            }
          },
          success: function success(response) {
            console.log("currency updated");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }
    }

    $scope.triggerRequest();
  };

  $scope.openpreFBox = function (valU) {
    document.getElementById("filterBtn").style.backgroundColor = "#202121";
    document.getElementById("ruPBtn").style.backgroundColor = "#dfdede";
    document.getElementById("preFBtn").style.backgroundColor = "#dc3545";
    $scope.preferences = [];

    $scope.dataPF = function (preferences) {
      $scope.tableParams = new NgTableParams({}, {
        filterDelay: 0,
        dataset: preferences
      });
    };

    $.cordys.ajax({
      method: "GetERFQFactors",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        factor: 'Currency'
      },
      dataType: "* json",
      async: false,
      success: function success(a0) {
        var temp = $.cordys.json.findObjects(a0, "ERFQ_FACTOR_MASTER");

        if (valU == '0') {
          if ($scope.pf != undefined) {
            arr = $scope.pf.split(',');

            for (i = 0; i < temp.length; i++) {
              for (j = 0; j < arr.length; j++) {
                if (temp[i].FACTOR_NAME == arr[j]) {
                  temp[i].check = true;
                }
              }
            }
          }

          $scope.preferences = temp;
          $scope.dataPF($scope.preferences);
        } else if (valU == '1') {
          var preFStr = '';

          for (var i = 0; i < temp.length; i++) {
            preFStr = preFStr + ',' + temp[i].FACTOR_NAME;
          }

          $scope.pf = preFStr.slice(1);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  $scope.formpreFStr = function (pf, no) {
    $scope.count = 0;
    temp = $scope.pf.split(',');
    $scope.preferences[no].check = !$scope.preferences[no].check;

    for (var i = 0; i < temp.length; i++) {
      if (pf == temp[i]) {
        $scope.count++;
        temp.splice(i, 1);
      }
    }

    if ($scope.count == 0) {
      temp = temp.toString();
      temp = temp.concat(',', pf);
    }

    $scope.pf = temp.toString();

    if ($scope.pf[0] == ',') {
      $scope.pf = $scope.pf.slice(1);
    }
  };

  $scope.applypreF = function () {
    $scope.changePrj($scope.cmm.projectCode, $scope.cmm.label, $scope.cmm.baslineNum, $scope.pf);
  };

  $scope.fillValue1 = function (v1) {
    $scope.filterMG = v1;
  };

  $scope.fillValue2 = function (v1) {
    $scope.filterBT = v1;
  };

  $scope.fillValue3 = function (v1) {
    $scope.filterPG = v1;
  };

  $scope.makeHeader = function () {
    debugger;
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "BasicCost",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": '',
        "panelGrouping": '',
        "materialGrade": ''
      },
      success: function success(data) {
        $scope.gridOptions.data1 = $.cordys.json.findObjects(data, "COMPARISON");

        for (var i = 0; i < $scope.gridOptions.data1.length; i++) {
          $scope.callFunction1($scope.gridOptions.data1[i]);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.settleData = function () {
    if (cmm.filtObj != null || cmm.filtObj != undefined) {
      $scope.filtObj = cmm.filtObj;
    }

    if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
      $scope.fillValue1($scope.filtObj.filterMG);
      $scope.fillValue2($scope.filtObj.filterBT);
      $scope.fillValue3($scope.filtObj.filterPG);

      if ($scope.toolmakerDropdown.length != 0) {
        var tk = cmm.filtObj.filtertmk;

        for (var t = 0; t < tk.length; t++) {
          var a = tk[t];
          $scope.toolmakerDropdown[a].selected1 = true;
        }
      }

      $scope.tmkReq = $scope.filtObj.tmkReq;
      $scope.setArr = $scope.filtObj.setArr;
    }
  };

  $scope.adddrp = function (value1) {
    if ($scope.budgetedToolmk.length != 0) {
      for (var t = 0; t < $scope.budgetedToolmk.length; t++) {
        if ($scope.budgetedToolmk[t].value === value1.value) {
          return 1;
        }
      }
    } else {
      $scope.budgetedToolmk.push($scope.value);
      return 1;
    }
  };

  $scope.addMaterial = function (value2) {
    if ($scope.MaterialGrades.length != 0) {
      for (var t = 0; t < $scope.MaterialGrades.length; t++) {
        if ($scope.MaterialGrades[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.MaterialGrades.push(value2);
      return 1;
    }
  };

  $scope.addPaneldrp = function (value2) {
    if ($scope.PanelGrpDrpdwn.length != 0) {
      for (var t = 0; t < $scope.PanelGrpDrpdwn.length; t++) {
        if ($scope.PanelGrpDrpdwn[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.PanelGrpDrpdwn.push(value2);
      return 1;
    }
  };

  $scope.callFunction1 = function (obj) {
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key.startsWith("BUDGETED_TOOLMAKER")) {
          $scope.value = {
            value: obj[key]
          };
          var ret = 0;
          ret = $scope.adddrp($scope.value);

          if (ret == undefined || ret == 0) {
            $scope.budgetedToolmk.push($scope.value);
          }
        }

        if (key.startsWith("PART_GROUP")) {
          $scope.value1 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addPaneldrp($scope.value1);

          if (ret1 == undefined || ret1 == 0) {
            $scope.PanelGrpDrpdwn.push($scope.value1);
          }
        }

        if (key.startsWith("MATERIAL")) {
          $scope.value2 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addMaterial($scope.value2);

          if (ret1 == undefined || ret1 == 0) {
            $scope.MaterialGrades.push($scope.value2);
          }
        }
      }
    }
  };

  $scope.tmkReq = [];

  $scope.makeTmkArray = function (a) {
    debugger;

    if (a.selected1 == true) {
      $scope.tmkReq.push(a.TOOLMAKER_ID);
      var set = $scope.toolmakerDropdown.indexOf(a);
      $scope.setArr.push(set);
    }

    if (a.selected1 == false) {
      var indxOfObj = $scope.tmkReq.indexOf(a.TOOLMAKER_ID);
      $scope.tmkReq.splice(indxOfObj, 1);
      var set = $scope.toolmakerDropdown.indexOf(a);
      var s = $scope.setArr.indexOf(set);
      $scope.setArr.splice(s, 1);
    }
  };

  $scope.filter = function () {
    document.getElementById("myDropdown").classList.toggle("show");
    array = $scope.tmkReq;
    var flags = [],
        output = [],
        l = array.length,
        i;

    for (i = 0; i < l; i++) {
      if (flags[array[i]]) continue;
      flags[array[i]] = true;
      output.push(array[i]);
    }

    $scope.tmkReq = output;

    if ($scope.tmkReq.length > 0) {
      $scope.tmkarg = "";

      for (var i = 0; i < $scope.tmkReq.length; i++) {
        if ($scope.tmkarg != "") {
          $scope.tmkarg += ",";
        }

        $scope.tmkarg = $scope.tmkarg + "'" + $scope.tmkReq[i] + "'";
      }
    } else {
      $scope.tmkarg = '';
    }

    if ($scope.filterMG == undefined) {
      $scope.filterMG = '';
    }

    if ($scope.filterBT == undefined) {
      $scope.filterBT = '';
    }

    if ($scope.filterPG == undefined) {
      $scope.filterPG = '';
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.triggerRequest = function () {
    debugger;
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "BasicCost",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": $scope.decimals,
        "preferences": $scope.pf,
        "ComparePref": "",
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        console.log($scope.gridOptions.data);
        console.log("filtered: ", $scope.gridOptions.data);
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);
        $scope.gridOptions2.columnDefs.splice(7);
        $scope.colAdd($scope.gridOptions.data);
        $scope.settleData();
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.openDD = function () {
    document.getElementById("myDropdown").classList.toggle("show");
  };

  $scope.clearAllField = function () {
    $scope.filterMG = "";
    $scope.filterBT = "";
    $scope.setArr = [];
    $scope.filterPG = "";
    $scope.tmkarg = "";
    $scope.tmkReq = [];
    document.getElementById("myDropdown").classList.toggle("show");

    for (i = 0; i < $scope.toolmakerDropdown.length; i++) {
      if ($scope.toolmakerDropdown[i].selected1 != undefined && $scope.toolmakerDropdown[i].selected1 == true) {
        $scope.toolmakerDropdown[i].selected1 = false;
      }
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.changePrj($scope.cmm.projectCode, $scope.panelGroup, $scope.cmm.baslineNum, $scope.pf);
  };

  if ($scope.cmm.projectCode == undefined) {
    toastr.warning("Select ProjectCode");
  } else {
    $scope.openruPBox('1', $scope.cmm.projectCode, $scope.cmm.label, $scope.cmm.baslineNum);
  }

  $scope.xlSave = function () {
    console.log("basic cost save Data:", $scope.gridOptions.data);

    (function (_data) {
      console.log(_data);
      $.cordys.ajax({
        method: "UpdateErfqQuoteComparison",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          'tuple': _data
        },
        success: function success(data) {
          console.log("success");
          document.getElementById("revtab1").style.display = "";
          document.getElementById("tab1").style.display = "";
          document.getElementById("dietab1").style.display = "";
          document.getElementById("basictab1").style.display = "";
          document.getElementById("landedtab1").style.display = "";
          document.getElementById("costtab1").style.display = "";
          document.getElementById("besttab1").style.display = "";
          document.getElementById("preftab1").style.display = "";
          document.getElementById("targettab1").style.display = "";
          document.getElementById("subtab1").style.display = "";
          cmm.SaveTab = false;
          window.scrollTo(0, 0);
          toastr.success("Updated successfully!");
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log("jqXHR=>", jqXHR, "textStatus=>", textStatus, "errorThrown=>", errorThrown);
        }
      });
    })(_.map($scope.gridOptions2.data, function (d) {
      if (d.COMPARISON_SEQ == "") {
        return {
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'PROJECT_CODE': cmm.projectCode,
              'PART_NUMBER': d.PART_NUMBER,
              'NO_OF_DIES_BLANKINGDIE': d.NO_OF_DIES_BLANKINGDIE,
              'DIE_WEIGHT_BLANKINGDIE': "Included",
              'BASICCOST_BLANKINGDIE': "Included",
              'LANDEDCOST_BLANKINGDIE': "Included",
              'COSTPERTON_BLANKINGDIE': "Included",
              'PART_GROUP': $scope.cmm.label,
              'BASELINE_NUM': cmm.baslineNum
            }
          }
        };
      } else {
        return {
          "old": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ
            }
          },
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ,
              'BASICCOST_BLANKINGDIE': d.BASICCOST_BLANKINGDIE
            }
          }
        };
      }
    }));
  };

  $scope.$watchCollection('cmm.SaveTab', function (newValue, oldValue) {
    if (cmm.SaveTab == true) $scope.xlSave();
  }, true);
});
"use strict";

angular.module('multipleSelect', []).component('dbmultiple', {
  transclude: true,
  template: "<div class=\"dropdown\" ng-transclude>\n  <button class=\"btn border dropdown-toggle\" \n  type=\"button\" \n  style=\"width:100%;\"\n  id=\"dropdownMenuButton\" \n  data-toggle=\"dropdown\" \n  aria-haspopup=\"true\" \n  aria-expanded=\"false\">\n  <div class=\"float-left\">\n  </div>\n    {{$ctrl.model.length > 2 ? \"more than 2\":($ctrl.model.length == 0 ? 'Select':$ctrl.model.toString())}}\n  </button>\n  <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n  <span class=\"dropdown-item\" ng-repeat=\"d in $ctrl.op.op\">\n      <input type=\"checkbox\" class=\"m-2\" ng-model=\"d.value\" ng-change=\"$ctrl.change($ctrl.op)\">{{d.name}}\n    </span>\n  </div>\n</div>",
  controller: function controller() {
    this.change = function (data) {
      this.model = data.op.filter(function (d) {
        return d.value == true;
      }).map(function (d) {
        return d.name;
      });
    };
  },
  bindings: {
    op: '<',
    model: '='
  }
});
"use strict";

!function (a, b) {
  "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) {
    if (!a.document) throw new Error("jQuery requires a window with a document");
    return b(a);
  } : b(a);
}("undefined" != typeof window ? window : void 0, function (a, b) {
  var c = [],
      d = c.slice,
      e = c.concat,
      f = c.push,
      g = c.indexOf,
      h = {},
      i = h.toString,
      j = h.hasOwnProperty,
      k = {},
      l = a.document,
      m = "2.1.4",
      n = function n(a, b) {
    return new n.fn.init(a, b);
  },
      o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      p = /^-ms-/,
      q = /-([\da-z])/gi,
      r = function r(a, b) {
    return b.toUpperCase();
  };

  n.fn = n.prototype = {
    jquery: m,
    constructor: n,
    selector: "",
    length: 0,
    toArray: function toArray() {
      return d.call(this);
    },
    get: function get(a) {
      return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
    },
    pushStack: function pushStack(a) {
      var b = n.merge(this.constructor(), a);
      return b.prevObject = this, b.context = this.context, b;
    },
    each: function each(a, b) {
      return n.each(this, a, b);
    },
    map: function map(a) {
      return this.pushStack(n.map(this, function (b, c) {
        return a.call(b, c, b);
      }));
    },
    slice: function slice() {
      return this.pushStack(d.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    eq: function eq(a) {
      var b = this.length,
          c = +a + (0 > a ? b : 0);
      return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor(null);
    },
    push: f,
    sort: c.sort,
    splice: c.splice
  }, n.extend = n.fn.extend = function () {
    var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;

    for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || n.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {
      if (null != (a = arguments[h])) for (b in a) {
        c = g[b], d = a[b], g !== d && (j && d && (n.isPlainObject(d) || (e = n.isArray(d))) ? (e ? (e = !1, f = c && n.isArray(c) ? c : []) : f = c && n.isPlainObject(c) ? c : {}, g[b] = n.extend(j, f, d)) : void 0 !== d && (g[b] = d));
      }
    }

    return g;
  }, n.extend({
    expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""),
    isReady: !0,
    error: function error(a) {
      throw new Error(a);
    },
    noop: function noop() {},
    isFunction: function isFunction(a) {
      return "function" === n.type(a);
    },
    isArray: Array.isArray,
    isWindow: function isWindow(a) {
      return null != a && a === a.window;
    },
    isNumeric: function isNumeric(a) {
      return !n.isArray(a) && a - parseFloat(a) + 1 >= 0;
    },
    isPlainObject: function isPlainObject(a) {
      return "object" !== n.type(a) || a.nodeType || n.isWindow(a) ? !1 : a.constructor && !j.call(a.constructor.prototype, "isPrototypeOf") ? !1 : !0;
    },
    isEmptyObject: function isEmptyObject(a) {
      var b;

      for (b in a) {
        return !1;
      }

      return !0;
    },
    type: function type(a) {
      return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? h[i.call(a)] || "object" : typeof a;
    },
    globalEval: function globalEval(a) {
      var b,
          c = eval;
      a = n.trim(a), a && (1 === a.indexOf("use strict") ? (b = l.createElement("script"), b.text = a, l.head.appendChild(b).parentNode.removeChild(b)) : c(a));
    },
    camelCase: function camelCase(a) {
      return a.replace(p, "ms-").replace(q, r);
    },
    nodeName: function nodeName(a, b) {
      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    },
    each: function each(a, b, c) {
      var d,
          e = 0,
          f = a.length,
          g = s(a);

      if (c) {
        if (g) {
          for (; f > e; e++) {
            if (d = b.apply(a[e], c), d === !1) break;
          }
        } else for (e in a) {
          if (d = b.apply(a[e], c), d === !1) break;
        }
      } else if (g) {
        for (; f > e; e++) {
          if (d = b.call(a[e], e, a[e]), d === !1) break;
        }
      } else for (e in a) {
        if (d = b.call(a[e], e, a[e]), d === !1) break;
      }

      return a;
    },
    trim: function trim(a) {
      return null == a ? "" : (a + "").replace(o, "");
    },
    makeArray: function makeArray(a, b) {
      var c = b || [];
      return null != a && (s(Object(a)) ? n.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c;
    },
    inArray: function inArray(a, b, c) {
      return null == b ? -1 : g.call(b, a, c);
    },
    merge: function merge(a, b) {
      for (var c = +b.length, d = 0, e = a.length; c > d; d++) {
        a[e++] = b[d];
      }

      return a.length = e, a;
    },
    grep: function grep(a, b, c) {
      for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {
        d = !b(a[f], f), d !== h && e.push(a[f]);
      }

      return e;
    },
    map: function map(a, b, c) {
      var d,
          f = 0,
          g = a.length,
          h = s(a),
          i = [];
      if (h) for (; g > f; f++) {
        d = b(a[f], f, c), null != d && i.push(d);
      } else for (f in a) {
        d = b(a[f], f, c), null != d && i.push(d);
      }
      return e.apply([], i);
    },
    guid: 1,
    proxy: function proxy(a, b) {
      var c, e, f;
      return "string" == typeof b && (c = a[b], b = a, a = c), n.isFunction(a) ? (e = d.call(arguments, 2), f = function f() {
        return a.apply(b || this, e.concat(d.call(arguments)));
      }, f.guid = a.guid = a.guid || n.guid++, f) : void 0;
    },
    now: Date.now,
    support: k
  }), n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {
    h["[object " + b + "]"] = b.toLowerCase();
  });

  function s(a) {
    var b = "length" in a && a.length,
        c = n.type(a);
    return "function" === c || n.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;
  }

  var t = function (a) {
    var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u = "sizzle" + 1 * new Date(),
        v = a.document,
        w = 0,
        x = 0,
        y = ha(),
        z = ha(),
        A = ha(),
        B = function B(a, b) {
      return a === b && (l = !0), 0;
    },
        C = 1 << 31,
        D = {}.hasOwnProperty,
        E = [],
        F = E.pop,
        G = E.push,
        H = E.push,
        I = E.slice,
        J = function J(a, b) {
      for (var c = 0, d = a.length; d > c; c++) {
        if (a[c] === b) return c;
      }

      return -1;
    },
        K = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        L = "[\\x20\\t\\r\\n\\f]",
        M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
        N = M.replace("w", "w#"),
        O = "\\[" + L + "*(" + M + ")(?:" + L + "*([*^$|!~]?=)" + L + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + N + "))|)" + L + "*\\]",
        P = ":(" + M + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + O + ")*)|.*)\\)|)",
        Q = new RegExp(L + "+", "g"),
        R = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"),
        S = new RegExp("^" + L + "*," + L + "*"),
        T = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"),
        U = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"),
        V = new RegExp(P),
        W = new RegExp("^" + N + "$"),
        X = {
      ID: new RegExp("^#(" + M + ")"),
      CLASS: new RegExp("^\\.(" + M + ")"),
      TAG: new RegExp("^(" + M.replace("w", "w*") + ")"),
      ATTR: new RegExp("^" + O),
      PSEUDO: new RegExp("^" + P),
      CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + L + "*(even|odd|(([+-]|)(\\d*)n|)" + L + "*(?:([+-]|)" + L + "*(\\d+)|))" + L + "*\\)|)", "i"),
      bool: new RegExp("^(?:" + K + ")$", "i"),
      needsContext: new RegExp("^" + L + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + L + "*((?:-\\d)?\\d*)" + L + "*\\)|)(?=[^-]|$)", "i")
    },
        Y = /^(?:input|select|textarea|button)$/i,
        Z = /^h\d$/i,
        $ = /^[^{]+\{\s*\[native \w/,
        _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        aa = /[+~]/,
        ba = /'|\\/g,
        ca = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"),
        da = function da(a, b, c) {
      var d = "0x" + b - 65536;
      return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
    },
        ea = function ea() {
      m();
    };

    try {
      H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType;
    } catch (fa) {
      H = {
        apply: E.length ? function (a, b) {
          G.apply(a, I.call(b));
        } : function (a, b) {
          var c = a.length,
              d = 0;

          while (a[c++] = b[d++]) {
            ;
          }

          a.length = c - 1;
        }
      };
    }

    function ga(a, b, d, e) {
      var f, h, j, k, l, o, r, s, w, x;
      if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], k = b.nodeType, "string" != typeof a || !a || 1 !== k && 9 !== k && 11 !== k) return d;

      if (!e && p) {
        if (11 !== k && (f = _.exec(a))) if (j = f[1]) {
          if (9 === k) {
            if (h = b.getElementById(j), !h || !h.parentNode) return d;
            if (h.id === j) return d.push(h), d;
          } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;
        } else {
          if (f[2]) return H.apply(d, b.getElementsByTagName(a)), d;
          if ((j = f[3]) && c.getElementsByClassName) return H.apply(d, b.getElementsByClassName(j)), d;
        }

        if (c.qsa && (!q || !q.test(a))) {
          if (s = r = u, w = b, x = 1 !== k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
            o = g(a), (r = b.getAttribute("id")) ? s = r.replace(ba, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;

            while (l--) {
              o[l] = s + ra(o[l]);
            }

            w = aa.test(a) && pa(b.parentNode) || b, x = o.join(",");
          }

          if (x) try {
            return H.apply(d, w.querySelectorAll(x)), d;
          } catch (y) {} finally {
            r || b.removeAttribute("id");
          }
        }
      }

      return i(a.replace(R, "$1"), b, d, e);
    }

    function ha() {
      var a = [];

      function b(c, e) {
        return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
      }

      return b;
    }

    function ia(a) {
      return a[u] = !0, a;
    }

    function ja(a) {
      var b = n.createElement("div");

      try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), b = null;
      }
    }

    function ka(a, b) {
      var c = a.split("|"),
          e = a.length;

      while (e--) {
        d.attrHandle[c[e]] = b;
      }
    }

    function la(a, b) {
      var c = b && a,
          d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C);
      if (d) return d;
      if (c) while (c = c.nextSibling) {
        if (c === b) return -1;
      }
      return a ? 1 : -1;
    }

    function ma(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return "input" === c && b.type === a;
      };
    }

    function na(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return ("input" === c || "button" === c) && b.type === a;
      };
    }

    function oa(a) {
      return ia(function (b) {
        return b = +b, ia(function (c, d) {
          var e,
              f = a([], c.length, b),
              g = f.length;

          while (g--) {
            c[e = f[g]] && (c[e] = !(d[e] = c[e]));
          }
        });
      });
    }

    function pa(a) {
      return a && "undefined" != typeof a.getElementsByTagName && a;
    }

    c = ga.support = {}, f = ga.isXML = function (a) {
      var b = a && (a.ownerDocument || a).documentElement;
      return b ? "HTML" !== b.nodeName : !1;
    }, m = ga.setDocument = function (a) {
      var b,
          e,
          g = a ? a.ownerDocument || a : v;
      return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = g.documentElement, e = g.defaultView, e && e !== e.top && (e.addEventListener ? e.addEventListener("unload", ea, !1) : e.attachEvent && e.attachEvent("onunload", ea)), p = !f(g), c.attributes = ja(function (a) {
        return a.className = "i", !a.getAttribute("className");
      }), c.getElementsByTagName = ja(function (a) {
        return a.appendChild(g.createComment("")), !a.getElementsByTagName("*").length;
      }), c.getElementsByClassName = $.test(g.getElementsByClassName), c.getById = ja(function (a) {
        return o.appendChild(a).id = u, !g.getElementsByName || !g.getElementsByName(u).length;
      }), c.getById ? (d.find.ID = function (a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c = b.getElementById(a);
          return c && c.parentNode ? [c] : [];
        }
      }, d.filter.ID = function (a) {
        var b = a.replace(ca, da);
        return function (a) {
          return a.getAttribute("id") === b;
        };
      }) : (delete d.find.ID, d.filter.ID = function (a) {
        var b = a.replace(ca, da);
        return function (a) {
          var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");
          return c && c.value === b;
        };
      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
        return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
      } : function (a, b) {
        var c,
            d = [],
            e = 0,
            f = b.getElementsByTagName(a);

        if ("*" === a) {
          while (c = f[e++]) {
            1 === c.nodeType && d.push(c);
          }

          return d;
        }

        return f;
      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
        return p ? b.getElementsByClassName(a) : void 0;
      }, r = [], q = [], (c.qsa = $.test(g.querySelectorAll)) && (ja(function (a) {
        o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\f]' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + L + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + L + "*(?:value|" + K + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
      }), ja(function (a) {
        var b = g.createElement("input");
        b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + L + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
      })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {
        c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", P);
      }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {
        var c = 9 === a.nodeType ? a.documentElement : a,
            d = b && b.parentNode;
        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
      } : function (a, b) {
        if (b) while (b = b.parentNode) {
          if (b === a) return !0;
        }
        return !1;
      }, B = b ? function (a, b) {
        if (a === b) return l = !0, 0;
        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === g || a.ownerDocument === v && t(v, a) ? -1 : b === g || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1);
      } : function (a, b) {
        if (a === b) return l = !0, 0;
        var c,
            d = 0,
            e = a.parentNode,
            f = b.parentNode,
            h = [a],
            i = [b];
        if (!e || !f) return a === g ? -1 : b === g ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0;
        if (e === f) return la(a, b);
        c = a;

        while (c = c.parentNode) {
          h.unshift(c);
        }

        c = b;

        while (c = c.parentNode) {
          i.unshift(c);
        }

        while (h[d] === i[d]) {
          d++;
        }

        return d ? la(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
      }, g) : n;
    }, ga.matches = function (a, b) {
      return ga(a, null, null, b);
    }, ga.matchesSelector = function (a, b) {
      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
        var d = s.call(a, b);
        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
      } catch (e) {}
      return ga(b, n, null, [a]).length > 0;
    }, ga.contains = function (a, b) {
      return (a.ownerDocument || a) !== n && m(a), t(a, b);
    }, ga.attr = function (a, b) {
      (a.ownerDocument || a) !== n && m(a);
      var e = d.attrHandle[b.toLowerCase()],
          f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
    }, ga.error = function (a) {
      throw new Error("Syntax error, unrecognized expression: " + a);
    }, ga.uniqueSort = function (a) {
      var b,
          d = [],
          e = 0,
          f = 0;

      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
        while (b = a[f++]) {
          b === a[f] && (e = d.push(f));
        }

        while (e--) {
          a.splice(d[e], 1);
        }
      }

      return k = null, a;
    }, e = ga.getText = function (a) {
      var b,
          c = "",
          d = 0,
          f = a.nodeType;

      if (f) {
        if (1 === f || 9 === f || 11 === f) {
          if ("string" == typeof a.textContent) return a.textContent;

          for (a = a.firstChild; a; a = a.nextSibling) {
            c += e(a);
          }
        } else if (3 === f || 4 === f) return a.nodeValue;
      } else while (b = a[d++]) {
        c += e(b);
      }

      return c;
    }, d = ga.selectors = {
      cacheLength: 50,
      createPseudo: ia,
      match: X,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: !0
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: !0
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        ATTR: function ATTR(a) {
          return a[1] = a[1].replace(ca, da), a[3] = (a[3] || a[4] || a[5] || "").replace(ca, da), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
        },
        CHILD: function CHILD(a) {
          return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a;
        },
        PSEUDO: function PSEUDO(a) {
          var b,
              c = !a[6] && a[2];
          return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
        }
      },
      filter: {
        TAG: function TAG(a) {
          var b = a.replace(ca, da).toLowerCase();
          return "*" === a ? function () {
            return !0;
          } : function (a) {
            return a.nodeName && a.nodeName.toLowerCase() === b;
          };
        },
        CLASS: function CLASS(a) {
          var b = y[a + " "];
          return b || (b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) && y(a, function (a) {
            return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
          });
        },
        ATTR: function ATTR(a, b, c) {
          return function (d) {
            var e = ga.attr(d, a);
            return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(Q, " ") + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0;
          };
        },
        CHILD: function CHILD(a, b, c, d, e) {
          var f = "nth" !== a.slice(0, 3),
              g = "last" !== a.slice(-4),
              h = "of-type" === b;
          return 1 === d && 0 === e ? function (a) {
            return !!a.parentNode;
          } : function (b, c, i) {
            var j,
                k,
                l,
                m,
                n,
                o,
                p = f !== g ? "nextSibling" : "previousSibling",
                q = b.parentNode,
                r = h && b.nodeName.toLowerCase(),
                s = !i && !h;

            if (q) {
              if (f) {
                while (p) {
                  l = b;

                  while (l = l[p]) {
                    if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                  }

                  o = p = "only" === a && !o && "nextSibling";
                }

                return !0;
              }

              if (o = [g ? q.firstChild : q.lastChild], g && s) {
                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];

                while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
                  if (1 === l.nodeType && ++m && l === b) {
                    k[a] = [w, n, m];
                    break;
                  }
                }
              } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
                if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;
              }

              return m -= e, m === d || m % d === 0 && m / d >= 0;
            }
          };
        },
        PSEUDO: function PSEUDO(a, b) {
          var c,
              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);
          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {
            var d,
                f = e(a, b),
                g = f.length;

            while (g--) {
              d = J(a, f[g]), a[d] = !(c[d] = f[g]);
            }
          }) : function (a) {
            return e(a, 0, c);
          }) : e;
        }
      },
      pseudos: {
        not: ia(function (a) {
          var b = [],
              c = [],
              d = h(a.replace(R, "$1"));
          return d[u] ? ia(function (a, b, c, e) {
            var f,
                g = d(a, null, e, []),
                h = a.length;

            while (h--) {
              (f = g[h]) && (a[h] = !(b[h] = f));
            }
          }) : function (a, e, f) {
            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
          };
        }),
        has: ia(function (a) {
          return function (b) {
            return ga(a, b).length > 0;
          };
        }),
        contains: ia(function (a) {
          return a = a.replace(ca, da), function (b) {
            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
          };
        }),
        lang: ia(function (a) {
          return W.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(ca, da).toLowerCase(), function (b) {
            var c;

            do {
              if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
            } while ((b = b.parentNode) && 1 === b.nodeType);

            return !1;
          };
        }),
        target: function target(b) {
          var c = a.location && a.location.hash;
          return c && c.slice(1) === b.id;
        },
        root: function root(a) {
          return a === o;
        },
        focus: function focus(a) {
          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
        },
        enabled: function enabled(a) {
          return a.disabled === !1;
        },
        disabled: function disabled(a) {
          return a.disabled === !0;
        },
        checked: function checked(a) {
          var b = a.nodeName.toLowerCase();
          return "input" === b && !!a.checked || "option" === b && !!a.selected;
        },
        selected: function selected(a) {
          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
        },
        empty: function empty(a) {
          for (a = a.firstChild; a; a = a.nextSibling) {
            if (a.nodeType < 6) return !1;
          }

          return !0;
        },
        parent: function parent(a) {
          return !d.pseudos.empty(a);
        },
        header: function header(a) {
          return Z.test(a.nodeName);
        },
        input: function input(a) {
          return Y.test(a.nodeName);
        },
        button: function button(a) {
          var b = a.nodeName.toLowerCase();
          return "input" === b && "button" === a.type || "button" === b;
        },
        text: function text(a) {
          var b;
          return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
        },
        first: oa(function () {
          return [0];
        }),
        last: oa(function (a, b) {
          return [b - 1];
        }),
        eq: oa(function (a, b, c) {
          return [0 > c ? c + b : c];
        }),
        even: oa(function (a, b) {
          for (var c = 0; b > c; c += 2) {
            a.push(c);
          }

          return a;
        }),
        odd: oa(function (a, b) {
          for (var c = 1; b > c; c += 2) {
            a.push(c);
          }

          return a;
        }),
        lt: oa(function (a, b, c) {
          for (var d = 0 > c ? c + b : c; --d >= 0;) {
            a.push(d);
          }

          return a;
        }),
        gt: oa(function (a, b, c) {
          for (var d = 0 > c ? c + b : c; ++d < b;) {
            a.push(d);
          }

          return a;
        })
      }
    }, d.pseudos.nth = d.pseudos.eq;

    for (b in {
      radio: !0,
      checkbox: !0,
      file: !0,
      password: !0,
      image: !0
    }) {
      d.pseudos[b] = ma(b);
    }

    for (b in {
      submit: !0,
      reset: !0
    }) {
      d.pseudos[b] = na(b);
    }

    function qa() {}

    qa.prototype = d.filters = d.pseudos, d.setFilters = new qa(), g = ga.tokenize = function (a, b) {
      var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = z[a + " "];
      if (k) return b ? 0 : k.slice(0);
      h = a, i = [], j = d.preFilter;

      while (h) {
        (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({
          value: c,
          type: e[0].replace(R, " ")
        }), h = h.slice(c.length));

        for (g in d.filter) {
          !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
            value: c,
            type: g,
            matches: e
          }), h = h.slice(c.length));
        }

        if (!c) break;
      }

      return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
    };

    function ra(a) {
      for (var b = 0, c = a.length, d = ""; c > b; b++) {
        d += a[b].value;
      }

      return d;
    }

    function sa(a, b, c) {
      var d = b.dir,
          e = c && "parentNode" === d,
          f = x++;
      return b.first ? function (b, c, f) {
        while (b = b[d]) {
          if (1 === b.nodeType || e) return a(b, c, f);
        }
      } : function (b, c, g) {
        var h,
            i,
            j = [w, f];

        if (g) {
          while (b = b[d]) {
            if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
          }
        } else while (b = b[d]) {
          if (1 === b.nodeType || e) {
            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];
            if (i[d] = j, j[2] = a(b, c, g)) return !0;
          }
        }
      };
    }

    function ta(a) {
      return a.length > 1 ? function (b, c, d) {
        var e = a.length;

        while (e--) {
          if (!a[e](b, c, d)) return !1;
        }

        return !0;
      } : a[0];
    }

    function ua(a, b, c) {
      for (var d = 0, e = b.length; e > d; d++) {
        ga(a, b[d], c);
      }

      return c;
    }

    function va(a, b, c, d, e) {
      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {
        (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
      }

      return g;
    }

    function wa(a, b, c, d, e, f) {
      return d && !d[u] && (d = wa(d)), e && !e[u] && (e = wa(e, f)), ia(function (f, g, h, i) {
        var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || ua(b || "*", h.nodeType ? [h] : h, []),
            q = !a || !f && b ? p : va(p, m, a, h, i),
            r = c ? e || (f ? a : o || d) ? [] : g : q;

        if (c && c(q, r, h, i), d) {
          j = va(r, n), d(j, [], h, i), k = j.length;

          while (k--) {
            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
          }
        }

        if (f) {
          if (e || a) {
            if (e) {
              j = [], k = r.length;

              while (k--) {
                (l = r[k]) && j.push(q[k] = l);
              }

              e(null, r = [], j, i);
            }

            k = r.length;

            while (k--) {
              (l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
            }
          }
        } else r = va(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r);
      });
    }

    function xa(a) {
      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = sa(function (a) {
        return a === b;
      }, h, !0), l = sa(function (a) {
        return J(b, a) > -1;
      }, h, !0), m = [function (a, c, d) {
        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
        return b = null, e;
      }]; f > i; i++) {
        if (c = d.relative[a[i].type]) m = [sa(ta(m), c)];else {
          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
            for (e = ++i; f > e; e++) {
              if (d.relative[a[e].type]) break;
            }

            return wa(i > 1 && ta(m), i > 1 && ra(a.slice(0, i - 1).concat({
              value: " " === a[i - 2].type ? "*" : ""
            })).replace(R, "$1"), c, e > i && xa(a.slice(i, e)), f > e && xa(a = a.slice(e)), f > e && ra(a));
          }

          m.push(c);
        }
      }

      return ta(m);
    }

    function ya(a, b) {
      var c = b.length > 0,
          e = a.length > 0,
          f = function f(_f, g, h, i, k) {
        var l,
            m,
            o,
            p = 0,
            q = "0",
            r = _f && [],
            s = [],
            t = j,
            u = _f || e && d.find.TAG("*", k),
            v = w += null == t ? 1 : Math.random() || .1,
            x = u.length;

        for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
          if (e && l) {
            m = 0;

            while (o = a[m++]) {
              if (o(l, g, h)) {
                i.push(l);
                break;
              }
            }

            k && (w = v);
          }

          c && ((l = !o && l) && p--, _f && r.push(l));
        }

        if (p += q, c && q !== p) {
          m = 0;

          while (o = b[m++]) {
            o(r, s, g, h);
          }

          if (_f) {
            if (p > 0) while (q--) {
              r[q] || s[q] || (s[q] = F.call(i));
            }
            s = va(s);
          }

          H.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && ga.uniqueSort(i);
        }

        return k && (w = v, j = t), r;
      };

      return c ? ia(f) : f;
    }

    return h = ga.compile = function (a, b) {
      var c,
          d = [],
          e = [],
          f = A[a + " "];

      if (!f) {
        b || (b = g(a)), c = b.length;

        while (c--) {
          f = xa(b[c]), f[u] ? d.push(f) : e.push(f);
        }

        f = A(a, ya(e, d)), f.selector = a;
      }

      return f;
    }, i = ga.select = function (a, b, e, f) {
      var i,
          j,
          k,
          l,
          m,
          n = "function" == typeof a && a,
          o = !f && g(a = n.selector || a);

      if (e = e || [], 1 === o.length) {
        if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
          if (b = (d.find.ID(k.matches[0].replace(ca, da), b) || [])[0], !b) return e;
          n && (b = b.parentNode), a = a.slice(j.shift().value.length);
        }

        i = X.needsContext.test(a) ? 0 : j.length;

        while (i--) {
          if (k = j[i], d.relative[l = k.type]) break;

          if ((m = d.find[l]) && (f = m(k.matches[0].replace(ca, da), aa.test(j[0].type) && pa(b.parentNode) || b))) {
            if (j.splice(i, 1), a = f.length && ra(j), !a) return H.apply(e, f), e;
            break;
          }
        }
      }

      return (n || h(a, o))(f, b, !p, e, aa.test(a) && pa(b.parentNode) || b), e;
    }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {
      return 1 & a.compareDocumentPosition(n.createElement("div"));
    }), ja(function (a) {
      return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
    }) || ka("type|href|height|width", function (a, b, c) {
      return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
    }), c.attributes && ja(function (a) {
      return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
    }) || ka("value", function (a, b, c) {
      return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
    }), ja(function (a) {
      return null == a.getAttribute("disabled");
    }) || ka(K, function (a, b, c) {
      var d;
      return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
    }), ga;
  }(a);

  n.find = t, n.expr = t.selectors, n.expr[":"] = n.expr.pseudos, n.unique = t.uniqueSort, n.text = t.getText, n.isXMLDoc = t.isXML, n.contains = t.contains;
  var u = n.expr.match.needsContext,
      v = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
      w = /^.[^:#\[\.,]*$/;

  function x(a, b, c) {
    if (n.isFunction(b)) return n.grep(a, function (a, d) {
      return !!b.call(a, d, a) !== c;
    });
    if (b.nodeType) return n.grep(a, function (a) {
      return a === b !== c;
    });

    if ("string" == typeof b) {
      if (w.test(b)) return n.filter(b, a, c);
      b = n.filter(b, a);
    }

    return n.grep(a, function (a) {
      return g.call(b, a) >= 0 !== c;
    });
  }

  n.filter = function (a, b, c) {
    var d = b[0];
    return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [d] : [] : n.find.matches(a, n.grep(b, function (a) {
      return 1 === a.nodeType;
    }));
  }, n.fn.extend({
    find: function find(a) {
      var b,
          c = this.length,
          d = [],
          e = this;
      if ("string" != typeof a) return this.pushStack(n(a).filter(function () {
        for (b = 0; c > b; b++) {
          if (n.contains(e[b], this)) return !0;
        }
      }));

      for (b = 0; c > b; b++) {
        n.find(a, e[b], d);
      }

      return d = this.pushStack(c > 1 ? n.unique(d) : d), d.selector = this.selector ? this.selector + " " + a : a, d;
    },
    filter: function filter(a) {
      return this.pushStack(x(this, a || [], !1));
    },
    not: function not(a) {
      return this.pushStack(x(this, a || [], !0));
    },
    is: function is(a) {
      return !!x(this, "string" == typeof a && u.test(a) ? n(a) : a || [], !1).length;
    }
  });

  var y,
      z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
      A = n.fn.init = function (a, b) {
    var c, d;
    if (!a) return this;

    if ("string" == typeof a) {
      if (c = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || y).find(a) : this.constructor(b).find(a);

      if (c[1]) {
        if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : l, !0)), v.test(c[1]) && n.isPlainObject(b)) for (c in b) {
          n.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
        }
        return this;
      }

      return d = l.getElementById(c[2]), d && d.parentNode && (this.length = 1, this[0] = d), this.context = l, this.selector = a, this;
    }

    return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? "undefined" != typeof y.ready ? y.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), n.makeArray(a, this));
  };

  A.prototype = n.fn, y = n(l);
  var B = /^(?:parents|prev(?:Until|All))/,
      C = {
    children: !0,
    contents: !0,
    next: !0,
    prev: !0
  };
  n.extend({
    dir: function dir(a, b, c) {
      var d = [],
          e = void 0 !== c;

      while ((a = a[b]) && 9 !== a.nodeType) {
        if (1 === a.nodeType) {
          if (e && n(a).is(c)) break;
          d.push(a);
        }
      }

      return d;
    },
    sibling: function sibling(a, b) {
      for (var c = []; a; a = a.nextSibling) {
        1 === a.nodeType && a !== b && c.push(a);
      }

      return c;
    }
  }), n.fn.extend({
    has: function has(a) {
      var b = n(a, this),
          c = b.length;
      return this.filter(function () {
        for (var a = 0; c > a; a++) {
          if (n.contains(this, b[a])) return !0;
        }
      });
    },
    closest: function closest(a, b) {
      for (var c, d = 0, e = this.length, f = [], g = u.test(a) || "string" != typeof a ? n(a, b || this.context) : 0; e > d; d++) {
        for (c = this[d]; c && c !== b; c = c.parentNode) {
          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) {
            f.push(c);
            break;
          }
        }
      }

      return this.pushStack(f.length > 1 ? n.unique(f) : f);
    },
    index: function index(a) {
      return a ? "string" == typeof a ? g.call(n(a), this[0]) : g.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    },
    add: function add(a, b) {
      return this.pushStack(n.unique(n.merge(this.get(), n(a, b))));
    },
    addBack: function addBack(a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    }
  });

  function D(a, b) {
    while ((a = a[b]) && 1 !== a.nodeType) {
      ;
    }

    return a;
  }

  n.each({
    parent: function parent(a) {
      var b = a.parentNode;
      return b && 11 !== b.nodeType ? b : null;
    },
    parents: function parents(a) {
      return n.dir(a, "parentNode");
    },
    parentsUntil: function parentsUntil(a, b, c) {
      return n.dir(a, "parentNode", c);
    },
    next: function next(a) {
      return D(a, "nextSibling");
    },
    prev: function prev(a) {
      return D(a, "previousSibling");
    },
    nextAll: function nextAll(a) {
      return n.dir(a, "nextSibling");
    },
    prevAll: function prevAll(a) {
      return n.dir(a, "previousSibling");
    },
    nextUntil: function nextUntil(a, b, c) {
      return n.dir(a, "nextSibling", c);
    },
    prevUntil: function prevUntil(a, b, c) {
      return n.dir(a, "previousSibling", c);
    },
    siblings: function siblings(a) {
      return n.sibling((a.parentNode || {}).firstChild, a);
    },
    children: function children(a) {
      return n.sibling(a.firstChild);
    },
    contents: function contents(a) {
      return a.contentDocument || n.merge([], a.childNodes);
    }
  }, function (a, b) {
    n.fn[a] = function (c, d) {
      var e = n.map(this, b, c);
      return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = n.filter(d, e)), this.length > 1 && (C[a] || n.unique(e), B.test(a) && e.reverse()), this.pushStack(e);
    };
  });
  var E = /\S+/g,
      F = {};

  function G(a) {
    var b = F[a] = {};
    return n.each(a.match(E) || [], function (a, c) {
      b[c] = !0;
    }), b;
  }

  n.Callbacks = function (a) {
    a = "string" == typeof a ? F[a] || G(a) : n.extend({}, a);

    var b,
        c,
        d,
        e,
        f,
        g,
        h = [],
        i = !a.once && [],
        j = function j(l) {
      for (b = a.memory && l, c = !0, g = e || 0, e = 0, f = h.length, d = !0; h && f > g; g++) {
        if (h[g].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
          b = !1;
          break;
        }
      }

      d = !1, h && (i ? i.length && j(i.shift()) : b ? h = [] : k.disable());
    },
        k = {
      add: function add() {
        if (h) {
          var c = h.length;
          !function g(b) {
            n.each(b, function (b, c) {
              var d = n.type(c);
              "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && g(c);
            });
          }(arguments), d ? f = h.length : b && (e = c, j(b));
        }

        return this;
      },
      remove: function remove() {
        return h && n.each(arguments, function (a, b) {
          var c;

          while ((c = n.inArray(b, h, c)) > -1) {
            h.splice(c, 1), d && (f >= c && f--, g >= c && g--);
          }
        }), this;
      },
      has: function has(a) {
        return a ? n.inArray(a, h) > -1 : !(!h || !h.length);
      },
      empty: function empty() {
        return h = [], f = 0, this;
      },
      disable: function disable() {
        return h = i = b = void 0, this;
      },
      disabled: function disabled() {
        return !h;
      },
      lock: function lock() {
        return i = void 0, b || k.disable(), this;
      },
      locked: function locked() {
        return !i;
      },
      fireWith: function fireWith(a, b) {
        return !h || c && !i || (b = b || [], b = [a, b.slice ? b.slice() : b], d ? i.push(b) : j(b)), this;
      },
      fire: function fire() {
        return k.fireWith(this, arguments), this;
      },
      fired: function fired() {
        return !!c;
      }
    };

    return k;
  }, n.extend({
    Deferred: function Deferred(a) {
      var b = [["resolve", "done", n.Callbacks("once memory"), "resolved"], ["reject", "fail", n.Callbacks("once memory"), "rejected"], ["notify", "progress", n.Callbacks("memory")]],
          c = "pending",
          d = {
        state: function state() {
          return c;
        },
        always: function always() {
          return e.done(arguments).fail(arguments), this;
        },
        then: function then() {
          var a = arguments;
          return n.Deferred(function (c) {
            n.each(b, function (b, f) {
              var g = n.isFunction(a[b]) && a[b];
              e[f[1]](function () {
                var a = g && g.apply(this, arguments);
                a && n.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments);
              });
            }), a = null;
          }).promise();
        },
        promise: function promise(a) {
          return null != a ? n.extend(a, d) : d;
        }
      },
          e = {};
      return d.pipe = d.then, n.each(b, function (a, f) {
        var g = f[2],
            h = f[3];
        d[f[1]] = g.add, h && g.add(function () {
          c = h;
        }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {
          return e[f[0] + "With"](this === e ? d : this, arguments), this;
        }, e[f[0] + "With"] = g.fireWith;
      }), d.promise(e), a && a.call(e, e), e;
    },
    when: function when(a) {
      var b = 0,
          c = d.call(arguments),
          e = c.length,
          f = 1 !== e || a && n.isFunction(a.promise) ? e : 0,
          g = 1 === f ? a : n.Deferred(),
          h = function h(a, b, c) {
        return function (e) {
          b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
        };
      },
          i,
          j,
          k;

      if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {
        c[b] && n.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
      }
      return f || g.resolveWith(k, c), g.promise();
    }
  });
  var H;
  n.fn.ready = function (a) {
    return n.ready.promise().done(a), this;
  }, n.extend({
    isReady: !1,
    readyWait: 1,
    holdReady: function holdReady(a) {
      a ? n.readyWait++ : n.ready(!0);
    },
    ready: function ready(a) {
      (a === !0 ? --n.readyWait : n.isReady) || (n.isReady = !0, a !== !0 && --n.readyWait > 0 || (H.resolveWith(l, [n]), n.fn.triggerHandler && (n(l).triggerHandler("ready"), n(l).off("ready"))));
    }
  });

  function I() {
    l.removeEventListener("DOMContentLoaded", I, !1), a.removeEventListener("load", I, !1), n.ready();
  }

  n.ready.promise = function (b) {
    return H || (H = n.Deferred(), "complete" === l.readyState ? setTimeout(n.ready) : (l.addEventListener("DOMContentLoaded", I, !1), a.addEventListener("load", I, !1))), H.promise(b);
  }, n.ready.promise();

  var J = n.access = function (a, b, c, d, e, f, g) {
    var h = 0,
        i = a.length,
        j = null == c;

    if ("object" === n.type(c)) {
      e = !0;

      for (h in c) {
        n.access(a, b, h, c[h], !0, f, g);
      }
    } else if (void 0 !== d && (e = !0, n.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b, c) {
      return j.call(n(a), c);
    })), b)) for (; i > h; h++) {
      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
    }

    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
  };

  n.acceptData = function (a) {
    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
  };

  function K() {
    Object.defineProperty(this.cache = {}, 0, {
      get: function get() {
        return {};
      }
    }), this.expando = n.expando + K.uid++;
  }

  K.uid = 1, K.accepts = n.acceptData, K.prototype = {
    key: function key(a) {
      if (!K.accepts(a)) return 0;
      var b = {},
          c = a[this.expando];

      if (!c) {
        c = K.uid++;

        try {
          b[this.expando] = {
            value: c
          }, Object.defineProperties(a, b);
        } catch (d) {
          b[this.expando] = c, n.extend(a, b);
        }
      }

      return this.cache[c] || (this.cache[c] = {}), c;
    },
    set: function set(a, b, c) {
      var d,
          e = this.key(a),
          f = this.cache[e];
      if ("string" == typeof b) f[b] = c;else if (n.isEmptyObject(f)) n.extend(this.cache[e], b);else for (d in b) {
        f[d] = b[d];
      }
      return f;
    },
    get: function get(a, b) {
      var c = this.cache[this.key(a)];
      return void 0 === b ? c : c[b];
    },
    access: function access(a, b, c) {
      var d;
      return void 0 === b || b && "string" == typeof b && void 0 === c ? (d = this.get(a, b), void 0 !== d ? d : this.get(a, n.camelCase(b))) : (this.set(a, b, c), void 0 !== c ? c : b);
    },
    remove: function remove(a, b) {
      var c,
          d,
          e,
          f = this.key(a),
          g = this.cache[f];
      if (void 0 === b) this.cache[f] = {};else {
        n.isArray(b) ? d = b.concat(b.map(n.camelCase)) : (e = n.camelCase(b), b in g ? d = [b, e] : (d = e, d = d in g ? [d] : d.match(E) || [])), c = d.length;

        while (c--) {
          delete g[d[c]];
        }
      }
    },
    hasData: function hasData(a) {
      return !n.isEmptyObject(this.cache[a[this.expando]] || {});
    },
    discard: function discard(a) {
      a[this.expando] && delete this.cache[a[this.expando]];
    }
  };
  var L = new K(),
      M = new K(),
      N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      O = /([A-Z])/g;

  function P(a, b, c) {
    var d;
    if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(O, "-$1").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
      try {
        c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : N.test(c) ? n.parseJSON(c) : c;
      } catch (e) {}

      M.set(a, b, c);
    } else c = void 0;
    return c;
  }

  n.extend({
    hasData: function hasData(a) {
      return M.hasData(a) || L.hasData(a);
    },
    data: function data(a, b, c) {
      return M.access(a, b, c);
    },
    removeData: function removeData(a, b) {
      M.remove(a, b);
    },
    _data: function _data(a, b, c) {
      return L.access(a, b, c);
    },
    _removeData: function _removeData(a, b) {
      L.remove(a, b);
    }
  }), n.fn.extend({
    data: function data(a, b) {
      var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;

      if (void 0 === a) {
        if (this.length && (e = M.get(f), 1 === f.nodeType && !L.get(f, "hasDataAttrs"))) {
          c = g.length;

          while (c--) {
            g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = n.camelCase(d.slice(5)), P(f, d, e[d])));
          }

          L.set(f, "hasDataAttrs", !0);
        }

        return e;
      }

      return "object" == typeof a ? this.each(function () {
        M.set(this, a);
      }) : J(this, function (b) {
        var c,
            d = n.camelCase(a);

        if (f && void 0 === b) {
          if (c = M.get(f, a), void 0 !== c) return c;
          if (c = M.get(f, d), void 0 !== c) return c;
          if (c = P(f, d, void 0), void 0 !== c) return c;
        } else this.each(function () {
          var c = M.get(this, d);
          M.set(this, d, b), -1 !== a.indexOf("-") && void 0 !== c && M.set(this, a, b);
        });
      }, null, b, arguments.length > 1, null, !0);
    },
    removeData: function removeData(a) {
      return this.each(function () {
        M.remove(this, a);
      });
    }
  }), n.extend({
    queue: function queue(a, b, c) {
      var d;
      return a ? (b = (b || "fx") + "queue", d = L.get(a, b), c && (!d || n.isArray(c) ? d = L.access(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0;
    },
    dequeue: function dequeue(a, b) {
      b = b || "fx";

      var c = n.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = n._queueHooks(a, b),
          g = function g() {
        n.dequeue(a, b);
      };

      "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    },
    _queueHooks: function _queueHooks(a, b) {
      var c = b + "queueHooks";
      return L.get(a, c) || L.access(a, c, {
        empty: n.Callbacks("once memory").add(function () {
          L.remove(a, [b + "queue", c]);
        })
      });
    }
  }), n.fn.extend({
    queue: function queue(a, b) {
      var c = 2;
      return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function () {
        var c = n.queue(this, a, b);
        n._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a);
      });
    },
    dequeue: function dequeue(a) {
      return this.each(function () {
        n.dequeue(this, a);
      });
    },
    clearQueue: function clearQueue(a) {
      return this.queue(a || "fx", []);
    },
    promise: function promise(a, b) {
      var c,
          d = 1,
          e = n.Deferred(),
          f = this,
          g = this.length,
          h = function h() {
        --d || e.resolveWith(f, [f]);
      };

      "string" != typeof a && (b = a, a = void 0), a = a || "fx";

      while (g--) {
        c = L.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
      }

      return h(), e.promise(b);
    }
  });

  var Q = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      R = ["Top", "Right", "Bottom", "Left"],
      S = function S(a, b) {
    return a = b || a, "none" === n.css(a, "display") || !n.contains(a.ownerDocument, a);
  },
      T = /^(?:checkbox|radio)$/i;

  !function () {
    var a = l.createDocumentFragment(),
        b = a.appendChild(l.createElement("div")),
        c = l.createElement("input");
    c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
  }();
  var U = "undefined";
  k.focusinBubbles = "onfocusin" in a;
  var V = /^key/,
      W = /^(?:mouse|pointer|contextmenu)|click/,
      X = /^(?:focusinfocus|focusoutblur)$/,
      Y = /^([^.]*)(?:\.(.+)|)$/;

  function Z() {
    return !0;
  }

  function $() {
    return !1;
  }

  function _() {
    try {
      return l.activeElement;
    } catch (a) {}
  }

  n.event = {
    global: {},
    add: function add(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          o,
          p,
          q,
          r = L.get(a);

      if (r) {
        c.handler && (f = c, c = f.handler, e = f.selector), c.guid || (c.guid = n.guid++), (i = r.events) || (i = r.events = {}), (g = r.handle) || (g = r.handle = function (b) {
          return typeof n !== U && n.event.triggered !== b.type ? n.event.dispatch.apply(a, arguments) : void 0;
        }), b = (b || "").match(E) || [""], j = b.length;

        while (j--) {
          h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o && (l = n.event.special[o] || {}, o = (e ? l.delegateType : l.bindType) || o, l = n.event.special[o] || {}, k = n.extend({
            type: o,
            origType: q,
            data: d,
            handler: c,
            guid: c.guid,
            selector: e,
            needsContext: e && n.expr.match.needsContext.test(e),
            namespace: p.join(".")
          }, f), (m = i[o]) || (m = i[o] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, p, g) !== !1 || a.addEventListener && a.addEventListener(o, g, !1)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), n.event.global[o] = !0);
        }
      }
    },
    remove: function remove(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          o,
          p,
          q,
          r = L.hasData(a) && L.get(a);

      if (r && (i = r.events)) {
        b = (b || "").match(E) || [""], j = b.length;

        while (j--) {
          if (h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {
            l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = i[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;

            while (f--) {
              k = m[f], !e && q !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
            }

            g && !m.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || n.removeEvent(a, o, r.handle), delete i[o]);
          } else for (o in i) {
            n.event.remove(a, o + b[j], c, d, !0);
          }
        }

        n.isEmptyObject(i) && (delete r.handle, L.remove(a, "events"));
      }
    },
    trigger: function trigger(b, c, d, e) {
      var f,
          g,
          h,
          i,
          k,
          m,
          o,
          p = [d || l],
          q = j.call(b, "type") ? b.type : b,
          r = j.call(b, "namespace") ? b.namespace.split(".") : [];

      if (g = h = d = d || l, 3 !== d.nodeType && 8 !== d.nodeType && !X.test(q + n.event.triggered) && (q.indexOf(".") >= 0 && (r = q.split("."), q = r.shift(), r.sort()), k = q.indexOf(":") < 0 && "on" + q, b = b[n.expando] ? b : new n.Event(q, "object" == typeof b && b), b.isTrigger = e ? 2 : 3, b.namespace = r.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : n.makeArray(c, [b]), o = n.event.special[q] || {}, e || !o.trigger || o.trigger.apply(d, c) !== !1)) {
        if (!e && !o.noBubble && !n.isWindow(d)) {
          for (i = o.delegateType || q, X.test(i + q) || (g = g.parentNode); g; g = g.parentNode) {
            p.push(g), h = g;
          }

          h === (d.ownerDocument || l) && p.push(h.defaultView || h.parentWindow || a);
        }

        f = 0;

        while ((g = p[f++]) && !b.isPropagationStopped()) {
          b.type = f > 1 ? i : o.bindType || q, m = (L.get(g, "events") || {})[b.type] && L.get(g, "handle"), m && m.apply(g, c), m = k && g[k], m && m.apply && n.acceptData(g) && (b.result = m.apply(g, c), b.result === !1 && b.preventDefault());
        }

        return b.type = q, e || b.isDefaultPrevented() || o._default && o._default.apply(p.pop(), c) !== !1 || !n.acceptData(d) || k && n.isFunction(d[q]) && !n.isWindow(d) && (h = d[k], h && (d[k] = null), n.event.triggered = q, d[q](), n.event.triggered = void 0, h && (d[k] = h)), b.result;
      }
    },
    dispatch: function dispatch(a) {
      a = n.event.fix(a);
      var b,
          c,
          e,
          f,
          g,
          h = [],
          i = d.call(arguments),
          j = (L.get(this, "events") || {})[a.type] || [],
          k = n.event.special[a.type] || {};

      if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
        h = n.event.handlers.call(this, a, j), b = 0;

        while ((f = h[b++]) && !a.isPropagationStopped()) {
          a.currentTarget = f.elem, c = 0;

          while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped()) {
            (!a.namespace_re || a.namespace_re.test(g.namespace)) && (a.handleObj = g, a.data = g.data, e = ((n.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (a.result = e) === !1 && (a.preventDefault(), a.stopPropagation()));
          }
        }

        return k.postDispatch && k.postDispatch.call(this, a), a.result;
      }
    },
    handlers: function handlers(a, b) {
      var c,
          d,
          e,
          f,
          g = [],
          h = b.delegateCount,
          i = a.target;
      if (h && i.nodeType && (!a.button || "click" !== a.type)) for (; i !== this; i = i.parentNode || this) {
        if (i.disabled !== !0 || "click" !== a.type) {
          for (d = [], c = 0; h > c; c++) {
            f = b[c], e = f.selector + " ", void 0 === d[e] && (d[e] = f.needsContext ? n(e, this).index(i) >= 0 : n.find(e, this, null, [i]).length), d[e] && d.push(f);
          }

          d.length && g.push({
            elem: i,
            handlers: d
          });
        }
      }
      return h < b.length && g.push({
        elem: this,
        handlers: b.slice(h)
      }), g;
    },
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    fixHooks: {},
    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function filter(a, b) {
        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;
      }
    },
    mouseHooks: {
      props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      filter: function filter(a, b) {
        var c,
            d,
            e,
            f = b.button;
        return null == a.pageX && null != b.clientX && (c = a.target.ownerDocument || l, d = c.documentElement, e = c.body, a.pageX = b.clientX + (d && d.scrollLeft || e && e.scrollLeft || 0) - (d && d.clientLeft || e && e.clientLeft || 0), a.pageY = b.clientY + (d && d.scrollTop || e && e.scrollTop || 0) - (d && d.clientTop || e && e.clientTop || 0)), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;
      }
    },
    fix: function fix(a) {
      if (a[n.expando]) return a;
      var b,
          c,
          d,
          e = a.type,
          f = a,
          g = this.fixHooks[e];
      g || (this.fixHooks[e] = g = W.test(e) ? this.mouseHooks : V.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new n.Event(f), b = d.length;

      while (b--) {
        c = d[b], a[c] = f[c];
      }

      return a.target || (a.target = l), 3 === a.target.nodeType && (a.target = a.target.parentNode), g.filter ? g.filter(a, f) : a;
    },
    special: {
      load: {
        noBubble: !0
      },
      focus: {
        trigger: function trigger() {
          return this !== _() && this.focus ? (this.focus(), !1) : void 0;
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function trigger() {
          return this === _() && this.blur ? (this.blur(), !1) : void 0;
        },
        delegateType: "focusout"
      },
      click: {
        trigger: function trigger() {
          return "checkbox" === this.type && this.click && n.nodeName(this, "input") ? (this.click(), !1) : void 0;
        },
        _default: function _default(a) {
          return n.nodeName(a.target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(a) {
          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
        }
      }
    },
    simulate: function simulate(a, b, c, d) {
      var e = n.extend(new n.Event(), c, {
        type: a,
        isSimulated: !0,
        originalEvent: {}
      });
      d ? n.event.trigger(e, null, b) : n.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
    }
  }, n.removeEvent = function (a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c, !1);
  }, n.Event = function (a, b) {
    return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? Z : $) : this.type = a, b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void (this[n.expando] = !0)) : new n.Event(a, b);
  }, n.Event.prototype = {
    isDefaultPrevented: $,
    isPropagationStopped: $,
    isImmediatePropagationStopped: $,
    preventDefault: function preventDefault() {
      var a = this.originalEvent;
      this.isDefaultPrevented = Z, a && a.preventDefault && a.preventDefault();
    },
    stopPropagation: function stopPropagation() {
      var a = this.originalEvent;
      this.isPropagationStopped = Z, a && a.stopPropagation && a.stopPropagation();
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var a = this.originalEvent;
      this.isImmediatePropagationStopped = Z, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();
    }
  }, n.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (a, b) {
    n.event.special[a] = {
      delegateType: b,
      bindType: b,
      handle: function handle(a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj;
        return (!e || e !== d && !n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
      }
    };
  }), k.focusinBubbles || n.each({
    focus: "focusin",
    blur: "focusout"
  }, function (a, b) {
    var c = function c(a) {
      n.event.simulate(b, a.target, n.event.fix(a), !0);
    };

    n.event.special[b] = {
      setup: function setup() {
        var d = this.ownerDocument || this,
            e = L.access(d, b);
        e || d.addEventListener(a, c, !0), L.access(d, b, (e || 0) + 1);
      },
      teardown: function teardown() {
        var d = this.ownerDocument || this,
            e = L.access(d, b) - 1;
        e ? L.access(d, b, e) : (d.removeEventListener(a, c, !0), L.remove(d, b));
      }
    };
  }), n.fn.extend({
    on: function on(a, b, c, d, e) {
      var f, g;

      if ("object" == typeof a) {
        "string" != typeof b && (c = c || b, b = void 0);

        for (g in a) {
          this.on(g, b, c, a[g], e);
        }

        return this;
      }

      if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = $;else if (!d) return this;
      return 1 === e && (f = d, d = function d(a) {
        return n().off(a), f.apply(this, arguments);
      }, d.guid = f.guid || (f.guid = n.guid++)), this.each(function () {
        n.event.add(this, a, d, c, b);
      });
    },
    one: function one(a, b, c, d) {
      return this.on(a, b, c, d, 1);
    },
    off: function off(a, b, c) {
      var d, e;
      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;

      if ("object" == typeof a) {
        for (e in a) {
          this.off(e, b, a[e]);
        }

        return this;
      }

      return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = $), this.each(function () {
        n.event.remove(this, a, c, b);
      });
    },
    trigger: function trigger(a, b) {
      return this.each(function () {
        n.event.trigger(a, b, this);
      });
    },
    triggerHandler: function triggerHandler(a, b) {
      var c = this[0];
      return c ? n.event.trigger(a, b, c, !0) : void 0;
    }
  });
  var aa = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      ba = /<([\w:]+)/,
      ca = /<|&#?\w+;/,
      da = /<(?:script|style|link)/i,
      ea = /checked\s*(?:[^=]|=\s*.checked.)/i,
      fa = /^$|\/(?:java|ecma)script/i,
      ga = /^true\/(.*)/,
      ha = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
      ia = {
    option: [1, "<select multiple='multiple'>", "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  ia.optgroup = ia.option, ia.tbody = ia.tfoot = ia.colgroup = ia.caption = ia.thead, ia.th = ia.td;

  function ja(a, b) {
    return n.nodeName(a, "table") && n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
  }

  function ka(a) {
    return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
  }

  function la(a) {
    var b = ga.exec(a.type);
    return b ? a.type = b[1] : a.removeAttribute("type"), a;
  }

  function ma(a, b) {
    for (var c = 0, d = a.length; d > c; c++) {
      L.set(a[c], "globalEval", !b || L.get(b[c], "globalEval"));
    }
  }

  function na(a, b) {
    var c, d, e, f, g, h, i, j;

    if (1 === b.nodeType) {
      if (L.hasData(a) && (f = L.access(a), g = L.set(b, f), j = f.events)) {
        delete g.handle, g.events = {};

        for (e in j) {
          for (c = 0, d = j[e].length; d > c; c++) {
            n.event.add(b, e, j[e][c]);
          }
        }
      }

      M.hasData(a) && (h = M.access(a), i = n.extend({}, h), M.set(b, i));
    }
  }

  function oa(a, b) {
    var c = a.getElementsByTagName ? a.getElementsByTagName(b || "*") : a.querySelectorAll ? a.querySelectorAll(b || "*") : [];
    return void 0 === b || b && n.nodeName(a, b) ? n.merge([a], c) : c;
  }

  function pa(a, b) {
    var c = b.nodeName.toLowerCase();
    "input" === c && T.test(a.type) ? b.checked = a.checked : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);
  }

  n.extend({
    clone: function clone(a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.cloneNode(!0),
          i = n.contains(a.ownerDocument, a);
      if (!(k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a))) for (g = oa(h), f = oa(a), d = 0, e = f.length; e > d; d++) {
        pa(f[d], g[d]);
      }
      if (b) if (c) for (f = f || oa(a), g = g || oa(h), d = 0, e = f.length; e > d; d++) {
        na(f[d], g[d]);
      } else na(a, h);
      return g = oa(h, "script"), g.length > 0 && ma(g, !i && oa(a, "script")), h;
    },
    buildFragment: function buildFragment(a, b, c, d) {
      for (var e, f, g, h, i, j, k = b.createDocumentFragment(), l = [], m = 0, o = a.length; o > m; m++) {
        if (e = a[m], e || 0 === e) if ("object" === n.type(e)) n.merge(l, e.nodeType ? [e] : e);else if (ca.test(e)) {
          f = f || k.appendChild(b.createElement("div")), g = (ba.exec(e) || ["", ""])[1].toLowerCase(), h = ia[g] || ia._default, f.innerHTML = h[1] + e.replace(aa, "<$1></$2>") + h[2], j = h[0];

          while (j--) {
            f = f.lastChild;
          }

          n.merge(l, f.childNodes), f = k.firstChild, f.textContent = "";
        } else l.push(b.createTextNode(e));
      }

      k.textContent = "", m = 0;

      while (e = l[m++]) {
        if ((!d || -1 === n.inArray(e, d)) && (i = n.contains(e.ownerDocument, e), f = oa(k.appendChild(e), "script"), i && ma(f), c)) {
          j = 0;

          while (e = f[j++]) {
            fa.test(e.type || "") && c.push(e);
          }
        }
      }

      return k;
    },
    cleanData: function cleanData(a) {
      for (var b, c, d, e, f = n.event.special, g = 0; void 0 !== (c = a[g]); g++) {
        if (n.acceptData(c) && (e = c[L.expando], e && (b = L.cache[e]))) {
          if (b.events) for (d in b.events) {
            f[d] ? n.event.remove(c, d) : n.removeEvent(c, d, b.handle);
          }
          L.cache[e] && delete L.cache[e];
        }

        delete M.cache[c[M.expando]];
      }
    }
  }), n.fn.extend({
    text: function text(a) {
      return J(this, function (a) {
        return void 0 === a ? n.text(this) : this.empty().each(function () {
          (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && (this.textContent = a);
        });
      }, null, a, arguments.length);
    },
    append: function append() {
      return this.domManip(arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = ja(this, a);
          b.appendChild(a);
        }
      });
    },
    prepend: function prepend() {
      return this.domManip(arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = ja(this, a);
          b.insertBefore(a, b.firstChild);
        }
      });
    },
    before: function before() {
      return this.domManip(arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this);
      });
    },
    after: function after() {
      return this.domManip(arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
      });
    },
    remove: function remove(a, b) {
      for (var c, d = a ? n.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {
        b || 1 !== c.nodeType || n.cleanData(oa(c)), c.parentNode && (b && n.contains(c.ownerDocument, c) && ma(oa(c, "script")), c.parentNode.removeChild(c));
      }

      return this;
    },
    empty: function empty() {
      for (var a, b = 0; null != (a = this[b]); b++) {
        1 === a.nodeType && (n.cleanData(oa(a, !1)), a.textContent = "");
      }

      return this;
    },
    clone: function clone(a, b) {
      return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {
        return n.clone(this, a, b);
      });
    },
    html: function html(a) {
      return J(this, function (a) {
        var b = this[0] || {},
            c = 0,
            d = this.length;
        if (void 0 === a && 1 === b.nodeType) return b.innerHTML;

        if ("string" == typeof a && !da.test(a) && !ia[(ba.exec(a) || ["", ""])[1].toLowerCase()]) {
          a = a.replace(aa, "<$1></$2>");

          try {
            for (; d > c; c++) {
              b = this[c] || {}, 1 === b.nodeType && (n.cleanData(oa(b, !1)), b.innerHTML = a);
            }

            b = 0;
          } catch (e) {}
        }

        b && this.empty().append(a);
      }, null, a, arguments.length);
    },
    replaceWith: function replaceWith() {
      var a = arguments[0];
      return this.domManip(arguments, function (b) {
        a = this.parentNode, n.cleanData(oa(this)), a && a.replaceChild(b, this);
      }), a && (a.length || a.nodeType) ? this : this.remove();
    },
    detach: function detach(a) {
      return this.remove(a, !0);
    },
    domManip: function domManip(a, b) {
      a = e.apply([], a);
      var c,
          d,
          f,
          g,
          h,
          i,
          j = 0,
          l = this.length,
          m = this,
          o = l - 1,
          p = a[0],
          q = n.isFunction(p);
      if (q || l > 1 && "string" == typeof p && !k.checkClone && ea.test(p)) return this.each(function (c) {
        var d = m.eq(c);
        q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
      });

      if (l && (c = n.buildFragment(a, this[0].ownerDocument, !1, this), d = c.firstChild, 1 === c.childNodes.length && (c = d), d)) {
        for (f = n.map(oa(c, "script"), ka), g = f.length; l > j; j++) {
          h = c, j !== o && (h = n.clone(h, !0, !0), g && n.merge(f, oa(h, "script"))), b.call(this[j], h, j);
        }

        if (g) for (i = f[f.length - 1].ownerDocument, n.map(f, la), j = 0; g > j; j++) {
          h = f[j], fa.test(h.type || "") && !L.access(h, "globalEval") && n.contains(i, h) && (h.src ? n._evalUrl && n._evalUrl(h.src) : n.globalEval(h.textContent.replace(ha, "")));
        }
      }

      return this;
    }
  }), n.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (a, b) {
    n.fn[a] = function (a) {
      for (var c, d = [], e = n(a), g = e.length - 1, h = 0; g >= h; h++) {
        c = h === g ? this : this.clone(!0), n(e[h])[b](c), f.apply(d, c.get());
      }

      return this.pushStack(d);
    };
  });
  var qa,
      ra = {};

  function sa(b, c) {
    var d,
        e = n(c.createElement(b)).appendTo(c.body),
        f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : n.css(e[0], "display");
    return e.detach(), f;
  }

  function ta(a) {
    var b = l,
        c = ra[a];
    return c || (c = sa(a, b), "none" !== c && c || (qa = (qa || n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = qa[0].contentDocument, b.write(), b.close(), c = sa(a, b), qa.detach()), ra[a] = c), c;
  }

  var ua = /^margin/,
      va = new RegExp("^(" + Q + ")(?!px)[a-z%]+$", "i"),
      wa = function wa(b) {
    return b.ownerDocument.defaultView.opener ? b.ownerDocument.defaultView.getComputedStyle(b, null) : a.getComputedStyle(b, null);
  };

  function xa(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.style;
    return c = c || wa(a), c && (g = c.getPropertyValue(b) || c[b]), c && ("" !== g || n.contains(a.ownerDocument, a) || (g = n.style(a, b)), va.test(g) && ua.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
  }

  function ya(a, b) {
    return {
      get: function get() {
        return a() ? void delete this.get : (this.get = b).apply(this, arguments);
      }
    };
  }

  !function () {
    var b,
        c,
        d = l.documentElement,
        e = l.createElement("div"),
        f = l.createElement("div");

    if (f.style) {
      var _g = function _g() {
        f.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", f.innerHTML = "", d.appendChild(e);
        var g = a.getComputedStyle(f, null);
        b = "1%" !== g.top, c = "4px" === g.width, d.removeChild(e);
      };

      f.style.backgroundClip = "content-box", f.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === f.style.backgroundClip, e.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute", e.appendChild(f);
      a.getComputedStyle && n.extend(k, {
        pixelPosition: function pixelPosition() {
          return _g(), b;
        },
        boxSizingReliable: function boxSizingReliable() {
          return null == c && _g(), c;
        },
        reliableMarginRight: function reliableMarginRight() {
          var b,
              c = f.appendChild(l.createElement("div"));
          return c.style.cssText = f.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", c.style.marginRight = c.style.width = "0", f.style.width = "1px", d.appendChild(e), b = !parseFloat(a.getComputedStyle(c, null).marginRight), d.removeChild(e), f.removeChild(c), b;
        }
      });
    }
  }(), n.swap = function (a, b, c, d) {
    var e,
        f,
        g = {};

    for (f in b) {
      g[f] = a.style[f], a.style[f] = b[f];
    }

    e = c.apply(a, d || []);

    for (f in b) {
      a.style[f] = g[f];
    }

    return e;
  };
  var za = /^(none|table(?!-c[ea]).+)/,
      Aa = new RegExp("^(" + Q + ")(.*)$", "i"),
      Ba = new RegExp("^([+-])=(" + Q + ")", "i"),
      Ca = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      Da = {
    letterSpacing: "0",
    fontWeight: "400"
  },
      Ea = ["Webkit", "O", "Moz", "ms"];

  function Fa(a, b) {
    if (b in a) return b;
    var c = b[0].toUpperCase() + b.slice(1),
        d = b,
        e = Ea.length;

    while (e--) {
      if (b = Ea[e] + c, b in a) return b;
    }

    return d;
  }

  function Ga(a, b, c) {
    var d = Aa.exec(b);
    return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
  }

  function Ha(a, b, c, d, e) {
    for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) {
      "margin" === c && (g += n.css(a, c + R[f], !0, e)), d ? ("content" === c && (g -= n.css(a, "padding" + R[f], !0, e)), "margin" !== c && (g -= n.css(a, "border" + R[f] + "Width", !0, e))) : (g += n.css(a, "padding" + R[f], !0, e), "padding" !== c && (g += n.css(a, "border" + R[f] + "Width", !0, e)));
    }

    return g;
  }

  function Ia(a, b, c) {
    var d = !0,
        e = "width" === b ? a.offsetWidth : a.offsetHeight,
        f = wa(a),
        g = "border-box" === n.css(a, "boxSizing", !1, f);

    if (0 >= e || null == e) {
      if (e = xa(a, b, f), (0 > e || null == e) && (e = a.style[b]), va.test(e)) return e;
      d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;
    }

    return e + Ha(a, b, c || (g ? "border" : "content"), d, f) + "px";
  }

  function Ja(a, b) {
    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {
      d = a[g], d.style && (f[g] = L.get(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && S(d) && (f[g] = L.access(d, "olddisplay", ta(d.nodeName)))) : (e = S(d), "none" === c && e || L.set(d, "olddisplay", e ? c : n.css(d, "display"))));
    }

    for (g = 0; h > g; g++) {
      d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
    }

    return a;
  }

  n.extend({
    cssHooks: {
      opacity: {
        get: function get(a, b) {
          if (b) {
            var c = xa(a, "opacity");
            return "" === c ? "1" : c;
          }
        }
      }
    },
    cssNumber: {
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0
    },
    cssProps: {
      "float": "cssFloat"
    },
    style: function style(a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
            f,
            g,
            h = n.camelCase(b),
            i = a.style;
        return b = n.cssProps[h] || (n.cssProps[h] = Fa(i, h)), g = n.cssHooks[b] || n.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = typeof c, "string" === f && (e = Ba.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(n.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || n.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0);
      }
    },
    css: function css(a, b, c, d) {
      var e,
          f,
          g,
          h = n.camelCase(b);
      return b = n.cssProps[h] || (n.cssProps[h] = Fa(a.style, h)), g = n.cssHooks[b] || n.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = xa(a, b, d)), "normal" === e && b in Da && (e = Da[b]), "" === c || c ? (f = parseFloat(e), c === !0 || n.isNumeric(f) ? f || 0 : e) : e;
    }
  }), n.each(["height", "width"], function (a, b) {
    n.cssHooks[b] = {
      get: function get(a, c, d) {
        return c ? za.test(n.css(a, "display")) && 0 === a.offsetWidth ? n.swap(a, Ca, function () {
          return Ia(a, b, d);
        }) : Ia(a, b, d) : void 0;
      },
      set: function set(a, c, d) {
        var e = d && wa(a);
        return Ga(a, c, d ? Ha(a, b, d, "border-box" === n.css(a, "boxSizing", !1, e), e) : 0);
      }
    };
  }), n.cssHooks.marginRight = ya(k.reliableMarginRight, function (a, b) {
    return b ? n.swap(a, {
      display: "inline-block"
    }, xa, [a, "marginRight"]) : void 0;
  }), n.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (a, b) {
    n.cssHooks[a + b] = {
      expand: function expand(c) {
        for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) {
          e[a + R[d] + b] = f[d] || f[d - 2] || f[0];
        }

        return e;
      }
    }, ua.test(a) || (n.cssHooks[a + b].set = Ga);
  }), n.fn.extend({
    css: function css(a, b) {
      return J(this, function (a, b, c) {
        var d,
            e,
            f = {},
            g = 0;

        if (n.isArray(b)) {
          for (d = wa(a), e = b.length; e > g; g++) {
            f[b[g]] = n.css(a, b[g], !1, d);
          }

          return f;
        }

        return void 0 !== c ? n.style(a, b, c) : n.css(a, b);
      }, a, b, arguments.length > 1);
    },
    show: function show() {
      return Ja(this, !0);
    },
    hide: function hide() {
      return Ja(this);
    },
    toggle: function toggle(a) {
      return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
        S(this) ? n(this).show() : n(this).hide();
      });
    }
  });

  function Ka(a, b, c, d, e) {
    return new Ka.prototype.init(a, b, c, d, e);
  }

  n.Tween = Ka, Ka.prototype = {
    constructor: Ka,
    init: function init(a, b, c, d, e, f) {
      this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (n.cssNumber[c] ? "" : "px");
    },
    cur: function cur() {
      var a = Ka.propHooks[this.prop];
      return a && a.get ? a.get(this) : Ka.propHooks._default.get(this);
    },
    run: function run(a) {
      var b,
          c = Ka.propHooks[this.prop];
      return this.options.duration ? this.pos = b = n.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Ka.propHooks._default.set(this), this;
    }
  }, Ka.prototype.init.prototype = Ka.prototype, Ka.propHooks = {
    _default: {
      get: function get(a) {
        var b;
        return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = n.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop];
      },
      set: function set(a) {
        n.fx.step[a.prop] ? n.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[n.cssProps[a.prop]] || n.cssHooks[a.prop]) ? n.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
      }
    }
  }, Ka.propHooks.scrollTop = Ka.propHooks.scrollLeft = {
    set: function set(a) {
      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
    }
  }, n.easing = {
    linear: function linear(a) {
      return a;
    },
    swing: function swing(a) {
      return .5 - Math.cos(a * Math.PI) / 2;
    }
  }, n.fx = Ka.prototype.init, n.fx.step = {};
  var La,
      Ma,
      Na = /^(?:toggle|show|hide)$/,
      Oa = new RegExp("^(?:([+-])=|)(" + Q + ")([a-z%]*)$", "i"),
      Pa = /queueHooks$/,
      Qa = [Va],
      Ra = {
    "*": [function (a, b) {
      var c = this.createTween(a, b),
          d = c.cur(),
          e = Oa.exec(b),
          f = e && e[3] || (n.cssNumber[a] ? "" : "px"),
          g = (n.cssNumber[a] || "px" !== f && +d) && Oa.exec(n.css(c.elem, a)),
          h = 1,
          i = 20;

      if (g && g[3] !== f) {
        f = f || g[3], e = e || [], g = +d || 1;

        do {
          h = h || ".5", g /= h, n.style(c.elem, a, g + f);
        } while (h !== (h = c.cur() / d) && 1 !== h && --i);
      }

      return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;
    }]
  };

  function Sa() {
    return setTimeout(function () {
      La = void 0;
    }), La = n.now();
  }

  function Ta(a, b) {
    var c,
        d = 0,
        e = {
      height: a
    };

    for (b = b ? 1 : 0; 4 > d; d += 2 - b) {
      c = R[d], e["margin" + c] = e["padding" + c] = a;
    }

    return b && (e.opacity = e.width = a), e;
  }

  function Ua(a, b, c) {
    for (var d, e = (Ra[b] || []).concat(Ra["*"]), f = 0, g = e.length; g > f; f++) {
      if (d = e[f].call(c, b, a)) return d;
    }
  }

  function Va(a, b, c) {
    var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = this,
        m = {},
        o = a.style,
        p = a.nodeType && S(a),
        q = L.get(a, "fxshow");
    c.queue || (h = n._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {
      h.unqueued || i();
    }), h.unqueued++, l.always(function () {
      l.always(function () {
        h.unqueued--, n.queue(a, "fx").length || h.empty.fire();
      });
    })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = n.css(a, "display"), k = "none" === j ? L.get(a, "olddisplay") || ta(a.nodeName) : j, "inline" === k && "none" === n.css(a, "float") && (o.display = "inline-block")), c.overflow && (o.overflow = "hidden", l.always(function () {
      o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
    }));

    for (d in b) {
      if (e = b[d], Na.exec(e)) {
        if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
          if ("show" !== e || !q || void 0 === q[d]) continue;
          p = !0;
        }

        m[d] = q && q[d] || n.style(a, d);
      } else j = void 0;
    }

    if (n.isEmptyObject(m)) "inline" === ("none" === j ? ta(a.nodeName) : j) && (o.display = j);else {
      q ? "hidden" in q && (p = q.hidden) : q = L.access(a, "fxshow", {}), f && (q.hidden = !p), p ? n(a).show() : l.done(function () {
        n(a).hide();
      }), l.done(function () {
        var b;
        L.remove(a, "fxshow");

        for (b in m) {
          n.style(a, b, m[b]);
        }
      });

      for (d in m) {
        g = Ua(p ? q[d] : 0, d, l), d in q || (q[d] = g.start, p && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0));
      }
    }
  }

  function Wa(a, b) {
    var c, d, e, f, g;

    for (c in a) {
      if (d = n.camelCase(c), e = b[d], f = a[c], n.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = n.cssHooks[d], g && "expand" in g) {
        f = g.expand(f), delete a[d];

        for (c in f) {
          c in a || (a[c] = f[c], b[c] = e);
        }
      } else b[d] = e;
    }
  }

  function Xa(a, b, c) {
    var d,
        e,
        f = 0,
        g = Qa.length,
        h = n.Deferred().always(function () {
      delete i.elem;
    }),
        i = function i() {
      if (e) return !1;

      for (var b = La || Sa(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {
        j.tweens[g].run(f);
      }

      return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);
    },
        j = h.promise({
      elem: a,
      props: n.extend({}, b),
      opts: n.extend(!0, {
        specialEasing: {}
      }, c),
      originalProperties: b,
      originalOptions: c,
      startTime: La || Sa(),
      duration: c.duration,
      tweens: [],
      createTween: function createTween(b, c) {
        var d = n.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
        return j.tweens.push(d), d;
      },
      stop: function stop(b) {
        var c = 0,
            d = b ? j.tweens.length : 0;
        if (e) return this;

        for (e = !0; d > c; c++) {
          j.tweens[c].run(1);
        }

        return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;
      }
    }),
        k = j.props;

    for (Wa(k, j.opts.specialEasing); g > f; f++) {
      if (d = Qa[f].call(j, a, k, j.opts)) return d;
    }

    return n.map(k, Ua, j), n.isFunction(j.opts.start) && j.opts.start.call(a, j), n.fx.timer(n.extend(i, {
      elem: a,
      anim: j,
      queue: j.opts.queue
    })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
  }

  n.Animation = n.extend(Xa, {
    tweener: function tweener(a, b) {
      n.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");

      for (var c, d = 0, e = a.length; e > d; d++) {
        c = a[d], Ra[c] = Ra[c] || [], Ra[c].unshift(b);
      }
    },
    prefilter: function prefilter(a, b) {
      b ? Qa.unshift(a) : Qa.push(a);
    }
  }), n.speed = function (a, b, c) {
    var d = a && "object" == typeof a ? n.extend({}, a) : {
      complete: c || !c && b || n.isFunction(a) && a,
      duration: a,
      easing: c && b || b && !n.isFunction(b) && b
    };
    return d.duration = n.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in n.fx.speeds ? n.fx.speeds[d.duration] : n.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () {
      n.isFunction(d.old) && d.old.call(this), d.queue && n.dequeue(this, d.queue);
    }, d;
  }, n.fn.extend({
    fadeTo: function fadeTo(a, b, c, d) {
      return this.filter(S).css("opacity", 0).show().end().animate({
        opacity: b
      }, a, c, d);
    },
    animate: function animate(a, b, c, d) {
      var e = n.isEmptyObject(a),
          f = n.speed(b, c, d),
          g = function g() {
        var b = Xa(this, n.extend({}, a), f);
        (e || L.get(this, "finish")) && b.stop(!0);
      };

      return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
    },
    stop: function stop(a, b, c) {
      var d = function d(a) {
        var b = a.stop;
        delete a.stop, b(c);
      };

      return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
        var b = !0,
            e = null != a && a + "queueHooks",
            f = n.timers,
            g = L.get(this);
        if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {
          g[e] && g[e].stop && Pa.test(e) && d(g[e]);
        }

        for (e = f.length; e--;) {
          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
        }

        (b || !c) && n.dequeue(this, a);
      });
    },
    finish: function finish(a) {
      return a !== !1 && (a = a || "fx"), this.each(function () {
        var b,
            c = L.get(this),
            d = c[a + "queue"],
            e = c[a + "queueHooks"],
            f = n.timers,
            g = d ? d.length : 0;

        for (c.finish = !0, n.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {
          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
        }

        for (b = 0; g > b; b++) {
          d[b] && d[b].finish && d[b].finish.call(this);
        }

        delete c.finish;
      });
    }
  }), n.each(["toggle", "show", "hide"], function (a, b) {
    var c = n.fn[b];

    n.fn[b] = function (a, d, e) {
      return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(Ta(b, !0), a, d, e);
    };
  }), n.each({
    slideDown: Ta("show"),
    slideUp: Ta("hide"),
    slideToggle: Ta("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (a, b) {
    n.fn[a] = function (a, c, d) {
      return this.animate(b, a, c, d);
    };
  }), n.timers = [], n.fx.tick = function () {
    var a,
        b = 0,
        c = n.timers;

    for (La = n.now(); b < c.length; b++) {
      a = c[b], a() || c[b] !== a || c.splice(b--, 1);
    }

    c.length || n.fx.stop(), La = void 0;
  }, n.fx.timer = function (a) {
    n.timers.push(a), a() ? n.fx.start() : n.timers.pop();
  }, n.fx.interval = 13, n.fx.start = function () {
    Ma || (Ma = setInterval(n.fx.tick, n.fx.interval));
  }, n.fx.stop = function () {
    clearInterval(Ma), Ma = null;
  }, n.fx.speeds = {
    slow: 600,
    fast: 200,
    _default: 400
  }, n.fn.delay = function (a, b) {
    return a = n.fx ? n.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {
      var d = setTimeout(b, a);

      c.stop = function () {
        clearTimeout(d);
      };
    });
  }, function () {
    var a = l.createElement("input"),
        b = l.createElement("select"),
        c = b.appendChild(l.createElement("option"));
    a.type = "checkbox", k.checkOn = "" !== a.value, k.optSelected = c.selected, b.disabled = !0, k.optDisabled = !c.disabled, a = l.createElement("input"), a.value = "t", a.type = "radio", k.radioValue = "t" === a.value;
  }();
  var Ya,
      Za,
      $a = n.expr.attrHandle;
  n.fn.extend({
    attr: function attr(a, b) {
      return J(this, n.attr, a, b, arguments.length > 1);
    },
    removeAttr: function removeAttr(a) {
      return this.each(function () {
        n.removeAttr(this, a);
      });
    }
  }), n.extend({
    attr: function attr(a, b, c) {
      var d,
          e,
          f = a.nodeType;
      if (a && 3 !== f && 8 !== f && 2 !== f) return typeof a.getAttribute === U ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), d = n.attrHooks[b] || (n.expr.match.bool.test(b) ? Za : Ya)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = n.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void n.removeAttr(a, b));
    },
    removeAttr: function removeAttr(a, b) {
      var c,
          d,
          e = 0,
          f = b && b.match(E);
      if (f && 1 === a.nodeType) while (c = f[e++]) {
        d = n.propFix[c] || c, n.expr.match.bool.test(c) && (a[d] = !1), a.removeAttribute(c);
      }
    },
    attrHooks: {
      type: {
        set: function set(a, b) {
          if (!k.radioValue && "radio" === b && n.nodeName(a, "input")) {
            var c = a.value;
            return a.setAttribute("type", b), c && (a.value = c), b;
          }
        }
      }
    }
  }), Za = {
    set: function set(a, b, c) {
      return b === !1 ? n.removeAttr(a, c) : a.setAttribute(c, c), c;
    }
  }, n.each(n.expr.match.bool.source.match(/\w+/g), function (a, b) {
    var c = $a[b] || n.find.attr;

    $a[b] = function (a, b, d) {
      var e, f;
      return d || (f = $a[b], $a[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, $a[b] = f), e;
    };
  });
  var _a = /^(?:input|select|textarea|button)$/i;
  n.fn.extend({
    prop: function prop(a, b) {
      return J(this, n.prop, a, b, arguments.length > 1);
    },
    removeProp: function removeProp(a) {
      return this.each(function () {
        delete this[n.propFix[a] || a];
      });
    }
  }), n.extend({
    propFix: {
      "for": "htmlFor",
      "class": "className"
    },
    prop: function prop(a, b, c) {
      var d,
          e,
          f,
          g = a.nodeType;
      if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !n.isXMLDoc(a), f && (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
    },
    propHooks: {
      tabIndex: {
        get: function get(a) {
          return a.hasAttribute("tabindex") || _a.test(a.nodeName) || a.href ? a.tabIndex : -1;
        }
      }
    }
  }), k.optSelected || (n.propHooks.selected = {
    get: function get(a) {
      var b = a.parentNode;
      return b && b.parentNode && b.parentNode.selectedIndex, null;
    }
  }), n.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    n.propFix[this.toLowerCase()] = this;
  });
  var ab = /[\t\r\n\f]/g;
  n.fn.extend({
    addClass: function addClass(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = "string" == typeof a && a,
          i = 0,
          j = this.length;
      if (n.isFunction(a)) return this.each(function (b) {
        n(this).addClass(a.call(this, b, this.className));
      });
      if (h) for (b = (a || "").match(E) || []; j > i; i++) {
        if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ab, " ") : " ")) {
          f = 0;

          while (e = b[f++]) {
            d.indexOf(" " + e + " ") < 0 && (d += e + " ");
          }

          g = n.trim(d), c.className !== g && (c.className = g);
        }
      }
      return this;
    },
    removeClass: function removeClass(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = 0 === arguments.length || "string" == typeof a && a,
          i = 0,
          j = this.length;
      if (n.isFunction(a)) return this.each(function (b) {
        n(this).removeClass(a.call(this, b, this.className));
      });
      if (h) for (b = (a || "").match(E) || []; j > i; i++) {
        if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ab, " ") : "")) {
          f = 0;

          while (e = b[f++]) {
            while (d.indexOf(" " + e + " ") >= 0) {
              d = d.replace(" " + e + " ", " ");
            }
          }

          g = a ? n.trim(d) : "", c.className !== g && (c.className = g);
        }
      }
      return this;
    },
    toggleClass: function toggleClass(a, b) {
      var c = typeof a;
      return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(n.isFunction(a) ? function (c) {
        n(this).toggleClass(a.call(this, c, this.className, b), b);
      } : function () {
        if ("string" === c) {
          var b,
              d = 0,
              e = n(this),
              f = a.match(E) || [];

          while (b = f[d++]) {
            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
          }
        } else (c === U || "boolean" === c) && (this.className && L.set(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : L.get(this, "__className__") || "");
      });
    },
    hasClass: function hasClass(a) {
      for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) {
        if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(ab, " ").indexOf(b) >= 0) return !0;
      }

      return !1;
    }
  });
  var bb = /\r/g;
  n.fn.extend({
    val: function val(a) {
      var b,
          c,
          d,
          e = this[0];
      {
        if (arguments.length) return d = n.isFunction(a), this.each(function (c) {
          var e;
          1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : n.isArray(e) && (e = n.map(e, function (a) {
            return null == a ? "" : a + "";
          })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
        });
        if (e) return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(bb, "") : null == c ? "" : c);
      }
    }
  }), n.extend({
    valHooks: {
      option: {
        get: function get(a) {
          var b = n.find.attr(a, "value");
          return null != b ? b : n.trim(n.text(a));
        }
      },
      select: {
        get: function get(a) {
          for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {
            if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && n.nodeName(c.parentNode, "optgroup"))) {
              if (b = n(c).val(), f) return b;
              g.push(b);
            }
          }

          return g;
        },
        set: function set(a, b) {
          var c,
              d,
              e = a.options,
              f = n.makeArray(b),
              g = e.length;

          while (g--) {
            d = e[g], (d.selected = n.inArray(d.value, f) >= 0) && (c = !0);
          }

          return c || (a.selectedIndex = -1), f;
        }
      }
    }
  }), n.each(["radio", "checkbox"], function () {
    n.valHooks[this] = {
      set: function set(a, b) {
        return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) >= 0 : void 0;
      }
    }, k.checkOn || (n.valHooks[this].get = function (a) {
      return null === a.getAttribute("value") ? "on" : a.value;
    });
  }), n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {
    n.fn[b] = function (a, c) {
      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    };
  }), n.fn.extend({
    hover: function hover(a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    },
    bind: function bind(a, b, c) {
      return this.on(a, null, b, c);
    },
    unbind: function unbind(a, b) {
      return this.off(a, null, b);
    },
    delegate: function delegate(a, b, c, d) {
      return this.on(b, a, c, d);
    },
    undelegate: function undelegate(a, b, c) {
      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
    }
  });
  var cb = n.now(),
      db = /\?/;
  n.parseJSON = function (a) {
    return JSON.parse(a + "");
  }, n.parseXML = function (a) {
    var b, c;
    if (!a || "string" != typeof a) return null;

    try {
      c = new DOMParser(), b = c.parseFromString(a, "text/xml");
    } catch (d) {
      b = void 0;
    }

    return (!b || b.getElementsByTagName("parsererror").length) && n.error("Invalid XML: " + a), b;
  };
  var eb = /#.*$/,
      fb = /([?&])_=[^&]*/,
      gb = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      hb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      ib = /^(?:GET|HEAD)$/,
      jb = /^\/\//,
      kb = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
      lb = {},
      mb = {},
      nb = "*/".concat("*"),
      ob = a.location.href,
      pb = kb.exec(ob.toLowerCase()) || [];

  function qb(a) {
    return function (b, c) {
      "string" != typeof b && (c = b, b = "*");
      var d,
          e = 0,
          f = b.toLowerCase().match(E) || [];
      if (n.isFunction(c)) while (d = f[e++]) {
        "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
      }
    };
  }

  function rb(a, b, c, d) {
    var e = {},
        f = a === mb;

    function g(h) {
      var i;
      return e[h] = !0, n.each(a[h] || [], function (a, h) {
        var j = h(b, c, d);
        return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
      }), i;
    }

    return g(b.dataTypes[0]) || !e["*"] && g("*");
  }

  function sb(a, b) {
    var c,
        d,
        e = n.ajaxSettings.flatOptions || {};

    for (c in b) {
      void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
    }

    return d && n.extend(!0, a, d), a;
  }

  function tb(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.contents,
        i = a.dataTypes;

    while ("*" === i[0]) {
      i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
    }

    if (d) for (e in h) {
      if (h[e] && h[e].test(d)) {
        i.unshift(e);
        break;
      }
    }
    if (i[0] in c) f = i[0];else {
      for (e in c) {
        if (!i[0] || a.converters[e + " " + i[0]]) {
          f = e;
          break;
        }

        g || (g = e);
      }

      f = f || g;
    }
    return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
  }

  function ub(a, b, c, d) {
    var e,
        f,
        g,
        h,
        i,
        j = {},
        k = a.dataTypes.slice();
    if (k[1]) for (g in a.converters) {
      j[g.toLowerCase()] = a.converters[g];
    }
    f = k.shift();

    while (f) {
      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
        if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) {
          if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
            break;
          }
        }
        if (g !== !0) if (g && a["throws"]) b = g(b);else try {
          b = g(b);
        } catch (l) {
          return {
            state: "parsererror",
            error: g ? l : "No conversion from " + i + " to " + f
          };
        }
      }
    }

    return {
      state: "success",
      data: b
    };
  }

  n.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: ob,
      type: "GET",
      isLocal: hb.test(pb[1]),
      global: !0,
      processData: !0,
      async: !0,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": nb,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      converters: {
        "* text": String,
        "text html": !0,
        "text json": n.parseJSON,
        "text xml": n.parseXML
      },
      flatOptions: {
        url: !0,
        context: !0
      }
    },
    ajaxSetup: function ajaxSetup(a, b) {
      return b ? sb(sb(a, n.ajaxSettings), b) : sb(n.ajaxSettings, a);
    },
    ajaxPrefilter: qb(lb),
    ajaxTransport: qb(mb),
    ajax: function ajax(a, b) {
      "object" == typeof a && (b = a, a = void 0), b = b || {};
      var c,
          d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = n.ajaxSetup({}, b),
          l = k.context || k,
          m = k.context && (l.nodeType || l.jquery) ? n(l) : n.event,
          o = n.Deferred(),
          p = n.Callbacks("once memory"),
          q = k.statusCode || {},
          r = {},
          s = {},
          t = 0,
          u = "canceled",
          v = {
        readyState: 0,
        getResponseHeader: function getResponseHeader(a) {
          var b;

          if (2 === t) {
            if (!f) {
              f = {};

              while (b = gb.exec(e)) {
                f[b[1].toLowerCase()] = b[2];
              }
            }

            b = f[a.toLowerCase()];
          }

          return null == b ? null : b;
        },
        getAllResponseHeaders: function getAllResponseHeaders() {
          return 2 === t ? e : null;
        },
        setRequestHeader: function setRequestHeader(a, b) {
          var c = a.toLowerCase();
          return t || (a = s[c] = s[c] || a, r[a] = b), this;
        },
        overrideMimeType: function overrideMimeType(a) {
          return t || (k.mimeType = a), this;
        },
        statusCode: function statusCode(a) {
          var b;
          if (a) if (2 > t) for (b in a) {
            q[b] = [q[b], a[b]];
          } else v.always(a[v.status]);
          return this;
        },
        abort: function abort(a) {
          var b = a || u;
          return c && c.abort(b), x(0, b), this;
        }
      };
      if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || ob) + "").replace(eb, "").replace(jb, pb[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = n.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (h = kb.exec(k.url.toLowerCase()), k.crossDomain = !(!h || h[1] === pb[1] && h[2] === pb[2] && (h[3] || ("http:" === h[1] ? "80" : "443")) === (pb[3] || ("http:" === pb[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = n.param(k.data, k.traditional)), rb(lb, k, b, v), 2 === t) return v;
      i = n.event && k.global, i && 0 === n.active++ && n.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !ib.test(k.type), d = k.url, k.hasContent || (k.data && (d = k.url += (db.test(d) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = fb.test(d) ? d.replace(fb, "$1_=" + cb++) : d + (db.test(d) ? "&" : "?") + "_=" + cb++)), k.ifModified && (n.lastModified[d] && v.setRequestHeader("If-Modified-Since", n.lastModified[d]), n.etag[d] && v.setRequestHeader("If-None-Match", n.etag[d])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + nb + "; q=0.01" : "") : k.accepts["*"]);

      for (j in k.headers) {
        v.setRequestHeader(j, k.headers[j]);
      }

      if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();
      u = "abort";

      for (j in {
        success: 1,
        error: 1,
        complete: 1
      }) {
        v[j](k[j]);
      }

      if (c = rb(mb, k, b, v)) {
        v.readyState = 1, i && m.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {
          v.abort("timeout");
        }, k.timeout));

        try {
          t = 1, c.send(r, x);
        } catch (w) {
          if (!(2 > t)) throw w;
          x(-1, w);
        }
      } else x(-1, "No Transport");

      function x(a, b, f, h) {
        var j,
            r,
            s,
            u,
            w,
            x = b;
        2 !== t && (t = 2, g && clearTimeout(g), c = void 0, e = h || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, f && (u = tb(k, v, f)), u = ub(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (n.lastModified[d] = w), w = v.getResponseHeader("etag"), w && (n.etag[d] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, i && m.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), i && (m.trigger("ajaxComplete", [v, k]), --n.active || n.event.trigger("ajaxStop")));
      }

      return v;
    },
    getJSON: function getJSON(a, b, c) {
      return n.get(a, b, c, "json");
    },
    getScript: function getScript(a, b) {
      return n.get(a, void 0, b, "script");
    }
  }), n.each(["get", "post"], function (a, b) {
    n[b] = function (a, c, d, e) {
      return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax({
        url: a,
        type: b,
        dataType: e,
        data: c,
        success: d
      });
    };
  }), n._evalUrl = function (a) {
    return n.ajax({
      url: a,
      type: "GET",
      dataType: "script",
      async: !1,
      global: !1,
      "throws": !0
    });
  }, n.fn.extend({
    wrapAll: function wrapAll(a) {
      var b;
      return n.isFunction(a) ? this.each(function (b) {
        n(this).wrapAll(a.call(this, b));
      }) : (this[0] && (b = n(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
        var a = this;

        while (a.firstElementChild) {
          a = a.firstElementChild;
        }

        return a;
      }).append(this)), this);
    },
    wrapInner: function wrapInner(a) {
      return this.each(n.isFunction(a) ? function (b) {
        n(this).wrapInner(a.call(this, b));
      } : function () {
        var b = n(this),
            c = b.contents();
        c.length ? c.wrapAll(a) : b.append(a);
      });
    },
    wrap: function wrap(a) {
      var b = n.isFunction(a);
      return this.each(function (c) {
        n(this).wrapAll(b ? a.call(this, c) : a);
      });
    },
    unwrap: function unwrap() {
      return this.parent().each(function () {
        n.nodeName(this, "body") || n(this).replaceWith(this.childNodes);
      }).end();
    }
  }), n.expr.filters.hidden = function (a) {
    return a.offsetWidth <= 0 && a.offsetHeight <= 0;
  }, n.expr.filters.visible = function (a) {
    return !n.expr.filters.hidden(a);
  };
  var vb = /%20/g,
      wb = /\[\]$/,
      xb = /\r?\n/g,
      yb = /^(?:submit|button|image|reset|file)$/i,
      zb = /^(?:input|select|textarea|keygen)/i;

  function Ab(a, b, c, d) {
    var e;
    if (n.isArray(b)) n.each(b, function (b, e) {
      c || wb.test(a) ? d(a, e) : Ab(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d);
    });else if (c || "object" !== n.type(b)) d(a, b);else for (e in b) {
      Ab(a + "[" + e + "]", b[e], c, d);
    }
  }

  n.param = function (a, b) {
    var c,
        d = [],
        e = function e(a, b) {
      b = n.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
    };

    if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery && !n.isPlainObject(a)) n.each(a, function () {
      e(this.name, this.value);
    });else for (c in a) {
      Ab(c, a[c], b, e);
    }
    return d.join("&").replace(vb, "+");
  }, n.fn.extend({
    serialize: function serialize() {
      return n.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        var a = n.prop(this, "elements");
        return a ? n.makeArray(a) : this;
      }).filter(function () {
        var a = this.type;
        return this.name && !n(this).is(":disabled") && zb.test(this.nodeName) && !yb.test(a) && (this.checked || !T.test(a));
      }).map(function (a, b) {
        var c = n(this).val();
        return null == c ? null : n.isArray(c) ? n.map(c, function (a) {
          return {
            name: b.name,
            value: a.replace(xb, "\r\n")
          };
        }) : {
          name: b.name,
          value: c.replace(xb, "\r\n")
        };
      }).get();
    }
  }), n.ajaxSettings.xhr = function () {
    try {
      return new XMLHttpRequest();
    } catch (a) {}
  };
  var Bb = 0,
      Cb = {},
      Db = {
    0: 200,
    1223: 204
  },
      Eb = n.ajaxSettings.xhr();
  a.attachEvent && a.attachEvent("onunload", function () {
    for (var a in Cb) {
      Cb[a]();
    }
  }), k.cors = !!Eb && "withCredentials" in Eb, k.ajax = Eb = !!Eb, n.ajaxTransport(function (a) {
    var _b2;

    return k.cors || Eb && !a.crossDomain ? {
      send: function send(c, d) {
        var e,
            f = a.xhr(),
            g = ++Bb;
        if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {
          f[e] = a.xhrFields[e];
        }
        a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");

        for (e in c) {
          f.setRequestHeader(e, c[e]);
        }

        _b2 = function b(a) {
          return function () {
            _b2 && (delete Cb[g], _b2 = f.onload = f.onerror = null, "abort" === a ? f.abort() : "error" === a ? d(f.status, f.statusText) : d(Db[f.status] || f.status, f.statusText, "string" == typeof f.responseText ? {
              text: f.responseText
            } : void 0, f.getAllResponseHeaders()));
          };
        }, f.onload = _b2(), f.onerror = _b2("error"), _b2 = Cb[g] = _b2("abort");

        try {
          f.send(a.hasContent && a.data || null);
        } catch (h) {
          if (_b2) throw h;
        }
      },
      abort: function abort() {
        _b2 && _b2();
      }
    } : void 0;
  }), n.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /(?:java|ecma)script/
    },
    converters: {
      "text script": function textScript(a) {
        return n.globalEval(a), a;
      }
    }
  }), n.ajaxPrefilter("script", function (a) {
    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
  }), n.ajaxTransport("script", function (a) {
    if (a.crossDomain) {
      var b, _c;

      return {
        send: function send(d, e) {
          b = n("<script>").prop({
            async: !0,
            charset: a.scriptCharset,
            src: a.url
          }).on("load error", _c = function c(a) {
            b.remove(), _c = null, a && e("error" === a.type ? 404 : 200, a.type);
          }), l.head.appendChild(b[0]);
        },
        abort: function abort() {
          _c && _c();
        }
      };
    }
  });
  var Fb = [],
      Gb = /(=)\?(?=&|$)|\?\?/;
  n.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var a = Fb.pop() || n.expando + "_" + cb++;
      return this[a] = !0, a;
    }
  }), n.ajaxPrefilter("json jsonp", function (b, c, d) {
    var e,
        f,
        g,
        h = b.jsonp !== !1 && (Gb.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && Gb.test(b.data) && "data");
    return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Gb, "$1" + e) : b.jsonp !== !1 && (b.url += (db.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
      return g || n.error(e + " was not called"), g[0];
    }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
      g = arguments;
    }, d.always(function () {
      a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Fb.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0;
    }), "script") : void 0;
  }), n.parseHTML = function (a, b, c) {
    if (!a || "string" != typeof a) return null;
    "boolean" == typeof b && (c = b, b = !1), b = b || l;
    var d = v.exec(a),
        e = !c && [];
    return d ? [b.createElement(d[1])] : (d = n.buildFragment([a], b, e), e && e.length && n(e).remove(), n.merge([], d.childNodes));
  };
  var Hb = n.fn.load;
  n.fn.load = function (a, b, c) {
    if ("string" != typeof a && Hb) return Hb.apply(this, arguments);
    var d,
        e,
        f,
        g = this,
        h = a.indexOf(" ");
    return h >= 0 && (d = n.trim(a.slice(h)), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (e = "POST"), g.length > 0 && n.ajax({
      url: a,
      type: e,
      dataType: "html",
      data: b
    }).done(function (a) {
      f = arguments, g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a);
    }).complete(c && function (a, b) {
      g.each(c, f || [a.responseText, b, a]);
    }), this;
  }, n.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
    n.fn[b] = function (a) {
      return this.on(b, a);
    };
  }), n.expr.filters.animated = function (a) {
    return n.grep(n.timers, function (b) {
      return a === b.elem;
    }).length;
  };
  var Ib = a.document.documentElement;

  function Jb(a) {
    return n.isWindow(a) ? a : 9 === a.nodeType && a.defaultView;
  }

  n.offset = {
    setOffset: function setOffset(a, b, c) {
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = n.css(a, "position"),
          l = n(a),
          m = {};
      "static" === k && (a.style.position = "relative"), h = l.offset(), f = n.css(a, "top"), i = n.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), n.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
    }
  }, n.fn.extend({
    offset: function offset(a) {
      if (arguments.length) return void 0 === a ? this : this.each(function (b) {
        n.offset.setOffset(this, a, b);
      });
      var b,
          c,
          d = this[0],
          e = {
        top: 0,
        left: 0
      },
          f = d && d.ownerDocument;
      if (f) return b = f.documentElement, n.contains(b, d) ? (typeof d.getBoundingClientRect !== U && (e = d.getBoundingClientRect()), c = Jb(f), {
        top: e.top + c.pageYOffset - b.clientTop,
        left: e.left + c.pageXOffset - b.clientLeft
      }) : e;
    },
    position: function position() {
      if (this[0]) {
        var a,
            b,
            c = this[0],
            d = {
          top: 0,
          left: 0
        };
        return "fixed" === n.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), n.nodeName(a[0], "html") || (d = a.offset()), d.top += n.css(a[0], "borderTopWidth", !0), d.left += n.css(a[0], "borderLeftWidth", !0)), {
          top: b.top - d.top - n.css(c, "marginTop", !0),
          left: b.left - d.left - n.css(c, "marginLeft", !0)
        };
      }
    },
    offsetParent: function offsetParent() {
      return this.map(function () {
        var a = this.offsetParent || Ib;

        while (a && !n.nodeName(a, "html") && "static" === n.css(a, "position")) {
          a = a.offsetParent;
        }

        return a || Ib;
      });
    }
  }), n.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (b, c) {
    var d = "pageYOffset" === c;

    n.fn[b] = function (e) {
      return J(this, function (b, e, f) {
        var g = Jb(b);
        return void 0 === f ? g ? g[c] : b[e] : void (g ? g.scrollTo(d ? a.pageXOffset : f, d ? f : a.pageYOffset) : b[e] = f);
      }, b, e, arguments.length, null);
    };
  }), n.each(["top", "left"], function (a, b) {
    n.cssHooks[b] = ya(k.pixelPosition, function (a, c) {
      return c ? (c = xa(a, b), va.test(c) ? n(a).position()[b] + "px" : c) : void 0;
    });
  }), n.each({
    Height: "height",
    Width: "width"
  }, function (a, b) {
    n.each({
      padding: "inner" + a,
      content: b,
      "": "outer" + a
    }, function (c, d) {
      n.fn[d] = function (d, e) {
        var f = arguments.length && (c || "boolean" != typeof d),
            g = c || (d === !0 || e === !0 ? "margin" : "border");
        return J(this, function (b, c, d) {
          var e;
          return n.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? n.css(b, c, g) : n.style(b, c, d, g);
        }, b, f ? d : void 0, f, null);
      };
    });
  }), n.fn.size = function () {
    return this.length;
  }, n.fn.andSelf = n.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () {
    return n;
  });
  var Kb = a.jQuery,
      Lb = a.$;
  return n.noConflict = function (b) {
    return a.$ === n && (a.$ = Lb), b && a.jQuery === n && (a.jQuery = Kb), n;
  }, typeof b === U && (a.jQuery = a.$ = n), n;
});
"use strict";

angular.module('App.dieCostEstimationController', ['ui.router', 'ngAnimate', 'ngSanitize', 'ui.bootstrap', 'App.plugins']).config(function ($stateProvider, $urlRouterProvider, $locationProvider) {
  $stateProvider.state('dieCostEstimation', {
    url: '/dieCostEstimation',
    templateUrl: 'app/dieCostEstimation/dieCostEstimation.tpl.htm',
    controller: 'dieCostEstimationController as vm',
    params: {
      rowNo: null,
      rowDetails: null,
      projDetails: null
    }
  });
}).controller('dieCostEstimationController', function ($scope, $stateParams, $state) {
  var vm = this;
  $scope.loggedUserID = [];
  $("#fileUpload").click(function () {
    $("input[type='file']").trigger('click');
  });
  $('input[type="file"]').on('change', function (e) {
    xlsx.read(e.target, function (data) {
      var ky = _.keys(data);

      $scope.dataArr[0] = data[ky[0]];
      $scope.valCh();
      $scope.$apply();
    });
  });

  $scope.downloadXl = function () {
    console.log("dataArr=>", $scope.dataArr[0]);
    var filename = "write" + new Date().getTime() + ".xlsx";
    var wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet($scope.dataArr[0]), "DieCost", {
      compression: true
    });
    XLSX.writeFile(wb, filename);
  };

  $.cordys.ajax({
    method: "GetLoggedInUserID",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.loggedUserID = $.cordys.json.findObjects(e, "getLoggedInUserID")[0];
      $scope.username = $scope.loggedUserID.getLoggedInUserID;
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      alert("Error in loading data");
    }
  });
  $.cordys.ajax({
    method: "GetRoles",
    namespace: "http://schemas.cordys.com/1.0/ldap",
    parameters: {
      dn: "",
      depth: ""
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.roles1 = $.cordys.json.findObjects(e, "user");

      for (var i = 0; i < $scope.roles1[0].role.length; i++) {
        $scope.CordysRole = $scope.CordysRole + "," + $scope.roles1[0].role[i].description;
      }

      if ($scope.CordysRole.includes("MSIE")) {
        $scope.roles = "MSIE";
      }

      if ($scope.CordysRole.includes("Toolmaker")) {
        $scope.roles = "Toolmaker";
      }
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.status = function (d) {
    $scope.statusFlag = d;
  };

  $scope.saveStatus = function () {
    console.log("$scope.statusFlag=>", $scope.statusFlag);
    console.log("$scope.PROCESS_PARTS_SEQ=>", $scope.PROCESS_PARTS_SEQ);
    console.log("data", $scope.data);
    $scope.saveDecisionCur($scope.PROCESS_PARTS_SEQ, $scope.statusFlag, $scope.data.curr);
  };

  $scope.saveDecisionCur = function (seq, decision, curr) {
    $.cordys.ajax({
      method: "UpdateErfqProcessParts",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        "tuple": {
          "old": {
            "ERFQ_PROCESS_PARTS": {
              PROCESS_PARTS_SEQ: seq
            }
          },
          "new": {
            "ERFQ_PROCESS_PARTS": {
              DIE_COST_DECISION: decision,
              CURRENCY_UNIT: curr
            }
          }
        }
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        toastr.success("Successfully Saved");
        $state.go('erfqInbox');
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error while saving currency and decision in process parts.");
      }
    });
  };

  function GetDetailsforDieCostByPartNum(bata) {
    $.cordys.ajax({
      method: "GetDetailsforDieCostByPartNum",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        ERFQNum: $scope.data.projDetails.ERFQ_NUMBER,
        partNumber: $scope.data.rowDetails.PART_NUMBER
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        var d = $.cordys.json.findObjects(e, 'ERFQ_PROCESS_PARTS');
        $scope.ERFQ_PROCESS_PARTS = $.cordys.json.findObjects(e, 'ERFQ_PROCESS_PARTS');
        $scope.statusFlag = d[0].DIE_COST_DECISION;
        if (d[0].CURRENCY_UNIT != null && d[0].CURRENCY_UNIT != undefined) $scope.data.curr = d[0].CURRENCY_UNIT;
        $scope.data.toolmaker_name = d[0].TOOLMAKER_NAME;
        console.log("GetDetailsforDieCostByPartNum=>", d);
        GetFactorsbyProject(bata);
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        alert("Error in loading data");
      }
    });
  }

  function GetFactorsbyProject(bata) {
    $.cordys.ajax({
      method: "GetFactorsbyProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        projectCode: $scope.data.projDetails.PROJECT_CODE,
        factor: 'Currency'
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        console.log("CUS");
        var curr = $.cordys.json.findObjects(e, "ERFQFACTOR");
        $scope.curr = curr.map(function (d) {
          return {
            key: d.FACTOR,
            value: d.FACTOR_NAME
          };
        });
        GetSeqNoByErfqAndPartNumber(bata);
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  }

  function GetSeqNoByErfqAndPartNumber(bata) {
    $.cordys.ajax({
      method: "GetSeqNoByErfqAndPartNumber",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "erfqNumber": $scope.data.projDetails.ERFQ_NUMBER,
        "partNumber": $scope.data.rowDetails.PART_NUMBER
      },
      success: function success(data) {
        $scope.PROCESS_PARTS_SEQ = $.cordys.json.findObjects(data, "erfq_process_parts")[0].PROCESS_PARTS_SEQ;
        GetDieCostByPartandERFQNo(bata);
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  }

  function GetDieCostByPartandERFQNo(bata) {
    $.cordys.ajax({
      method: "GetDieCostByPartandERFQNo",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        ERFQNum: $scope.data.projDetails.ERFQ_NUMBER,
        partNumber: $scope.data.rowDetails.PART_NUMBER
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        console.log("GetDieCostByPartandERFQNo=>", $.cordys.json.findObjects(e, "ERFQ_DIE_COST_DATA"));
        var prevData = $.cordys.json.findObjects(e, "ERFQ_DIE_COST_DATA");

        if (prevData.length == 0) {
          vm.data = {
            "PROJECT_CODE": $scope.data.projDetails.PROJECT_CODE,
            "ERFQ_NUMBER": $scope.data.projDetails.ERFQ_NUMBER,
            "PART_NUMBER": $scope.data.rowDetails.PART_NUMBER,
            "PART_NAME": $scope.data.rowDetails.NOMENCLATURE,
            "OP_NUMBER": "",
            "OP_NAME": "",
            "TOOL_SIZE_L_TO_R": "",
            "TOOL_SIZE_F_TO_B": "",
            "TOOL_SIZE_SH": "",
            "TOOL_WEIGHT": "",
            "DIE_CFQTY": "",
            "SIMULATION_HR": "",
            "SIMULATION_COST": "",
            "DIE_DESIGN_HRS": "",
            "DIE_DESIGN_COST": "",
            "CNC_PROGRAM_COST": "",
            "CNC_PROGRAM_HRS": "",
            "CASTING_WEIGHT": "",
            "TOOL_STEEL_WEIGHT": "",
            "RAW_MATERIAL_INCL_CASTING": "",
            "MATERIAL_COST_STD_ITEMS": "",
            "MACHINING_HRS": "",
            "MACHINING_COST": "",
            "ASSY_FINISHING_HRS": "",
            "ASSY_FINISHING_COST": "",
            "TRYOUT_HRS": "",
            "TRYOUT_COST": "",
            "TOTAL_MANUFACTURING_COST": "",
            "FOB_CHARGE": "",
            "FOB_TOTAL": "",
            "ESTIMATED_TONNAGE": "",
            "SPM_COMMITTED": "",
            "YIELD": "",
            "EST_BANK": "",
            "NO_OF_DIES": "",
            "NO_OF_CHECKING_FIXTURE": "",
            "TOTAL_WEIGHT": "",
            "COST_TON": "",
            "TOTAL_COST": "",
            "NO_OF_PARTS": "",
            "DIE_COST_ROW_NUM": "",
            "DIE_COST_REVISION": 1,
            "DIE_COST_VERSION": "LATEST"
          };

          for (var i = 0; i < 15; i++) {
            $scope.dataArr.push(angular.copy(vm.data));
            $scope.dataArr[i].DIE_COST_ROW_NUM = i + 1;
          }

          $scope.dataArr = _.chunk($scope.dataArr, 15);
          console.log("vm.dataArr=>", $scope.dataArr);
          $scope.$apply();
        } else {
          var prev = _.max(_.map(prevData, 'DIE_COST_REVISION'));

          vm.data = {
            "PROJECT_CODE": $scope.data.projDetails.PROJECT_CODE,
            "ERFQ_NUMBER": $scope.data.projDetails.ERFQ_NUMBER,
            "PART_NUMBER": $scope.data.rowDetails.PART_NUMBER,
            "PART_NAME": $scope.data.rowDetails.NOMENCLATURE,
            "OP_NUMBER": "",
            "OP_NAME": "",
            "TOOL_SIZE_L_TO_R": "",
            "TOOL_SIZE_F_TO_B": "",
            "TOOL_SIZE_SH": "",
            "TOOL_WEIGHT": "",
            "DIE_CFQTY": "",
            "SIMULATION_HR": "",
            "SIMULATION_COST": "",
            "DIE_DESIGN_HRS": "",
            "DIE_DESIGN_COST": "",
            "CNC_PROGRAM_COST": "",
            "CNC_PROGRAM_HRS": "",
            "CASTING_WEIGHT": "",
            "TOOL_STEEL_WEIGHT": "",
            "RAW_MATERIAL_INCL_CASTING": "",
            "MATERIAL_COST_STD_ITEMS": "",
            "MACHINING_HRS": "",
            "MACHINING_COST": "",
            "ASSY_FINISHING_HRS": "",
            "ASSY_FINISHING_COST": "",
            "TRYOUT_HRS": "",
            "TRYOUT_COST": "",
            "TOTAL_MANUFACTURING_COST": "",
            "FOB_CHARGE": "",
            "FOB_TOTAL": "",
            "ESTIMATED_TONNAGE": "",
            "SPM_COMMITTED": "",
            "YIELD": "",
            "EST_BANK": "",
            "NO_OF_DIES": "",
            "NO_OF_CHECKING_FIXTURE": "",
            "TOTAL_WEIGHT": "",
            "COST_TON": "",
            "TOTAL_COST": "",
            "NO_OF_PARTS": "",
            "DIE_COST_ROW_NUM": "",
            "DIE_COST_REVISION": Number(prev) + 1,
            "DIE_COST_VERSION": "LATEST"
          };
          if ($scope.roles != "MSIE") if ($scope.ERFQ_PROCESS_PARTS[0].DIE_COST_STATUS != "saved") {
            for (var i = 0; i < 15; i++) {
              vm.data.DIE_COST_ROW_NUM = i + 1;
              var t = prevData.push(angular.copy(vm.data));
            }
          }
          $scope.dataArr = [];

          var tt = _.groupBy(_.sortBy(prevData, [function (o) {
            return Number(o.DIE_COST_REVISION);
          }]), "DIE_COST_REVISION");

          for (var d in tt) {
            if (tt[d].length == 14) tt[d].push(vm.data);
            $scope.dataArr.push(tt[d].sort(function (o1, o2) {
              if (Number(o1.DIE_COST_ROW_NUM) > Number(o2.DIE_COST_ROW_NUM)) return 1;else return -1;
            }));
          }

          console.log("vm dataArr before=>", $scope.dataArr);
          $scope.dataArr = $scope.dataArr.reverse();
          $scope.$apply();
          console.log("vm dataArr after=>", $scope.dataArr);
        }

        bata(new Date().getTime());
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        alert("Error in loading data");
      }
    });
  }

  if ($stateParams.rowDetails != null && $stateParams.rowDetails != undefined && $stateParams.rowDetails != null && $stateParams.rowDetails != undefined && $stateParams.projDetails != null && $stateParams.projDetails != undefined && $stateParams.projDetails != null && $stateParams.projDetails != undefined && $stateParams.rowNo != null && $stateParams.rowNo != undefined && $stateParams.rowNo != null && $stateParams.rowNo != undefined) {
    $scope.data = angular.copy($stateParams);
    $scope.data.curr = "INR";
    $scope.data.Date = new Date();
    $scope.dataArr = [];
    console.log("$scope.data=>", $scope.data);
    console.log("Start DONE!...", new Date().getTime());
    GetDetailsforDieCostByPartNum(function (t) {
      console.log("End DONE!...", t);
    });
  } else {
    console.log("alert");
  }

  $scope.valCh = function () {
    $scope.dataArr[0][7].TOOL_WEIGHT = 0;
    $scope.dataArr[0][7].DIE_CFQTY = 0;
    $scope.dataArr[0][7].SIMULATION_HR = 0;
    $scope.dataArr[0][7].SIMULATION_COST = 0;
    $scope.dataArr[0][7].DIE_DESIGN_HRS = 0;
    $scope.dataArr[0][7].DIE_DESIGN_COST = 0;
    $scope.dataArr[0][7].CNC_PROGRAM_HRS = 0;
    $scope.dataArr[0][7].CNC_PROGRAM_COST = 0;
    $scope.dataArr[0][7].CASTING_WEIGHT = 0;
    $scope.dataArr[0][7].TOOL_STEEL_WEIGHT = 0;
    $scope.dataArr[0][7].RAW_MATERIAL_INCL_CASTING = 0;
    $scope.dataArr[0][7].MATERIAL_COST_STD_ITEMS = 0;
    $scope.dataArr[0][7].MACHINING_HRS = 0;
    $scope.dataArr[0][7].MACHINING_COST = 0;
    $scope.dataArr[0][7].ASSY_FINISHING_HRS = 0;
    $scope.dataArr[0][7].ASSY_FINISHING_COST = 0;
    $scope.dataArr[0][7].TRYOUT_HRS = 0;
    $scope.dataArr[0][7].TRYOUT_COST = 0;
    $scope.dataArr[0][7].TOTAL_MANUFACTURING_COST = 0;
    $scope.dataArr[0][7].FOB_CHARGE = 0;
    $scope.dataArr[0][7].FOB_TOTAL = 0;
    $scope.dataArr[0][14].FOB_TOTAL = 0;

    for (var i = 0; i <= 6; i++) {
      var rowCnt = 0;

      if ($scope.dataArr[0][i].TOOL_WEIGHT != undefined && $scope.dataArr[0][i].TOOL_WEIGHT != null && $scope.dataArr[0][i].TOOL_WEIGHT != "") {
        $scope.dataArr[0][7].TOOL_WEIGHT += Number($scope.dataArr[0][i].TOOL_WEIGHT);
      }

      if ($scope.dataArr[0][i].DIE_CFQTY != undefined && $scope.dataArr[0][i].DIE_CFQTY != null && $scope.dataArr[0][i].DIE_CFQTY != "") {
        $scope.dataArr[0][7].DIE_CFQTY += Number($scope.dataArr[0][i].DIE_CFQTY);
      }

      if ($scope.dataArr[0][i].SIMULATION_HR != undefined && $scope.dataArr[0][i].SIMULATION_HR != null && $scope.dataArr[0][i].SIMULATION_HR != "") {
        $scope.dataArr[0][7].SIMULATION_HR += Number($scope.dataArr[0][i].SIMULATION_HR);
      }

      if ($scope.dataArr[0][i].SIMULATION_COST != undefined && $scope.dataArr[0][i].SIMULATION_COST != null && $scope.dataArr[0][i].SIMULATION_COST != "") {
        $scope.dataArr[0][7].SIMULATION_COST += Number($scope.dataArr[0][i].SIMULATION_COST);
        rowCnt += Number($scope.dataArr[0][i].SIMULATION_COST);
      }

      if ($scope.dataArr[0][i].DIE_DESIGN_HRS != undefined && $scope.dataArr[0][i].DIE_DESIGN_HRS != null && $scope.dataArr[0][i].DIE_DESIGN_HRS != "") {
        $scope.dataArr[0][7].DIE_DESIGN_HRS += Number($scope.dataArr[0][i].DIE_DESIGN_HRS);
      }

      if ($scope.dataArr[0][i].DIE_DESIGN_COST != undefined && $scope.dataArr[0][i].DIE_DESIGN_COST != null && $scope.dataArr[0][i].DIE_DESIGN_COST != "") {
        $scope.dataArr[0][7].DIE_DESIGN_COST += Number($scope.dataArr[0][i].DIE_DESIGN_COST);
        rowCnt += Number($scope.dataArr[0][i].DIE_DESIGN_COST);
      }

      if ($scope.dataArr[0][i].CNC_PROGRAM_HRS != undefined && $scope.dataArr[0][i].CNC_PROGRAM_HRS != null && $scope.dataArr[0][i].CNC_PROGRAM_HRS != "") {
        $scope.dataArr[0][7].CNC_PROGRAM_HRS += Number($scope.dataArr[0][i].CNC_PROGRAM_HRS);
      }

      if ($scope.dataArr[0][i].CNC_PROGRAM_COST != undefined && $scope.dataArr[0][i].CNC_PROGRAM_COST != null && $scope.dataArr[0][i].CNC_PROGRAM_COST != "") {
        $scope.dataArr[0][7].CNC_PROGRAM_COST += Number($scope.dataArr[0][i].CNC_PROGRAM_COST);
        rowCnt += Number($scope.dataArr[0][i].CNC_PROGRAM_COST);
      }

      if ($scope.dataArr[0][i].CASTING_WEIGHT != undefined && $scope.dataArr[0][i].CASTING_WEIGHT != null && $scope.dataArr[0][i].CASTING_WEIGHT != "") {
        $scope.dataArr[0][7].CASTING_WEIGHT += Number($scope.dataArr[0][i].CASTING_WEIGHT);
      }

      if ($scope.dataArr[0][i].TOOL_STEEL_WEIGHT != undefined && $scope.dataArr[0][i].TOOL_STEEL_WEIGHT != null && $scope.dataArr[0][i].TOOL_STEEL_WEIGHT != "") {
        $scope.dataArr[0][7].TOOL_STEEL_WEIGHT += Number($scope.dataArr[0][i].TOOL_STEEL_WEIGHT);
      }

      if ($scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING != undefined && $scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING != null && $scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING != "") {
        $scope.dataArr[0][7].RAW_MATERIAL_INCL_CASTING += Number($scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING);
        rowCnt += Number($scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING);
      }

      if ($scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS != undefined && $scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS != null && $scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS != "") {
        $scope.dataArr[0][7].MATERIAL_COST_STD_ITEMS += Number($scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS);
        rowCnt += Number($scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS);
      }

      if ($scope.dataArr[0][i].MACHINING_HRS != undefined && $scope.dataArr[0][i].MACHINING_HRS != null && $scope.dataArr[0][i].MACHINING_HRS != "") {
        $scope.dataArr[0][7].MACHINING_HRS += Number($scope.dataArr[0][i].MACHINING_HRS);
      }

      if ($scope.dataArr[0][i].MACHINING_COST != undefined && $scope.dataArr[0][i].MACHINING_COST != null && $scope.dataArr[0][i].MACHINING_COST != "") {
        $scope.dataArr[0][7].MACHINING_COST += Number($scope.dataArr[0][i].MACHINING_COST);
        rowCnt += Number($scope.dataArr[0][i].MACHINING_COST);
      }

      if ($scope.dataArr[0][i].ASSY_FINISHING_HRS != undefined && $scope.dataArr[0][i].ASSY_FINISHING_HRS != null && $scope.dataArr[0][i].ASSY_FINISHING_HRS != "") {
        $scope.dataArr[0][7].ASSY_FINISHING_HRS += Number($scope.dataArr[0][i].ASSY_FINISHING_HRS);
      }

      if ($scope.dataArr[0][i].ASSY_FINISHING_COST != undefined && $scope.dataArr[0][i].ASSY_FINISHING_COST != null && $scope.dataArr[0][i].ASSY_FINISHING_COST != "") {
        $scope.dataArr[0][7].ASSY_FINISHING_COST += Number($scope.dataArr[0][i].ASSY_FINISHING_COST);
        rowCnt += Number($scope.dataArr[0][i].ASSY_FINISHING_COST);
      }

      if ($scope.dataArr[0][i].TRYOUT_HRS != undefined && $scope.dataArr[0][i].TRYOUT_HRS != null && $scope.dataArr[0][i].TRYOUT_HRS != "") {
        $scope.dataArr[0][7].TRYOUT_HRS += Number($scope.dataArr[0][i].TRYOUT_HRS);
      }

      if ($scope.dataArr[0][i].TRYOUT_COST != undefined && $scope.dataArr[0][i].TRYOUT_COST != null && $scope.dataArr[0][i].TRYOUT_COST != "") {
        $scope.dataArr[0][7].TRYOUT_COST += Number($scope.dataArr[0][i].TRYOUT_COST);
        rowCnt += Number($scope.dataArr[0][i].TRYOUT_COST);
      }

      $scope.dataArr[0][i].TOTAL_MANUFACTURING_COST = rowCnt;
      $scope.dataArr[0][i].FOB_TOTAL = 0;

      if ($scope.dataArr[0][i].TOTAL_MANUFACTURING_COST != undefined && $scope.dataArr[0][i].TOTAL_MANUFACTURING_COST != null && $scope.dataArr[0][i].TOTAL_MANUFACTURING_COST != "") {
        $scope.dataArr[0][7].TOTAL_MANUFACTURING_COST += Number($scope.dataArr[0][i].TOTAL_MANUFACTURING_COST);
        $scope.dataArr[0][i].FOB_TOTAL += Number($scope.dataArr[0][i].TOTAL_MANUFACTURING_COST);
      }

      if ($scope.dataArr[0][i].FOB_CHARGE != undefined && $scope.dataArr[0][i].FOB_CHARGE != null && $scope.dataArr[0][i].FOB_CHARGE != "") {
        $scope.dataArr[0][7].FOB_CHARGE += Number($scope.dataArr[0][i].FOB_CHARGE);
        $scope.dataArr[0][i].FOB_TOTAL += Number($scope.dataArr[0][i].FOB_CHARGE);
      }

      if ($scope.dataArr[0][i].FOB_TOTAL != undefined && $scope.dataArr[0][i].FOB_TOTAL != null && $scope.dataArr[0][i].FOB_TOTAL != "") {
        $scope.dataArr[0][7].FOB_TOTAL += Number($scope.dataArr[0][i].FOB_TOTAL);
      }
    }

    $scope.dataArr[0][14].FOB_CHARGE = 0;
    $scope.dataArr[0][14].TOTAL_MANUFACTURING_COST = 0;
    $scope.dataArr[0][14].FOB_CHARGE = 0;

    for (var j = 7; j <= 13; j++) {
      $scope.dataArr[0][j].FOB_TOTAL = (Number($scope.dataArr[0][j].TOTAL_MANUFACTURING_COST) == NaN ? Number(0) : Number($scope.dataArr[0][j].TOTAL_MANUFACTURING_COST)) + (Number($scope.dataArr[0][j].FOB_CHARGE) == NaN ? Number(0) : Number($scope.dataArr[0][j].FOB_CHARGE));
      $scope.dataArr[0][14].TOTAL_MANUFACTURING_COST += Number($scope.dataArr[0][j].TOTAL_MANUFACTURING_COST) == NaN ? Number(0) : Number($scope.dataArr[0][j].TOTAL_MANUFACTURING_COST);
      $scope.dataArr[0][14].FOB_CHARGE += Number($scope.dataArr[0][j].FOB_CHARGE) == NaN ? Number(0) : Number($scope.dataArr[0][j].FOB_CHARGE);
      $scope.dataArr[0][14].FOB_TOTAL += Number($scope.dataArr[0][j].FOB_TOTAL) == NaN ? Number(0) : Number($scope.dataArr[0][j].FOB_TOTAL);
    }

    $scope.dataArr[0][0].NO_OF_DIES = 0;
    if ($scope.dataArr[0][7].DIE_CFQTY != undefined && $scope.dataArr[0][7].DIE_CFQTY != null && $scope.dataArr[0][7].DIE_CFQTY != "") $scope.dataArr[0][0].NO_OF_DIES = $scope.dataArr[0][7].DIE_CFQTY;
    $scope.dataArr[0][0].NO_OF_CHECKING_FIXTURE = 0;
    if ($scope.dataArr[0][9].DIE_CFQTY != undefined && $scope.dataArr[0][9].DIE_CFQTY != null && $scope.dataArr[0][9].DIE_CFQTY != "") $scope.dataArr[0][0].NO_OF_CHECKING_FIXTURE = Number($scope.dataArr[0][9].DIE_CFQTY);
    $scope.dataArr[0][0].TOTAL_WEIGHT = 0;
    if ($scope.dataArr[0][7].TOOL_WEIGHT != undefined && $scope.dataArr[0][7].TOOL_WEIGHT != null && $scope.dataArr[0][7].TOOL_WEIGHT != "") $scope.dataArr[0][0].TOTAL_WEIGHT = Number($scope.dataArr[0][7].TOOL_WEIGHT);
    $scope.dataArr[0][0].COST_TON = 0;
    if ($scope.dataArr[0][14].FOB_TOTAL != undefined && $scope.dataArr[0][14].FOB_TOTAL != null && $scope.dataArr[0][14].FOB_TOTAL != "" && $scope.dataArr[0][7].TOOL_WEIGHT != undefined && $scope.dataArr[0][7].TOOL_WEIGHT != null && $scope.dataArr[0][7].TOOL_WEIGHT != "") $scope.dataArr[0][0].COST_TON = Math.floor(Number($scope.dataArr[0][14].FOB_TOTAL) / Number($scope.dataArr[0][7].TOOL_WEIGHT));
    $scope.dataArr[0][0].TOTAL_COST = 0;
    if ($scope.dataArr[0][14].FOB_TOTAL != undefined && $scope.dataArr[0][14].FOB_TOTAL != null && $scope.dataArr[0][14].FOB_TOTAL != "") $scope.dataArr[0][0].TOTAL_COST = Number($scope.dataArr[0][14].FOB_TOTAL);
  };

  function UpdateErfqDieCostData(data, status) {
    if (status === void 0) {
      status = "LATEST";
    }

    if (status == "OLD") {
      data = _.map(data, function (d) {
        d.DIE_COST_VERSION = "OLD";
        return d;
      });
    }

    var qr = _.map(data, function (d) {
      var t = {};

      if (d.DIE_COST_SEQ != undefined) {
        t.old = {
          "ERFQ_DIE_COST_DATA": {
            "DIE_COST_SEQ": d.DIE_COST_SEQ
          }
        };
      }

      t["new"] = {
        "ERFQ_DIE_COST_DATA": d
      };
      return t;
    });

    $.cordys.ajax({
      method: "UpdateErfqDieCostData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        tuple: qr
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        toastr.info("Quote submitted sucessfully");
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        alert("Error in loading data");
      }
    });
  }

  $scope.save = function () {
    if ($scope.data.curr != "" && $scope.data.curr != undefined) {
      console.log("$scope.ERFQ_PROCESS_PARTS=>", $scope.ERFQ_PROCESS_PARTS);
      var dd = {
        old: {
          "ERFQ_PROCESS_PARTS": {
            PROCESS_PARTS_SEQ: $scope.ERFQ_PROCESS_PARTS[0].PROCESS_PARTS_SEQ
          }
        },
        "new": {
          "ERFQ_PROCESS_PARTS": {
            CURRENCY_UNIT: $scope.data.curr,
            DIE_COST_REMARK: $scope.ERFQ_PROCESS_PARTS[0].DIE_COST_REMARK + $scope.roles + ":" + ($scope.data.remark == undefined ? "" : $scope.data.remark) + "\n",
            DIE_COST_STATUS: "saved"
          }
        }
      };
      $.cordys.ajax({
        method: "UpdateErfqProcessParts",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        parameters: {
          tuple: dd
        },
        dataType: "* json",
        async: false,
        success: function success(e) {
          console.log("UpdateErfqProcessParts saved successfully");
          UpdateErfqDieCostData($scope.dataArr[0]);

          if ($scope.dataArr.length > 1) {
            for (var i = 1; i < $scope.dataArr.length; i++) {
              UpdateErfqDieCostData($scope.dataArr[i], 'OLD');
            }
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {}
      });
      console.log("vm dataArr=>", $scope.dataArr);
    } else {
      toastr.info("Please select currency unit.");
    }
  };
});
"use strict";

angular.module('App.dieCostEstimationController', ['ui.router', 'ngAnimate', 'ngSanitize', 'ui.bootstrap', 'App.plugins']).config(function ($stateProvider, $urlRouterProvider, $locationProvider) {
  $stateProvider.state('dieCostEstimation', {
    url: '/dieCostEstimation',
    templateUrl: 'app/dieCostEstimation/dieCostEstimation.tpl.htm',
    controller: 'dieCostEstimationController as vm',
    params: {
      rowNo: null,
      rowDetails: null,
      projDetails: null
    }
  });
}).controller('dieCostEstimationController', function ($scope, $stateParams, $state) {
  var vm = this;
  $scope.loggedUserID = [];
  $("#fileUpload").click(function () {
    $("input[type='file']").trigger('click');
  });
  $('input[type="file"]').on('change', function (e) {
    xlsx.read(e.target, function (data) {
      var ky = _.keys(data);

      $scope.dataArr[0] = data[ky[0]];
      $scope.valCh();
    });
  });

  $scope.downloadXl = function () {
    console.log("dataArr=>", $scope.dataArr[0]);
    var filename = "write" + new Date().getTime() + ".xlsx";
    var wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet($scope.dataArr[0]), "DieCost", {
      compression: true
    });
    XLSX.writeFile(wb, filename);
  };

  $.cordys.ajax({
    method: "GetLoggedInUserID",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.loggedUserID = $.cordys.json.findObjects(e, "getLoggedInUserID")[0];
      $scope.username = $scope.loggedUserID.getLoggedInUserID;
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      alert("Error in loading data");
    }
  });
  $.cordys.ajax({
    method: "GetRoles",
    namespace: "http://schemas.cordys.com/1.0/ldap",
    parameters: {
      dn: "",
      depth: ""
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.roles1 = $.cordys.json.findObjects(e, "user");

      for (var i = 0; i < $scope.roles1[0].role.length; i++) {
        $scope.CordysRole = $scope.CordysRole + "," + $scope.roles1[0].role[i].description;
      }

      if ($scope.CordysRole.includes("MSIE")) {
        $scope.roles = "MSIE";
      }

      if ($scope.CordysRole.includes("Toolmaker")) {
        $scope.roles = "Toolmaker";
      }
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.status = function (d) {
    $scope.statusFlag = d;
  };

  $scope.saveStatus = function () {
    console.log("$scope.statusFlag=>", $scope.statusFlag);
    console.log("$scope.PROCESS_PARTS_SEQ=>", $scope.PROCESS_PARTS_SEQ);
    console.log("data", $scope.data);
    $scope.saveDecisionCur($scope.PROCESS_PARTS_SEQ, $scope.statusFlag, $scope.data.curr);
  };

  $scope.saveDecisionCur = function (seq, decision, curr) {
    $.cordys.ajax({
      method: "UpdateErfqProcessParts",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        "tuple": {
          "old": {
            "ERFQ_PROCESS_PARTS": {
              PROCESS_PARTS_SEQ: seq
            }
          },
          "new": {
            "ERFQ_PROCESS_PARTS": {
              DIE_COST_DECISION: decision,
              CURRENCY_UNIT: curr
            }
          }
        }
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        toastr.success("Successfully Saved");
        $state.go('erfqInbox');
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error while saving currency and decision in process parts.");
      }
    });
  };

  function GetDetailsforDieCostByPartNum(bata) {
    $.cordys.ajax({
      method: "GetDetailsforDieCostByPartNum",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        ERFQNum: $scope.data.projDetails.ERFQ_NUMBER,
        partNumber: $scope.data.rowDetails.PART_NUMBER
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        var d = $.cordys.json.findObjects(e, 'ERFQ_PROCESS_PARTS');
        $scope.ERFQ_PROCESS_PARTS = $.cordys.json.findObjects(e, 'ERFQ_PROCESS_PARTS');
        $scope.statusFlag = d[0].DIE_COST_DECISION;
        if (d[0].CURRENCY_UNIT != null && d[0].CURRENCY_UNIT != undefined) $scope.data.curr = d[0].CURRENCY_UNIT;
        $scope.data.toolmaker_name = d[0].TOOLMAKER_NAME;
        console.log("GetDetailsforDieCostByPartNum=>", d);
        GetFactorsbyProject(bata);
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        alert("Error in loading data");
      }
    });
  }

  function GetFactorsbyProject(bata) {
    $.cordys.ajax({
      method: "GetFactorsbyProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        projectCode: $scope.data.projDetails.PROJECT_CODE,
        factor: 'Currency'
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        console.log("CUS");
        var curr = $.cordys.json.findObjects(e, "ERFQFACTOR");
        $scope.curr = curr.map(function (d) {
          return {
            key: d.FACTOR,
            value: d.FACTOR_NAME
          };
        });
        GetSeqNoByErfqAndPartNumber(bata);
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  }

  function GetSeqNoByErfqAndPartNumber(bata) {
    $.cordys.ajax({
      method: "GetSeqNoByErfqAndPartNumber",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "erfqNumber": $scope.data.projDetails.ERFQ_NUMBER,
        "partNumber": $scope.data.rowDetails.PART_NUMBER
      },
      success: function success(data) {
        $scope.PROCESS_PARTS_SEQ = $.cordys.json.findObjects(data, "erfq_process_parts")[0].PROCESS_PARTS_SEQ;
        GetDieCostByPartandERFQNo(bata);
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  }

  function GetDieCostByPartandERFQNo(bata) {
    $.cordys.ajax({
      method: "GetDieCostByPartandERFQNo",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        ERFQNum: $scope.data.projDetails.ERFQ_NUMBER,
        partNumber: $scope.data.rowDetails.PART_NUMBER
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        console.log("GetDieCostByPartandERFQNo=>", $.cordys.json.findObjects(e, "ERFQ_DIE_COST_DATA"));
        var prevData = $.cordys.json.findObjects(e, "ERFQ_DIE_COST_DATA");

        if (prevData.length == 0) {
          vm.data = {
            "PROJECT_CODE": $scope.data.projDetails.PROJECT_CODE,
            "ERFQ_NUMBER": $scope.data.projDetails.ERFQ_NUMBER,
            "PART_NUMBER": $scope.data.rowDetails.PART_NUMBER,
            "PART_NAME": $scope.data.rowDetails.NOMENCLATURE,
            "OP_NUMBER": "",
            "OP_NAME": "",
            "TOOL_SIZE_L_TO_R": "",
            "TOOL_SIZE_F_TO_B": "",
            "TOOL_SIZE_SH": "",
            "TOOL_WEIGHT": "",
            "DIE_CFQTY": "",
            "SIMULATION_HR": "",
            "SIMULATION_COST": "",
            "DIE_DESIGN_HRS": "",
            "DIE_DESIGN_COST": "",
            "CNC_PROGRAM_COST": "",
            "CNC_PROGRAM_HRS": "",
            "CASTING_WEIGHT": "",
            "TOOL_STEEL_WEIGHT": "",
            "RAW_MATERIAL_INCL_CASTING": "",
            "MATERIAL_COST_STD_ITEMS": "",
            "MACHINING_HRS": "",
            "MACHINING_COST": "",
            "ASSY_FINISHING_HRS": "",
            "ASSY_FINISHING_COST": "",
            "TRYOUT_HRS": "",
            "TRYOUT_COST": "",
            "TOTAL_MANUFACTURING_COST": "",
            "FOB_CHARGE": "",
            "FOB_TOTAL": "",
            "ESTIMATED_TONNAGE": "",
            "SPM_COMMITTED": "",
            "YIELD": "",
            "EST_BANK": "",
            "NO_OF_DIES": "",
            "NO_OF_CHECKING_FIXTURE": "",
            "TOTAL_WEIGHT": "",
            "COST_TON": "",
            "TOTAL_COST": "",
            "NO_OF_PARTS": "",
            "DIE_COST_ROW_NUM": "",
            "DIE_COST_REVISION": 1,
            "DIE_COST_VERSION": "Latest"
          };

          for (var i = 0; i < 15; i++) {
            $scope.dataArr.push(angular.copy(vm.data));
            $scope.dataArr[i].DIE_COST_ROW_NUM = i + 1;
          }

          $scope.dataArr = _.chunk($scope.dataArr, 15);
          console.log("vm.dataArr=>", $scope.dataArr);
        } else {
          var prev = _.max(_.map(prevData, 'DIE_COST_REVISION'));

          vm.data = {
            "PROJECT_CODE": $scope.data.projDetails.PROJECT_CODE,
            "ERFQ_NUMBER": $scope.data.projDetails.ERFQ_NUMBER,
            "PART_NUMBER": $scope.data.rowDetails.PART_NUMBER,
            "PART_NAME": $scope.data.rowDetails.NOMENCLATURE,
            "OP_NUMBER": "",
            "OP_NAME": "",
            "TOOL_SIZE_L_TO_R": "",
            "TOOL_SIZE_F_TO_B": "",
            "TOOL_SIZE_SH": "",
            "TOOL_WEIGHT": "",
            "DIE_CFQTY": "",
            "SIMULATION_HR": "",
            "SIMULATION_COST": "",
            "DIE_DESIGN_HRS": "",
            "DIE_DESIGN_COST": "",
            "CNC_PROGRAM_COST": "",
            "CNC_PROGRAM_HRS": "",
            "CASTING_WEIGHT": "",
            "TOOL_STEEL_WEIGHT": "",
            "RAW_MATERIAL_INCL_CASTING": "",
            "MATERIAL_COST_STD_ITEMS": "",
            "MACHINING_HRS": "",
            "MACHINING_COST": "",
            "ASSY_FINISHING_HRS": "",
            "ASSY_FINISHING_COST": "",
            "TRYOUT_HRS": "",
            "TRYOUT_COST": "",
            "TOTAL_MANUFACTURING_COST": "",
            "FOB_CHARGE": "",
            "FOB_TOTAL": "",
            "ESTIMATED_TONNAGE": "",
            "SPM_COMMITTED": "",
            "YIELD": "",
            "EST_BANK": "",
            "NO_OF_DIES": "",
            "NO_OF_CHECKING_FIXTURE": "",
            "TOTAL_WEIGHT": "",
            "COST_TON": "",
            "TOTAL_COST": "",
            "NO_OF_PARTS": "",
            "DIE_COST_ROW_NUM": "",
            "DIE_COST_REVISION": Number(prev) + 1
          };
          if ($scope.roles != "MSIE") if ($scope.ERFQ_PROCESS_PARTS[0].DIE_COST_STATUS != "saved") {
            for (var i = 0; i < 15; i++) {
              vm.data.DIE_COST_ROW_NUM = i + 1;
              var t = prevData.push(angular.copy(vm.data));
            }
          }
          $scope.dataArr = [];

          var tt = _.groupBy(_.sortBy(prevData, [function (o) {
            return Number(o.DIE_COST_REVISION);
          }]), "DIE_COST_REVISION");

          for (var d in tt) {
            if (tt[d].length == 14) tt[d].push(vm.data);
            $scope.dataArr.push(tt[d].sort(function (o1, o2) {
              if (Number(o1.DIE_COST_ROW_NUM) > Number(o2.DIE_COST_ROW_NUM)) return 1;else return -1;
            }));
          }

          console.log("vm dataArr before=>", $scope.dataArr);
          $scope.dataArr = $scope.dataArr.reverse();
          $scope.$apply();
          console.log("vm dataArr after=>", $scope.dataArr);
        }

        bata(new Date().getTime());
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        alert("Error in loading data");
      }
    });
  }

  if ($stateParams.rowDetails != null && $stateParams.rowDetails != undefined && $stateParams.rowDetails != null && $stateParams.rowDetails != undefined && $stateParams.projDetails != null && $stateParams.projDetails != undefined && $stateParams.projDetails != null && $stateParams.projDetails != undefined && $stateParams.rowNo != null && $stateParams.rowNo != undefined && $stateParams.rowNo != null && $stateParams.rowNo != undefined) {
    $scope.data = angular.copy($stateParams);
    $scope.data.curr = "INR";
    $scope.data.Date = new Date();
    $scope.dataArr = [];
    console.log("$scope.data=>", $scope.data);
    console.log("Start DONE!...", new Date().getTime());
    GetDetailsforDieCostByPartNum(function (t) {
      console.log("End DONE!...", t);
    });
  } else {
    console.log("alert");
  }

  $scope.valCh = function () {
    $scope.dataArr[0][7].TOOL_WEIGHT = 0;
    $scope.dataArr[0][7].DIE_CFQTY = 0;
    $scope.dataArr[0][7].SIMULATION_HR = 0;
    $scope.dataArr[0][7].SIMULATION_COST = 0;
    $scope.dataArr[0][7].DIE_DESIGN_HRS = 0;
    $scope.dataArr[0][7].DIE_DESIGN_COST = 0;
    $scope.dataArr[0][7].CNC_PROGRAM_HRS = 0;
    $scope.dataArr[0][7].CNC_PROGRAM_COST = 0;
    $scope.dataArr[0][7].CASTING_WEIGHT = 0;
    $scope.dataArr[0][7].TOOL_STEEL_WEIGHT = 0;
    $scope.dataArr[0][7].RAW_MATERIAL_INCL_CASTING = 0;
    $scope.dataArr[0][7].MATERIAL_COST_STD_ITEMS = 0;
    $scope.dataArr[0][7].MACHINING_HRS = 0;
    $scope.dataArr[0][7].MACHINING_COST = 0;
    $scope.dataArr[0][7].ASSY_FINISHING_HRS = 0;
    $scope.dataArr[0][7].ASSY_FINISHING_COST = 0;
    $scope.dataArr[0][7].TRYOUT_HRS = 0;
    $scope.dataArr[0][7].TRYOUT_COST = 0;
    $scope.dataArr[0][7].TOTAL_MANUFACTURING_COST = 0;
    $scope.dataArr[0][7].FOB_CHARGE = 0;
    $scope.dataArr[0][7].FOB_TOTAL = 0;
    $scope.dataArr[0][14].FOB_TOTAL = 0;

    for (var i = 0; i <= 6; i++) {
      var rowCnt = 0;

      if ($scope.dataArr[0][i].TOOL_WEIGHT != undefined && $scope.dataArr[0][i].TOOL_WEIGHT != null && $scope.dataArr[0][i].TOOL_WEIGHT != "") {
        $scope.dataArr[0][7].TOOL_WEIGHT += Number($scope.dataArr[0][i].TOOL_WEIGHT);
      }

      if ($scope.dataArr[0][i].DIE_CFQTY != undefined && $scope.dataArr[0][i].DIE_CFQTY != null && $scope.dataArr[0][i].DIE_CFQTY != "") {
        $scope.dataArr[0][7].DIE_CFQTY += Number($scope.dataArr[0][i].DIE_CFQTY);
      }

      if ($scope.dataArr[0][i].SIMULATION_HR != undefined && $scope.dataArr[0][i].SIMULATION_HR != null && $scope.dataArr[0][i].SIMULATION_HR != "") {
        $scope.dataArr[0][7].SIMULATION_HR += Number($scope.dataArr[0][i].SIMULATION_HR);
      }

      if ($scope.dataArr[0][i].SIMULATION_COST != undefined && $scope.dataArr[0][i].SIMULATION_COST != null && $scope.dataArr[0][i].SIMULATION_COST != "") {
        $scope.dataArr[0][7].SIMULATION_COST += Number($scope.dataArr[0][i].SIMULATION_COST);
        rowCnt += Number($scope.dataArr[0][i].SIMULATION_COST);
      }

      if ($scope.dataArr[0][i].DIE_DESIGN_HRS != undefined && $scope.dataArr[0][i].DIE_DESIGN_HRS != null && $scope.dataArr[0][i].DIE_DESIGN_HRS != "") {
        $scope.dataArr[0][7].DIE_DESIGN_HRS += Number($scope.dataArr[0][i].DIE_DESIGN_HRS);
      }

      if ($scope.dataArr[0][i].DIE_DESIGN_COST != undefined && $scope.dataArr[0][i].DIE_DESIGN_COST != null && $scope.dataArr[0][i].DIE_DESIGN_COST != "") {
        $scope.dataArr[0][7].DIE_DESIGN_COST += Number($scope.dataArr[0][i].DIE_DESIGN_COST);
        rowCnt += Number($scope.dataArr[0][i].DIE_DESIGN_COST);
      }

      if ($scope.dataArr[0][i].CNC_PROGRAM_HRS != undefined && $scope.dataArr[0][i].CNC_PROGRAM_HRS != null && $scope.dataArr[0][i].CNC_PROGRAM_HRS != "") {
        $scope.dataArr[0][7].CNC_PROGRAM_HRS += Number($scope.dataArr[0][i].CNC_PROGRAM_HRS);
      }

      if ($scope.dataArr[0][i].CNC_PROGRAM_COST != undefined && $scope.dataArr[0][i].CNC_PROGRAM_COST != null && $scope.dataArr[0][i].CNC_PROGRAM_COST != "") {
        $scope.dataArr[0][7].CNC_PROGRAM_COST += Number($scope.dataArr[0][i].CNC_PROGRAM_COST);
        rowCnt += Number($scope.dataArr[0][i].CNC_PROGRAM_COST);
      }

      if ($scope.dataArr[0][i].CASTING_WEIGHT != undefined && $scope.dataArr[0][i].CASTING_WEIGHT != null && $scope.dataArr[0][i].CASTING_WEIGHT != "") {
        $scope.dataArr[0][7].CASTING_WEIGHT += Number($scope.dataArr[0][i].CASTING_WEIGHT);
      }

      if ($scope.dataArr[0][i].TOOL_STEEL_WEIGHT != undefined && $scope.dataArr[0][i].TOOL_STEEL_WEIGHT != null && $scope.dataArr[0][i].TOOL_STEEL_WEIGHT != "") {
        $scope.dataArr[0][7].TOOL_STEEL_WEIGHT += Number($scope.dataArr[0][i].TOOL_STEEL_WEIGHT);
      }

      if ($scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING != undefined && $scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING != null && $scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING != "") {
        $scope.dataArr[0][7].RAW_MATERIAL_INCL_CASTING += Number($scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING);
        rowCnt += Number($scope.dataArr[0][i].RAW_MATERIAL_INCL_CASTING);
      }

      if ($scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS != undefined && $scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS != null && $scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS != "") {
        $scope.dataArr[0][7].MATERIAL_COST_STD_ITEMS += Number($scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS);
        rowCnt += Number($scope.dataArr[0][i].MATERIAL_COST_STD_ITEMS);
      }

      if ($scope.dataArr[0][i].MACHINING_HRS != undefined && $scope.dataArr[0][i].MACHINING_HRS != null && $scope.dataArr[0][i].MACHINING_HRS != "") {
        $scope.dataArr[0][7].MACHINING_HRS += Number($scope.dataArr[0][i].MACHINING_HRS);
      }

      if ($scope.dataArr[0][i].MACHINING_COST != undefined && $scope.dataArr[0][i].MACHINING_COST != null && $scope.dataArr[0][i].MACHINING_COST != "") {
        $scope.dataArr[0][7].MACHINING_COST += Number($scope.dataArr[0][i].MACHINING_COST);
        rowCnt += Number($scope.dataArr[0][i].MACHINING_COST);
      }

      if ($scope.dataArr[0][i].ASSY_FINISHING_HRS != undefined && $scope.dataArr[0][i].ASSY_FINISHING_HRS != null && $scope.dataArr[0][i].ASSY_FINISHING_HRS != "") {
        $scope.dataArr[0][7].ASSY_FINISHING_HRS += Number($scope.dataArr[0][i].ASSY_FINISHING_HRS);
      }

      if ($scope.dataArr[0][i].ASSY_FINISHING_COST != undefined && $scope.dataArr[0][i].ASSY_FINISHING_COST != null && $scope.dataArr[0][i].ASSY_FINISHING_COST != "") {
        $scope.dataArr[0][7].ASSY_FINISHING_COST += Number($scope.dataArr[0][i].ASSY_FINISHING_COST);
        rowCnt += Number($scope.dataArr[0][i].ASSY_FINISHING_COST);
      }

      if ($scope.dataArr[0][i].TRYOUT_HRS != undefined && $scope.dataArr[0][i].TRYOUT_HRS != null && $scope.dataArr[0][i].TRYOUT_HRS != "") {
        $scope.dataArr[0][7].TRYOUT_HRS += Number($scope.dataArr[0][i].TRYOUT_HRS);
      }

      if ($scope.dataArr[0][i].TRYOUT_COST != undefined && $scope.dataArr[0][i].TRYOUT_COST != null && $scope.dataArr[0][i].TRYOUT_COST != "") {
        $scope.dataArr[0][7].TRYOUT_COST += Number($scope.dataArr[0][i].TRYOUT_COST);
        rowCnt += Number($scope.dataArr[0][i].TRYOUT_COST);
      }

      $scope.dataArr[0][i].TOTAL_MANUFACTURING_COST = rowCnt;
      $scope.dataArr[0][i].FOB_TOTAL = 0;

      if ($scope.dataArr[0][i].TOTAL_MANUFACTURING_COST != undefined && $scope.dataArr[0][i].TOTAL_MANUFACTURING_COST != null && $scope.dataArr[0][i].TOTAL_MANUFACTURING_COST != "") {
        $scope.dataArr[0][7].TOTAL_MANUFACTURING_COST += Number($scope.dataArr[0][i].TOTAL_MANUFACTURING_COST);
        $scope.dataArr[0][i].FOB_TOTAL += Number($scope.dataArr[0][i].TOTAL_MANUFACTURING_COST);
      }

      if ($scope.dataArr[0][i].FOB_CHARGE != undefined && $scope.dataArr[0][i].FOB_CHARGE != null && $scope.dataArr[0][i].FOB_CHARGE != "") {
        $scope.dataArr[0][7].FOB_CHARGE += Number($scope.dataArr[0][i].FOB_CHARGE);
        $scope.dataArr[0][i].FOB_TOTAL += Number($scope.dataArr[0][i].FOB_CHARGE);
      }

      if ($scope.dataArr[0][i].FOB_TOTAL != undefined && $scope.dataArr[0][i].FOB_TOTAL != null && $scope.dataArr[0][i].FOB_TOTAL != "") {
        $scope.dataArr[0][7].FOB_TOTAL += Number($scope.dataArr[0][i].FOB_TOTAL);
      }
    }

    $scope.dataArr[0][14].FOB_CHARGE = 0;
    $scope.dataArr[0][14].TOTAL_MANUFACTURING_COST = 0;
    $scope.dataArr[0][14].FOB_CHARGE = 0;

    for (var j = 7; j <= 13; j++) {
      $scope.dataArr[0][j].FOB_TOTAL = (Number($scope.dataArr[0][j].TOTAL_MANUFACTURING_COST) == NaN ? Number(0) : Number($scope.dataArr[0][j].TOTAL_MANUFACTURING_COST)) + (Number($scope.dataArr[0][j].FOB_CHARGE) == NaN ? Number(0) : Number($scope.dataArr[0][j].FOB_CHARGE));
      $scope.dataArr[0][14].TOTAL_MANUFACTURING_COST += Number($scope.dataArr[0][j].TOTAL_MANUFACTURING_COST) == NaN ? Number(0) : Number($scope.dataArr[0][j].TOTAL_MANUFACTURING_COST);
      $scope.dataArr[0][14].FOB_CHARGE += Number($scope.dataArr[0][j].FOB_CHARGE) == NaN ? Number(0) : Number($scope.dataArr[0][j].FOB_CHARGE);
      $scope.dataArr[0][14].FOB_TOTAL += Number($scope.dataArr[0][j].FOB_TOTAL) == NaN ? Number(0) : Number($scope.dataArr[0][j].FOB_TOTAL);
    }

    $scope.dataArr[0][0].NO_OF_DIES = 0;
    if ($scope.dataArr[0][7].DIE_CFQTY != undefined && $scope.dataArr[0][7].DIE_CFQTY != null && $scope.dataArr[0][7].DIE_CFQTY != "") $scope.dataArr[0][0].NO_OF_DIES = $scope.dataArr[0][7].DIE_CFQTY;
    $scope.dataArr[0][0].NO_OF_CHECKING_FIXTURE = 0;
    if ($scope.dataArr[0][9].DIE_CFQTY != undefined && $scope.dataArr[0][9].DIE_CFQTY != null && $scope.dataArr[0][9].DIE_CFQTY != "") $scope.dataArr[0][0].NO_OF_CHECKING_FIXTURE = Number($scope.dataArr[0][9].DIE_CFQTY);
    $scope.dataArr[0][0].TOTAL_WEIGHT = 0;
    if ($scope.dataArr[0][7].TOOL_WEIGHT != undefined && $scope.dataArr[0][7].TOOL_WEIGHT != null && $scope.dataArr[0][7].TOOL_WEIGHT != "") $scope.dataArr[0][0].TOTAL_WEIGHT = Number($scope.dataArr[0][7].TOOL_WEIGHT);
    $scope.dataArr[0][0].COST_TON = 0;
    if ($scope.dataArr[0][14].FOB_TOTAL != undefined && $scope.dataArr[0][14].FOB_TOTAL != null && $scope.dataArr[0][14].FOB_TOTAL != "" && $scope.dataArr[0][7].TOOL_WEIGHT != undefined && $scope.dataArr[0][7].TOOL_WEIGHT != null && $scope.dataArr[0][7].TOOL_WEIGHT != "") $scope.dataArr[0][0].COST_TON = Math.floor(Number($scope.dataArr[0][14].FOB_TOTAL) / Number($scope.dataArr[0][7].TOOL_WEIGHT));
    $scope.dataArr[0][0].TOTAL_COST = 0;
    if ($scope.dataArr[0][14].FOB_TOTAL != undefined && $scope.dataArr[0][14].FOB_TOTAL != null && $scope.dataArr[0][14].FOB_TOTAL != "") $scope.dataArr[0][0].TOTAL_COST = Number($scope.dataArr[0][14].FOB_TOTAL);
  };

  function UpdateErfqDieCostData(data) {
    var qr = _.map(data, function (d) {
      var t = {};

      if (d.DIE_COST_SEQ != undefined) {
        t.old = {
          "ERFQ_DIE_COST_DATA": {
            "DIE_COST_SEQ": d.DIE_COST_SEQ
          }
        };
      }

      t["new"] = {
        "ERFQ_DIE_COST_DATA": d
      };
      return t;
    });

    $.cordys.ajax({
      method: "UpdateErfqDieCostData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        tuple: qr
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        toastr.info("Quote submitted sucessfully");
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        alert("Error in loading data");
      }
    });
  }

  $scope.save = function () {
    if ($scope.data.curr != "" && $scope.data.curr != undefined) {
      console.log("$scope.ERFQ_PROCESS_PARTS=>", $scope.ERFQ_PROCESS_PARTS);
      var rem = $scope.ERFQ_PROCESS_PARTS[0].DIE_COST_REMARK + $scope.roles + ":" + ($scope.data.remark == undefined ? "" : $scope.data.remark) + "\n";
      rem = rem.replace(/null/g, "");
      var dd = {
        old: {
          "ERFQ_PROCESS_PARTS": {
            PROCESS_PARTS_SEQ: $scope.ERFQ_PROCESS_PARTS[0].PROCESS_PARTS_SEQ
          }
        },
        "new": {
          "ERFQ_PROCESS_PARTS": {
            CURRENCY_UNIT: $scope.data.curr,
            DIE_COST_REMARK: rem,
            DIE_COST_STATUS: "saved"
          }
        }
      };
      $.cordys.ajax({
        method: "UpdateErfqProcessParts",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        parameters: {
          tuple: dd
        },
        dataType: "* json",
        async: false,
        success: function success(e) {
          console.log("UpdateErfqProcessParts saved successfully");
          UpdateErfqDieCostData($scope.dataArr[0]);
        },
        error: function error(jqXHR, textStatus, errorThrown) {}
      });
      console.log("vm dataArr=>", $scope.dataArr);
    } else {
      toastr.info("Please select currency unit.");
    }
  };
});
"use strict";

angular.module('App.quoteComparisionCtrl').controller('dieWeightCtrl', function ($scope, Upload, $window, $log, $state, NgTableParams, cmm) {
  console.log("cmm=>", cmm);
  $scope.cmm = cmm;
  $scope.toolmakerDropdown = [];
  $scope.PanelGrpDrpdwn = [];
  $scope.budgetedToolmk = [];
  $scope.MaterialGrades = [];
  $scope.setArr = [];
  $scope.serialNo = 0;
  $scope.excelDataArray = [];
  cmm.SaveTab = false;
  $scope.projectCode = null;
  $scope.baslineNum = null;
  $scope.data = {};
  $scope.gridOptions = {};
  $scope.gridOptions.enableColumnMenus = false;
  $scope.gridOptions.enableSorting = false;
  $scope.funcRun = 0;

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.gridOptions2 = {
    enableColResize: true,
    headerHeight: 40,
    rowHeight: 40,
    pagination: true,
    paginationPageSize: 10,
    defaultColDef: {
      sortable: true
    },
    columnDefs: [{
      headerName: "S.No",
      width: 80,
      cellStyle: changeRowColor,
      cellRenderer: function cellRenderer(params) {
        return parseInt(params.node.id) + 1;
      }
    }, {
      headerName: "Part Number",
      field: "PART_NUMBER",
      cellStyle: changeRowColor
    }, {
      headerName: "Nomenclature",
      field: "PART_NAME",
      cellStyle: changeRowColor
    }, {
      headerName: "Budgated Toolmaker",
      field: "BUDGETED_TOOLMAKER",
      cellStyle: changeRowColor
    }, {
      headerName: "Blanking Die",
      field: "DIE_WEIGHT_BLANKINGDIE",
      cellStyle: changeRowColor,
      singleClickEdit: true,
      editable: true,
      cellRenderer: 'genderCellRenderer',
      cellRendererParams: function cellRendererParams(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            value: d.value,
            key: d.key
          };
        });

        return {
          params2: _t
        };
      },
      cellEditorSelector: function cellEditorSelector(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            text: d.value,
            value: d.key
          };
        });

        return {
          component: 'cellSelect',
          params: {
            values: _t
          }
        };
      }
    }, {
      headerName: "Die Weight ",
      field: "DIEWEIGHT_BUDGETED",
      cellStyle: changeRowColor,
      valueGetter: 'data.DIE_WEIGHT_BLANKINGDIE',
      cellRenderer: function cellRenderer(params) {
        if (params.data.DIE_WEIGHT_BLANKINGDIE == "Excluded") return params.data.EX_DIEWEIGHT_BUDGETED;else return params.data.IN_DIEWEIGHT_BUDGETED;
      }
    }],
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: CustomHeaderGroup,
      htmlText: htmlText,
      genderCellRenderer: CellRender,
      cellSelect: CellSelect
    }
  };

  function changeRowColor(params) {
    var key = _.keys(params.data).filter(function (d) {
      return d.match(/TOOLMAKER[0-9]/i);
    });

    for (var i = 0; i < key.length; i++) {
      if (Number(params.data.DIEWEIGHT_BUDGETED) > Number(params.data[key[i]].DIEWEIGHT)) {
        return {
          backgroundColor: '#FFE8E8'
        };
      }
    }
  }

  $scope.$watchCollection('cmm.SaveTab', function (newValue, oldValue) {
    if (cmm.SaveTab == true) {
      $scope.updateDieWeight();
    }
  }, true);
  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    $scope.gridOptions.enableColumnMenus = false;
    $scope.gridOptions.enableSorting = true;
    $scope.projectCode = newValue.projectCode;
    $scope.baslineNum = newValue.baslineNum;

    if (newValue.label != undefined) {
      $scope.DieInit(newValue.label, $scope.projectCode, $scope.baslineNum);
    } else if (oldValue.label != undefined) {
      $scope.DieInit(oldValue.label, $scope.projectCode, $scope.baslineNum);
    } else {
      $scope.DieInit("A", $scope.projectCode, $scope.baslineNum);
    }
  }, true);
  $.cordys.ajax({
    method: "GetRoles",
    namespace: "http://schemas.cordys.com/1.0/ldap",
    parameters: {
      dn: "",
      depth: ""
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      debugger;
      $scope.roles1 = $.cordys.json.findObjects(e, "user");

      for (var i = 0; i < $scope.roles1[0].role.length; i++) {
        $scope.CordysRole = $scope.CordysRole + "," + $scope.roles1[0].role[i].description;
      }

      if ($scope.CordysRole.includes("MSIE")) {
        console.log("MSIE");
        $scope.CurrentRole = "MSIE";
      }

      if ($scope.CordysRole.includes("Stamping Lead")) {
        console.log("Stamping Lead");
        $scope.CurrentRole = "Stamping Lead";
      }

      if ($scope.CordysRole.includes("Asset Manager")) {
        console.log("Asset Manager");
        $scope.CurrentRole = "Asset Manager";
      }
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });
  $scope.gridOptions = {
    enableFiltering: false,
    onRegisterApi: function onRegisterApi(gridApi) {
      $scope.gridApi = gridApi;
      $scope.gridApi.grid.registerRowsProcessor($scope.singleFilter, 200);
    }
  };

  $scope.settleData = function () {
    if (cmm.filtObj != null || cmm.filtObj != undefined) {
      $scope.filtObj = cmm.filtObj;
    }

    if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
      $scope.fillValue1($scope.filtObj.filterMG);
      $scope.fillValue2($scope.filtObj.filterBT);
      $scope.fillValue3($scope.filtObj.filterPG);

      if ($scope.toolmakerDropdown.length != 0) {
        var tk = cmm.filtObj.filtertmk;

        for (var t = 0; t < tk.length; t++) {
          var a = tk[t];
          $scope.toolmakerDropdown[a].selected1 = true;
        }
      }

      $scope.tmkReq = $scope.filtObj.tmkReq;
      $scope.setArr = $scope.filtObj.setArr;
    }
  };

  $scope.tmkReq = [];

  $scope.makeTmkArray = function (a) {
    debugger;
    console.log(a.TOOLMAKER_ID);

    if (a.selected1 == true) {
      $scope.tmkReq.push(a.TOOLMAKER_ID);
      var set = $scope.toolmakerDropdown.indexOf(a);
      $scope.setArr.push(set);
    }

    if (a.selected1 == false) {
      var indxOfObj = $scope.tmkReq.indexOf(a.TOOLMAKER_ID);
      $scope.tmkReq.splice(indxOfObj, 1);
      var set = $scope.toolmakerDropdown.indexOf(a);
      var s = $scope.setArr.indexOf(set);
      $scope.setArr.splice(s, 1);
    }
  };

  $scope.fillValue1 = function (v1) {
    $scope.filterMG = v1;
  };

  $scope.fillValue2 = function (v1) {
    $scope.filterBT = v1;
  };

  $scope.fillValue3 = function (v1) {
    $scope.filterPG = v1;
  };

  $scope.filter = function () {
    document.getElementById("myDropdown").classList.toggle("show");
    array = $scope.tmkReq;
    var flags = [],
        output = [],
        l = array.length,
        i;

    for (i = 0; i < l; i++) {
      if (flags[array[i]]) continue;
      flags[array[i]] = true;
      output.push(array[i]);
    }

    $scope.tmkReq = output;

    if ($scope.tmkReq.length > 0) {
      $scope.tmkarg = "";

      for (var i = 0; i < $scope.tmkReq.length; i++) {
        if ($scope.tmkarg != "") {
          $scope.tmkarg += ",";
        }

        $scope.tmkarg = $scope.tmkarg + "'" + $scope.tmkReq[i] + "'";
      }
    } else {
      $scope.tmkarg = '';
    }

    if ($scope.filterMG == undefined) {
      $scope.filterMG = '';
    }

    if ($scope.filterBT == undefined) {
      $scope.filterBT = '';
    }

    if ($scope.filterPG == undefined) {
      $scope.filterPG = '';
    }

    console.log($scope.filterMG);
    console.log($scope.filterBT);
    console.log($scope.filterPG);
    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.triggerRequest = function () {
    debugger;
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "DieWeight",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);
        $scope.settleData();
        $scope.colAdd($scope.gridOptions.data);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.singleFilter = function (renderableRows) {
    var matcher = new RegExp($scope.filterValue, "i");
    renderableRows.forEach(function (row) {
      var match = false;
      ['BUDGETED_TOOLMAKER', 'DIE_WEIGHT_BLANKINGDIE'].forEach(function (field) {
        if (row.entity[field].match(matcher)) {
          match = true;
        }
      });

      if (!match) {
        row.visible = false;
      }
    });
    return renderableRows;
  };

  $scope.openDD = function () {
    document.getElementById("myDropdown").classList.toggle("show");
  };

  $scope.clearAllField = function () {
    $scope.filterMG = "";
    $scope.filterBT = "";
    $scope.setArr = [];
    $scope.filterPG = "";
    $scope.tmkarg = "";
    $scope.tmkReq = [];
    document.getElementById("myDropdown").classList.toggle("show");

    for (i = 0; i < $scope.toolmakerDropdown.length; i++) {
      if ($scope.toolmakerDropdown[i].selected1 != undefined && $scope.toolmakerDropdown[i].selected1 == true) {
        $scope.toolmakerDropdown[i].selected1 = false;
      }
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.openFilterBox = function () {
    document.getElementById("filterBtn").style.backgroundColor = "#24c0c0";
  };

  $scope.DieInit = function (panelGrp, projectCode, baslineNum) {
    debugger;
    $scope.data = {};
    $scope.panelGroup = panelGrp;

    if ($scope.cmm.projectCode != undefined) {
      if (panelGrp == 'A') {
        document.getElementById('buttonPanelGrpB').classList.remove('active');
        document.getElementById('buttonPanelGrpA').className += ' active';
        $scope.selected = "A";
      }

      if (panelGrp == 'B') {
        document.getElementById('buttonPanelGrpA').className += ' active';
        document.getElementById('buttonPanelGrpB').classList.remove('active');
        $scope.selected = "B";
      }

      $.cordys.ajax({
        method: "GetERFQComparisonData",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          "comparisonType": "DieWeight",
          "panelGroup": panelGrp,
          "projectCode": $scope.cmm.projectCode,
          "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
          "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
          "baselineNum": cmm.baslineNum,
          "decimalPlace": '',
          "preferences": '',
          "ComparePref": '',
          "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
          "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
          "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
        },
        success: function success(data) {
          $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
          console.log($scope.gridOptions.data);
          $scope.gridOptions2.api.setRowData($scope.gridOptions.data);

          if ($scope.funcRun == 0) {
            $scope.colAdd($scope.gridOptions.data);
          }

          $.cordys.ajax({
            method: "GetToolMakersforCompair",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "projectCode": $scope.cmm.projectCode,
              "panelGroup": panelGrp
            },
            success: function success(data) {
              $scope.tmkdrp = $.cordys.json.findObjects(data, "ERFQ_TOOLMAKER_MASTER");
              $scope.toolmakerDropdown = [];

              for (var t = 0; t < $scope.tmkdrp.length; t++) {
                $scope.toolmakerDropdown.push($scope.tmkdrp[t]);
              }

              if (cmm.filtObj != null || cmm.filtObj != undefined) {
                $scope.filtObj = cmm.filtObj;
              }

              if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
                $scope.fillValue1($scope.filtObj.filterMG);
                $scope.fillValue2($scope.filtObj.filterBT);
                $scope.fillValue3($scope.filtObj.filterPG);

                if ($scope.toolmakerDropdown.length != 0) {
                  var tk = cmm.filtObj.filtertmk;

                  for (var t = 0; t < tk.length; t++) {
                    var a = tk[t];
                    $scope.toolmakerDropdown[a].selected1 = true;
                  }
                }
              }
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Unable to load data. Please try refreshing the page.");
            }
          });
          $scope.makeHeader();
          $scope.settleData();
          console.log($scope.gridOptions.data);
          $scope.$apply();
        },
        error: function error(jqXHR, textStatus, errorThrown) {}
      });
    }
  };

  $scope.makeHeader = function () {
    debugger;
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "DieWeight",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": '',
        "panelGrouping": '',
        "materialGrade": ''
      },
      success: function success(data) {
        $scope.gridOptions.data1 = $.cordys.json.findObjects(data, "COMPARISON");

        for (var i = 0; i < $scope.gridOptions.data1.length; i++) {
          $scope.callFunction1($scope.gridOptions.data1[i]);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.adddrp = function (value1) {
    if ($scope.budgetedToolmk.length != 0) {
      for (var t = 0; t < $scope.budgetedToolmk.length; t++) {
        if ($scope.budgetedToolmk[t].value === value1.value) {
          return 1;
        }
      }
    } else {
      $scope.budgetedToolmk.push($scope.value);
      return 1;
    }
  };

  $scope.addMaterial = function (value2) {
    if ($scope.MaterialGrades.length != 0) {
      for (var t = 0; t < $scope.MaterialGrades.length; t++) {
        if ($scope.MaterialGrades[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.MaterialGrades.push(value2);
      return 1;
    }
  };

  $scope.addPaneldrp = function (value2) {
    if ($scope.PanelGrpDrpdwn.length != 0) {
      for (var t = 0; t < $scope.PanelGrpDrpdwn.length; t++) {
        S;

        if ($scope.PanelGrpDrpdwn[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.PanelGrpDrpdwn.push(value2);
      return 1;
    }
  };

  $scope.callFunction1 = function (obj) {
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key.startsWith("BUDGETED_TOOLMAKER")) {
          $scope.value = {
            value: obj[key]
          };
          var ret = 0;
          ret = $scope.adddrp($scope.value);

          if (ret == undefined || ret == 0) {
            $scope.budgetedToolmk.push($scope.value);
          }
        }

        if (key.startsWith("PART_GROUP")) {
          $scope.value1 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addPaneldrp($scope.value1);

          if (ret1 == undefined || ret1 == 0) {
            $scope.PanelGrpDrpdwn.push($scope.value1);
          }
        }

        if (key.startsWith("MATERIAL")) {
          $scope.value2 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addMaterial($scope.value2);

          if (ret1 == undefined || ret1 == 0) {
            $scope.MaterialGrades.push($scope.value2);
          }
        }
      }
    }
  };

  $scope.dataChangedFun = function () {
    cmm.changeFlag = "NotSaved";
    document.getElementById("revtab1").style.display = "none";
    document.getElementById("revtab2").style.display = "";
    document.getElementById("tab1").style.display = "none";
    document.getElementById("tab2").style.display = "";
    document.getElementById("basictab1").style.display = "none";
    document.getElementById("basictab2").style.display = "";
    document.getElementById("landedtab1").style.display = "none";
    document.getElementById("landedtab2").style.display = "";
    document.getElementById("costtab1").style.display = "none";
    document.getElementById("costtab2").style.display = "";
    document.getElementById("besttab1").style.display = "none";
    document.getElementById("besttab2").style.display = "";
    document.getElementById("preftab1").style.display = "none";
    document.getElementById("preftab2").style.display = "";
    document.getElementById("targettab1").style.display = "none";
    document.getElementById("targettab2").style.display = "";
    document.getElementById("subtab1").style.display = "none";
    document.getElementById("subtab2").style.display = "";
  };

  $scope.colAdd = function (data) {
    var key = _.keys(data[0]).filter(function (d) {
      return d.match(/TOOLMAKER[0-9]/i);
    });

    for (var i = 0; i < key.length; i++) {
      $scope.gridOptions2.columnDefs.push({
        headerName: data[0][key[i]].TOOLMAKERNAME,
        field: key[i] + ".DIEWEIGHT",
        cellStyle: changeRowColor,
        valueGetter: 'data.DIE_WEIGHT_BLANKINGDIE',
        cellRenderer: function cellRenderer(params) {
          var obj = _.keys(params.data).filter(function (dd) {
            return dd.match(/^TOOLMAKER/i);
          }).map(function (dd) {
            return params.data[dd];
          }).filter(function (dd) {
            return dd.TOOLMAKERNAME == params.colDef.headerName;
          });

          if (params.data.DIE_WEIGHT_BLANKINGDIE == "Excluded") return obj[0].EX_DIEWEIGHT;else return obj[0].IN_DIEWEIGHT;
        }
      });
    }

    $scope.gridOptions2.api.setColumnDefs($scope.gridOptions2.columnDefs);
    $scope.funcRun += 1;
  };

  $scope.xl = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": false,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions2.api.exportDataAsCsv(params);
  };

  $scope.updateDieWeight = function () {
    document.getElementById("revtab1").style.display = "none";
    document.getElementById("revtab2").style.display = "";
    document.getElementById("tab1").style.display = "none";
    document.getElementById("tab2").style.display = "";
    document.getElementById("basictab1").style.display = "none";
    document.getElementById("basictab2").style.display = "";
    document.getElementById("landedtab1").style.display = "none";
    document.getElementById("landedtab2").style.display = "";
    document.getElementById("costtab1").style.display = "none";
    document.getElementById("costtab2").style.display = "";
    document.getElementById("besttab1").style.display = "none";
    document.getElementById("besttab2").style.display = "";
    document.getElementById("preftab1").style.display = "none";
    document.getElementById("preftab2").style.display = "";
    document.getElementById("targettab1").style.display = "none";
    document.getElementById("targettab2").style.display = "";
    document.getElementById("subtab1").style.display = "none";
    document.getElementById("subtab2").style.display = "";
    var requestTupleJsonArr = [];
    var requestTupleJsonObj = {};

    for (var i = 0; i < $scope.gridOptions.data.length; i++) {
      var requestObj = {};
      var oldReqObjInternal = {};
      var newReqObjInternal = {};
      var oldReqObjInternalNew = {};
      var newReqObjInternalNew = {};

      if ($scope.gridOptions.data[i].COMPARISON_SEQ != undefined) {
        if ($scope.gridOptions.data[i].COMPARISON_SEQ.length > 0) {
          oldReqObjInternal['COMPARISON_SEQ'] = $scope.gridOptions.data[i].COMPARISON_SEQ;
          oldReqObjInternalNew['ERFQ_QUOTE_COMPARISON'] = oldReqObjInternal;
          newReqObjInternal['DIE_WEIGHT_BLANKINGDIE'] = $scope.gridOptions.data[i].DIE_WEIGHT_BLANKINGDIE;
          newReqObjInternalNew['ERFQ_QUOTE_COMPARISON'] = newReqObjInternal;
          requestObj['old'] = oldReqObjInternalNew;
          requestObj['new'] = newReqObjInternalNew;
          requestTupleJsonArr.push(requestObj);
        } else if ($scope.gridOptions.data[i].COMPARISON_SEQ.length == 0) {
          newReqObjInternal['PROJECT_CODE'] = $scope.projectCode;
          newReqObjInternal['PART_NUMBER'] = $scope.gridOptions.data[i].PART_NUMBER;
          newReqObjInternal['NO_OF_DIES_BLANKINGDIE'] = "Included";
          newReqObjInternal['DIE_WEIGHT_BLANKINGDIE'] = $scope.gridOptions.data[i].DIE_WEIGHT_BLANKINGDIE;
          ;
          newReqObjInternal['BASIC_COST_BLANKINGDIE'] = "Included";
          newReqObjInternal['COST_PER_TON_BLANKINGDIE'] = "Included";
          newReqObjInternal['LANDED_COST_BLANKINGDIE'] = "Included";
          newReqObjInternal['BASELINE_NUM'] = cmm.baslineNum;
          newReqObjInternal['PART_GROUP'] = $scope.selected;
          newReqObjInternalNew['ERFQ_QUOTE_COMPARISON'] = newReqObjInternal;
          requestObj['new'] = newReqObjInternalNew;
          requestTupleJsonArr.push(requestObj);
        }
      }
    }

    requestTupleJsonObj['tuple'] = requestTupleJsonArr;
    $.cordys.ajax({
      method: "UpdateErfqQuoteComparison",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: requestTupleJsonObj,
      success: function success(response) {
        document.getElementById("revtab1").style.display = "";
        document.getElementById("revtab2").style.display = "none";
        document.getElementById("tab1").style.display = "";
        document.getElementById("tab2").style.display = "none";
        document.getElementById("dietab1").style.display = "";
        document.getElementById("dietab2").style.display = "none";
        document.getElementById("basictab1").style.display = "";
        document.getElementById("basictab2").style.display = "none";
        document.getElementById("landedtab1").style.display = "";
        document.getElementById("landedtab2").style.display = "none";
        document.getElementById("costtab1").style.display = "";
        document.getElementById("costtab2").style.display = "none";
        document.getElementById("besttab1").style.display = "";
        document.getElementById("besttab2").style.display = "none";
        document.getElementById("preftab1").style.display = "";
        document.getElementById("preftab2").style.display = "none";
        document.getElementById("targettab1").style.display = "";
        document.getElementById("targettab2").style.display = "none";
        document.getElementById("subtab1").style.display = "";
        document.getElementById("subtab2").style.display = "none";
        cmm.SaveTab = false;
        toastr.success("Data Updated");
        $scope.DieInit($scope.selected, $scope.projectCode, $scope.baslineNum);
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error while updating...");
      }
    });
    console.log(requestTupleJsonObj);
  };

  $scope.xlSave = function () {
    console.log("Die wt save Data:", $scope.gridOptions.data);

    (function (_data) {
      console.log(_data);
      $.cordys.ajax({
        method: "UpdateErfqQuoteComparison",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          'tuple': _data
        },
        success: function success(data) {
          console.log("success");
          document.getElementById("revtab1").style.display = "";
          document.getElementById("tab1").style.display = "";
          document.getElementById("dietab1").style.display = "";
          document.getElementById("basictab1").style.display = "";
          document.getElementById("landedtab1").style.display = "";
          document.getElementById("costtab1").style.display = "";
          document.getElementById("besttab1").style.display = "";
          document.getElementById("preftab1").style.display = "";
          document.getElementById("targettab1").style.display = "";
          document.getElementById("subtab1").style.display = "";
          cmm.SaveTab = false;
          window.scrollTo(0, 0);
          toastr.success("Updated successfully!");
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log("jqXHR=>", jqXHR, "textStatus=>", textStatus, "errorThrown=>", errorThrown);
        }
      });
    })(_.map($scope.gridOptions2.data, function (d) {
      if (d.COMPARISON_SEQ == "") {
        return {
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'PROJECT_CODE': cmm.projectCode,
              'PART_NUMBER': d.PART_NUMBER,
              'NO_OF_DIES_BLANKINGDIE': d.NO_OF_DIES_BLANKINGDIE,
              'DIE_WEIGHT_BLANKINGDIE': "Included",
              'BASIC_COST_BLANKINGDIE': "Included",
              'LANDED_COST_BLANKINGDIE': "Included",
              'COST_PER_TON_BLANKINGDIE': "Included",
              'PART_GROUP': $scope.cmm.label,
              'BASELINE_NUM': cmm.baslineNum
            }
          }
        };
      } else {
        return {
          "old": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ
            }
          },
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ,
              'DIE_WEIGHT_BLANKINGDIE': d.DIE_WEIGHT_BLANKINGDIE
            }
          }
        };
      }
    }));
  };

  $scope.$watchCollection('cmm.SaveTab', function (newValue, oldValue) {
    if (cmm.SaveTab == true) $scope.xlSave();
  }, true);
}).filter('mapGender', function () {
  var genderHash = {
    'Included': 'Included',
    'Excluded': 'Excluded'
  };
  return function (input) {
    if (!input) {
      return '';
    } else {
      return genderHash[input];
    }
  };
});
"use strict";

function success(e) {
  console.log(e);
  var filename = "GDMS Report" + ".xlsx";
  var element = document.createElement('a');
  element.setAttribute('href', 'data:application/octet-stream;charset=utf-16le;base64,' + encodeURIComponent(e.tuple.old.GenerateGDMSExcelReport.GenerateGDMSExcelReport));
  element.setAttribute('download', filename);
  element.style.display = 'none';
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
}
"use strict";

angular.module('App.quoteComparisionCtrl').controller('landedCostCtrl', function ($scope, Upload, $window, $log, $state, NgTableParams, cmm) {
  $scope.data = {};
  $scope.gridOptions = {};
  $scope.cmm = cmm;
  $scope.cmm.label = 'A';
  $scope.decimals = parseInt("2");
  $scope.budgetedParam = '';
  $scope.partNum = '';
  $scope.toolmakerDropdown = [];
  $scope.PanelGrpDrpdwn = [];
  $scope.budgetedToolmk = [];
  $scope.MaterialGrades = [];
  $scope.setArr = [];
  $scope.funcRun = 0;

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.xl = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": false,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions2.api.exportDataAsCsv(params);
  };

  $scope.gridOptions2 = {
    enableColResize: true,
    autoHeight: true,
    headerHeight: 40,
    rowHeight: 40,
    pagination: true,
    paginationPageSize: 10,
    defaultColDef: {
      sortable: true
    },
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: CustomHeaderGroup,
      htmlText: htmlText,
      genderCellRenderer: CellRender,
      cellSelect: CellSelect
    },
    columnDefs: [{
      headerName: "S.No",
      width: 80,
      cellRenderer: function cellRenderer(params) {
        return parseInt(params.node.id) + 1;
      }
    }, {
      headerName: "Part Number",
      field: "PART_NUMBER"
    }, {
      headerName: "Nomenclature",
      field: "PART_NAME"
    }, {
      headerName: "Budgated Toolmaker",
      field: "BUDGETED_TOOLMAKER"
    }, {
      headerName: "Blanking Die",
      field: "LANDEDCOST_BLANKINGDIE",
      singleClickEdit: true,
      editable: true,
      cellRenderer: 'genderCellRenderer',
      cellRendererParams: function cellRendererParams(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            value: d.value,
            key: d.key
          };
        });

        return {
          params2: _t
        };
      },
      cellEditorSelector: function cellEditorSelector(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            text: d.value,
            value: d.key
          };
        });

        return {
          component: 'cellSelect',
          params: {
            values: _t
          }
        };
      }
    }, {
      headerName: "Budgeted Landed Cost(In Lakhs)",
      field: "BUDGETED_LANDED_COST",
      valueGetter: 'data.LANDEDCOST_BLANKINGDIE',
      cellRenderer: function cellRenderer(params) {
        if (params.data.LANDEDCOST_BLANKINGDIE == "Excluded") return params.data.EX_BUDGETED_LANDED_COST;else return params.data.IN_BUDGETED_LANDED_COST;
      }
    }, {
      headerName: "Budgeted Blanking Landed Cost(In Lakhs)",
      field: "BUDGETED_BLANKING_LANDED",
      valueGetter: 'data.LANDEDCOST_BLANKINGDIE',
      cellRenderer: function cellRenderer(params) {
        if (params.data.LANDEDCOST_BLANKINGDIE == "Excluded") return params.data.EX_BUDGETED_BLANKING_LANDED;else return params.data.IN_BUDGETED_BLANKING_LANDED;
      }
    }]
  };

  $scope.changePrj = function (projectCode, panelGroup, baseNum, prefered) {
    $scope.panelGroup = panelGroup;
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "LandedCost",
        "panelGroup": panelGroup,
        "projectCode": projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": $scope.decimals,
        "preferences": prefered,
        "ComparePref": '',
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        console.log("Lcost:", $scope.gridOptions.data);
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);

        if ($scope.funcRun == 0) {
          $scope.colAdd($scope.gridOptions.data);
        }

        $.cordys.ajax({
          method: "GetToolMakersforCompair",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "projectCode": $scope.cmm.projectCode,
            "panelGroup": $scope.panelGroup
          },
          success: function success(data) {
            $scope.tmkdrp = $.cordys.json.findObjects(data, "ERFQ_TOOLMAKER_MASTER");
            $scope.toolmakerDropdown = [];

            for (var t = 0; t < $scope.tmkdrp.length; t++) {
              $scope.toolmakerDropdown.push($scope.tmkdrp[t]);
            }

            if (cmm.filtObj != null || cmm.filtObj != undefined) {
              $scope.filtObj = cmm.filtObj;
            }

            if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
              $scope.fillValue1($scope.filtObj.filterMG);
              $scope.fillValue2($scope.filtObj.filterBT);
              $scope.fillValue3($scope.filtObj.filterPG);

              if ($scope.toolmakerDropdown.length != 0) {
                var tk = cmm.filtObj.filtertmk;

                for (var t = 0; t < tk.length; t++) {
                  var a = tk[t];
                  $scope.toolmakerDropdown[a].selected1 = true;
                }
              }
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.error("Unable to load data. Please try refreshing the page.");
          }
        });
        $scope.makeHeader();
        $scope.settleData();
        console.log("Landed Cost: ", $scope.gridOptions2.columnDefs);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    if (newValue.projectCode != oldValue.projectCode || newValue.label != oldValue.label) $scope.openruPBox('1', newValue.projectCode, newValue.label, cmm.baslineNum);

    if (document.getElementById("filterBtn") != undefined && document.getElementById("ruPBtn") != undefined && document.getElementById("preFBtn") != undefined) {
      document.getElementById("filterBtn").style.backgroundColor = "#202121";
      document.getElementById("ruPBtn").style.backgroundColor = "#dfdede";
      document.getElementById("preFBtn").style.backgroundColor = "#dfdede";
    }
  }, true);

  $scope.colAdd = function (data) {
    var key = _.keys(data[0]).filter(function (d) {
      return d.match(/TOOLMAKER[0-9]/i);
    });

    for (var i = 0; i < key.length; i++) {
      $scope.gridOptions2.columnDefs.push({
        headerName: data[0][key[i]].TOOLMAKERNAME,
        children: [{
          headerName: "Landed Cost(Original Currency)",
          field: key[i] + ".LANDED_COST"
        }, {
          headerName: "Landed Cost(In Lakhs)",
          field: key[i] + ".LANDED_COST_LKH"
        }, {
          headerName: "Blanking Die Cost(rupees)",
          field: key[i] + ".BLANKING_DIE"
        }],
        valueGetter: 'data.LANDEDCOST_BLANKINGDIE',
        cellRenderer: function cellRenderer(params) {
          var obj = _.keys(params.data).filter(function (dd) {
            return dd.match(/^TOOLMAKER/i);
          }).map(function (dd) {
            return params.data[dd];
          }).filter(function (dd) {
            return dd.TOOLMAKERNAME == params.colDef.headerName;
          });

          if (params.data.LANDEDCOST_BLANKINGDIE == "Excluded") return obj[0].EX_LANDED_COST;else return obj[0].IN_LANDED_COST;
          if (params.data.LANDEDCOST_BLANKINGDIE == "Excluded") return obj[1].EX_LANDED_COST_LKH;else return obj[1].IN_LANDED_COST_LKH;
          if (params.data.LANDEDCOST_BLANKINGDIE == "Excluded") return obj[2].EX_BLANKING_DIE;else return obj[2].IN_BLANKING_DIE;
        }
      });
    }

    $scope.gridOptions2.api.setColumnDefs($scope.gridOptions2.columnDefs);
    $scope.funcRun += 1;
  };

  $scope.openruPBox = function (valv, pc, pg, bln) {
    document.getElementById("filterBtn").style.backgroundColor = "#202121";
    document.getElementById("ruPBtn").style.backgroundColor = "#dc3545";
    document.getElementById("preFBtn").style.backgroundColor = "#dfdede";
    $scope.cell = [];
    $scope.factors = [];
    $scope.currencies = [];
    $scope.landings = [];
    $scope.showLF = false;
    $scope.showCF = false;

    $scope.dataCF = function (currencies) {
      $scope.tableParams = new NgTableParams({}, {
        filterDelay: 0,
        dataset: currencies
      });
    };

    $scope.dataLF = function (landings) {
      $scope.tableParams = new NgTableParams({}, {
        filterDelay: 0,
        dataset: landings
      });
    };

    $.cordys.ajax({
      method: "GetFactorsbyProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        projectCode: $scope.cmm.projectCode,
        factor: 'Landed'
      },
      dataType: "* json",
      async: false,
      success: function success(a1) {
        var temp = $.cordys.json.findObjects(a1, "RootTag");

        if (temp[0].ERFQFACTOR.length > 0) {
          for (var i = 0; i < temp[0].ERFQFACTOR.length; i++) {
            if (temp[0].ERFQFACTOR[i].FACTOR_VALUE == "") {
              temp[0].ERFQFACTOR[i].SAVE = "Insert";
            } else {
              temp[0].ERFQFACTOR[i].FACTOR_VALUE = parseInt(temp[0].ERFQFACTOR[i].FACTOR_VALUE);
              temp[0].ERFQFACTOR[i].SAVE = "Update";
            }

            $scope.factors.push(temp[0].ERFQFACTOR[i]);
          }

          $scope.landings = temp[0].ERFQFACTOR;
        } else {
          if (temp[0].ERFQFACTOR.FACTOR_VALUE == "") {
            temp[0].ERFQFACTOR.SAVE = "Insert";
          } else {
            temp[0].ERFQFACTOR.FACTOR_VALUE = parseInt(temp[0].ERFQFACTOR.FACTOR_VALUE);
            temp[0].ERFQFACTOR.SAVE = "Update";
          }

          $scope.factors.push(temp[0].ERFQFACTOR);
          $scope.landings.push(temp[0].ERFQFACTOR);
        }

        $scope.dataLF($scope.landings);

        if (temp[0].COMPARISONFACT == "true") {
          $scope.showLF = true;
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
    $.cordys.ajax({
      method: "GetFactorsbyProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        projectCode: $scope.cmm.projectCode,
        factor: 'Currency'
      },
      dataType: "* json",
      async: false,
      success: function success(a2) {
        var temp = $.cordys.json.findObjects(a2, "RootTag");

        if (temp[0].ERFQFACTOR.length > 0) {
          for (var i = 0; i < temp[0].ERFQFACTOR.length; i++) {
            if (temp[0].ERFQFACTOR[i].FACTOR_VALUE == "") {
              temp[0].ERFQFACTOR[i].SAVE = "Insert";
            } else {
              temp[0].ERFQFACTOR[i].FACTOR_VALUE = parseInt(temp[0].ERFQFACTOR[i].FACTOR_VALUE);
              temp[0].ERFQFACTOR[i].SAVE = "Update";
            }

            $scope.factors.push(temp[0].ERFQFACTOR[i]);
          }

          $scope.currencies = temp[0].ERFQFACTOR;
        } else {
          if (temp[0].ERFQFACTOR.FACTOR_VALUE == "") {
            temp[0].ERFQFACTOR.SAVE = "Insert";
          } else {
            temp[0].ERFQFACTOR.FACTOR_VALUE = parseInt(temp[0].ERFQFACTOR.FACTOR_VALUE);
            temp[0].ERFQFACTOR.SAVE = "Update";
          }

          $scope.factors.push(temp[0].ERFQFACTOR);
          $scope.currencies.push(temp[0].ERFQFACTOR);
        }

        $scope.dataCF($scope.currencies);

        if (temp[0].COMPARISONFACT == "true") {
          $scope.showCF = true;
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });

    if ($scope.showCF == true && $scope.showLF == true && valv == '1') {
      $scope.openpreFBox(valv);
      $scope.changePrj(pc, pg, bln, $scope.pf);
    } else {
      if (valv == '0') {
        console.log("opening popup!!!");
      } else {
        toastr.error("Factor value missing or not set.");
      }
    }
  };

  $scope.saveLCFactors = function (l, c) {
    debugger;

    for (var i = 0; i < l.length; i++) {
      if (l[i].SAVE == "Insert") {
        $.cordys.ajax({
          method: "UpdateErfqQuoteFactor",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "new": {
                "ERFQ_QUOTE_FACTOR": {
                  FACTOR_NAME: l[i].FACTOR_NAME,
                  FACTOR_VALUE: l[i].FACTOR_VALUE,
                  FACTOR: l[i].FACTOR,
                  PROJECT_CODE: $scope.cmm.projectCode
                }
              }
            }
          },
          success: function success(response) {
            console.log("new landing Inserted");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      } else if (l[i].SAVE == "Update") {
        $.cordys.ajax({
          method: "UpdateErfqQuoteFactor",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_QUOTE_FACTOR": {
                  QUOTE_FACTOR_SRNO: l[i].FACTOR_SRNO
                }
              },
              "new": {
                "ERFQ_QUOTE_FACTOR": {
                  FACTOR_VALUE: l[i].FACTOR_VALUE
                }
              }
            }
          },
          success: function success(response) {
            console.log("landing updated");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }
    }

    for (var i = 0; i < c.length; i++) {
      if (c[i].SAVE == "Insert") {
        $.cordys.ajax({
          method: "UpdateErfqQuoteFactor",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "new": {
                "ERFQ_QUOTE_FACTOR": {
                  FACTOR_NAME: c[i].FACTOR_NAME,
                  FACTOR_VALUE: c[i].FACTOR_VALUE,
                  FACTOR: c[i].FACTOR,
                  PROJECT_CODE: $scope.cmm.projectCode
                }
              }
            }
          },
          success: function success(response) {
            console.log("new currency inserted");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      } else if (c[i].SAVE == "Update") {
        $.cordys.ajax({
          method: "UpdateErfqQuoteFactor",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_QUOTE_FACTOR": {
                  QUOTE_FACTOR_SRNO: c[i].FACTOR_SRNO
                }
              },
              "new": {
                "ERFQ_QUOTE_FACTOR": {
                  FACTOR_VALUE: c[i].FACTOR_VALUE
                }
              }
            }
          },
          success: function success(response) {
            console.log("currency updated");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }
    }

    $scope.triggerRequest();
  };

  $scope.openpreFBox = function (valU) {
    document.getElementById("filterBtn").style.backgroundColor = "#202121";
    document.getElementById("ruPBtn").style.backgroundColor = "#dfdede";
    document.getElementById("preFBtn").style.backgroundColor = "#dc3545";
    $scope.preferences = [];

    $scope.dataPF = function (preferences) {
      $scope.tableParams = new NgTableParams({}, {
        filterDelay: 0,
        dataset: preferences
      });
    };

    $.cordys.ajax({
      method: "GetERFQFactors",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        factor: 'Currency'
      },
      dataType: "* json",
      async: false,
      success: function success(a0) {
        var temp = $.cordys.json.findObjects(a0, "ERFQ_FACTOR_MASTER");

        if (valU == '0') {
          if ($scope.pf != undefined) {
            arr = $scope.pf.split(',');

            for (i = 0; i < temp.length; i++) {
              for (j = 0; j < arr.length; j++) {
                if (temp[i].FACTOR_NAME == arr[j]) {
                  temp[i].check = true;
                }
              }
            }
          }

          $scope.preferences = temp;
          $scope.dataPF($scope.preferences);
        } else if (valU == '1') {
          var preFStr = '';

          for (var i = 0; i < temp.length; i++) {
            preFStr = preFStr + ',' + temp[i].FACTOR_NAME;
          }

          $scope.pf = preFStr.slice(1);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  $scope.formpreFStr = function (pf, no) {
    $scope.count = 0;
    temp = $scope.pf.split(',');
    $scope.preferences[no].check = !$scope.preferences[no].check;

    for (var i = 0; i < temp.length; i++) {
      if (pf == temp[i]) {
        $scope.count++;
        temp.splice(i, 1);
      }
    }

    if ($scope.count == 0) {
      temp = temp.toString();
      temp = temp.concat(',', pf);
    }

    $scope.pf = temp.toString();

    if ($scope.pf[0] == ',') {
      $scope.pf = $scope.pf.slice(1);
    }
  };

  $scope.applypreF = function () {
    $scope.changePrj($scope.cmm.projectCode, $scope.cmm.label, $scope.cmm.baslineNum, $scope.pf);
  };

  $scope.fillValue1 = function (v1) {
    $scope.filterMG = v1;
  };

  $scope.fillValue2 = function (v1) {
    $scope.filterBT = v1;
  };

  $scope.fillValue3 = function (v1) {
    $scope.filterPG = v1;
  };

  $scope.makeHeader = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "LandedCost",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": '',
        "panelGrouping": '',
        "materialGrade": ''
      },
      success: function success(data) {
        $scope.gridOptions.data1 = $.cordys.json.findObjects(data, "COMPARISON");

        for (var i = 0; i < $scope.gridOptions.data1.length; i++) {
          $scope.callFunction1($scope.gridOptions.data1[i]);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.settleData = function () {
    if (cmm.filtObj != null || cmm.filtObj != undefined) {
      $scope.filtObj = cmm.filtObj;
    }

    if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
      $scope.fillValue1($scope.filtObj.filterMG);
      $scope.fillValue2($scope.filtObj.filterBT);
      $scope.fillValue3($scope.filtObj.filterPG);

      if ($scope.toolmakerDropdown.length != 0) {
        var tk = cmm.filtObj.filtertmk;

        for (var t = 0; t < tk.length; t++) {
          var a = tk[t];
          $scope.toolmakerDropdown[a].selected1 = true;
        }
      }

      $scope.tmkReq = $scope.filtObj.tmkReq;
      $scope.setArr = $scope.filtObj.setArr;
    }
  };

  $scope.adddrp = function (value1) {
    if ($scope.budgetedToolmk.length != 0) {
      for (var t = 0; t < $scope.budgetedToolmk.length; t++) {
        if ($scope.budgetedToolmk[t].value === value1.value) {
          return 1;
        }
      }
    } else {
      $scope.budgetedToolmk.push($scope.value);
      return 1;
    }
  };

  $scope.addMaterial = function (value2) {
    if ($scope.MaterialGrades.length != 0) {
      for (var t = 0; t < $scope.MaterialGrades.length; t++) {
        if ($scope.MaterialGrades[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.MaterialGrades.push(value2);
      return 1;
    }
  };

  $scope.addPaneldrp = function (value2) {
    if ($scope.PanelGrpDrpdwn.length != 0) {
      for (var t = 0; t < $scope.PanelGrpDrpdwn.length; t++) {
        if ($scope.PanelGrpDrpdwn[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.PanelGrpDrpdwn.push(value2);
      return 1;
    }
  };

  $scope.callFunction1 = function (obj) {
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key.startsWith("BUDGETED_TOOLMAKER")) {
          $scope.value = {
            value: obj[key]
          };
          var ret = 0;
          ret = $scope.adddrp($scope.value);

          if (ret == undefined || ret == 0) {
            $scope.budgetedToolmk.push($scope.value);
          }
        }

        if (key.startsWith("PART_GROUP")) {
          $scope.value1 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addPaneldrp($scope.value1);

          if (ret1 == undefined || ret1 == 0) {
            $scope.PanelGrpDrpdwn.push($scope.value1);
          }
        }

        if (key.startsWith("MATERIAL")) {
          $scope.value2 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addMaterial($scope.value2);

          if (ret1 == undefined || ret1 == 0) {
            $scope.MaterialGrades.push($scope.value2);
          }
        }
      }
    }
  };

  $scope.tmkReq = [];

  $scope.makeTmkArray = function (a) {
    debugger;

    if (a.selected1 == true) {
      $scope.tmkReq.push(a.TOOLMAKER_ID);
      var set = $scope.toolmakerDropdown.indexOf(a);
      $scope.setArr.push(set);
    }

    if (a.selected1 == false) {
      var indxOfObj = $scope.tmkReq.indexOf(a.TOOLMAKER_ID);
      $scope.tmkReq.splice(indxOfObj, 1);
      var set = $scope.toolmakerDropdown.indexOf(a);
      var s = $scope.setArr.indexOf(set);
      $scope.setArr.splice(s, 1);
    }
  };

  $scope.filter = function () {
    document.getElementById("myDropdown").classList.toggle("show");
    array = $scope.tmkReq;
    var flags = [],
        output = [],
        l = array.length,
        i;

    for (i = 0; i < l; i++) {
      if (flags[array[i]]) continue;
      flags[array[i]] = true;
      output.push(array[i]);
    }

    $scope.tmkReq = output;

    if ($scope.tmkReq.length > 0) {
      $scope.tmkarg = "";

      for (var i = 0; i < $scope.tmkReq.length; i++) {
        if ($scope.tmkarg != "") {
          $scope.tmkarg += ",";
        }

        $scope.tmkarg = $scope.tmkarg + "'" + $scope.tmkReq[i] + "'";
      }
    } else {
      $scope.tmkarg = '';
    }

    if ($scope.filterMG == undefined) {
      $scope.filterMG = '';
    }

    if ($scope.filterBT == undefined) {
      $scope.filterBT = '';
    }

    if ($scope.filterPG == undefined) {
      $scope.filterPG = '';
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.triggerRequest = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "LandedCost",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": $scope.decimals,
        "preferences": $scope.pf,
        "ComparePref": "",
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        console.log("filtered: ", $scope.gridOptions.data);
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);
        $scope.gridOptions2.columnDefs.splice(7);
        $scope.colAdd($scope.gridOptions.data);
        $scope.settleData();
        console.log("Filtered Landed Cost: ", $scope.gridOptions2.columnDefs);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.openDD = function () {
    document.getElementById("myDropdown").classList.toggle("show");
  };

  $scope.clearAllField = function () {
    $scope.filterMG = "";
    $scope.filterBT = "";
    $scope.setArr = [];
    $scope.filterPG = "";
    $scope.tmkarg = "";
    $scope.tmkReq = [];
    document.getElementById("myDropdown").classList.toggle("show");

    for (i = 0; i < $scope.toolmakerDropdown.length; i++) {
      if ($scope.toolmakerDropdown[i].selected1 != undefined && $scope.toolmakerDropdown[i].selected1 == true) {
        $scope.toolmakerDropdown[i].selected1 = false;
      }
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.changePrj($scope.cmm.projectCode, $scope.panelGroup, $scope.cmm.baslineNum, $scope.pf);
  };

  if ($scope.cmm.projectCode == undefined) {
    toastr.warning("Select ProjectCode");
  } else {
    $scope.openruPBox('1', $scope.cmm.projectCode, $scope.cmm.label, $scope.cmm.baslineNum);
  }

  $scope.xlSave = function () {
    console.log("no of dies save Data:", $scope.gridOptions.data);

    (function (_data) {
      console.log(_data);
      $.cordys.ajax({
        method: "UpdateErfqQuoteComparison",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          'tuple': _data
        },
        success: function success(data) {
          console.log("success");
          document.getElementById("revtab1").style.display = "";
          document.getElementById("tab1").style.display = "";
          document.getElementById("dietab1").style.display = "";
          document.getElementById("basictab1").style.display = "";
          document.getElementById("landedtab1").style.display = "";
          document.getElementById("costtab1").style.display = "";
          document.getElementById("besttab1").style.display = "";
          document.getElementById("preftab1").style.display = "";
          document.getElementById("targettab1").style.display = "";
          document.getElementById("subtab1").style.display = "";
          cmm.SaveTab = false;
          window.scrollTo(0, 0);
          toastr.success("Updated successfully!");
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log("jqXHR=>", jqXHR, "textStatus=>", textStatus, "errorThrown=>", errorThrown);
        }
      });
    })(_.map($scope.gridOptions2.data, function (d) {
      if (d.COMPARISON_SEQ == "") {
        return {
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'PROJECT_CODE': cmm.projectCode,
              'PART_NUMBER': d.PART_NUMBER,
              'NO_OF_DIES_BLANKINGDIE': d.NO_OF_DIES_BLANKINGDIE,
              'DIE_WEIGHT_BLANKINGDIE': "Included",
              'BASICCOST_BLANKINGDIE': "Included",
              'LANDEDCOST_BLANKINGDIE': "Included",
              'COSTPERTON_BLANKINGDIE': "Included",
              'PART_GROUP': $scope.cmm.label,
              'BASELINE_NUM': cmm.baslineNum
            }
          }
        };
      } else {
        return {
          "old": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ
            }
          },
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ,
              'LANDEDCOST_BLANKINGDIE': d.LANDEDCOST_BLANKINGDIE
            }
          }
        };
      }
    }));
  };

  $scope.$watchCollection('cmm.SaveTab', function (newValue, oldValue) {
    if (cmm.SaveTab == true) $scope.xlSave();
  }, true);
});
"use strict";

angular.module('App.quoteComparisionCtrl').controller('noOfDiesCtrl', function ($scope, Upload, $window, $log, $state, NgTableParams, cmm) {
  $scope.data = {};
  $scope.toolmakerDropdown = [];
  $scope.PanelGrpDrpdwn = [];
  $scope.budgetedToolmk = [];
  $scope.MaterialGrades = [];
  $scope.setArr = [];
  $scope.excelDataArray = [];
  $scope.gridOptions = {};
  $scope.gridOptions.enableColumnMenus = false;
  $scope.gridOptions.enableSorting = false;
  $scope.cmm = cmm;
  $scope.cmm.label = 'A';
  $scope.funcRun = 0;

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.gridOptions2 = {
    enableColResize: true,
    headerHeight: 40,
    rowHeight: 40,
    pagination: true,
    paginationPageSize: 10,
    defaultColDef: {
      sortable: true,
      resizable: true
    },
    columnDefs: [{
      headerName: "S.No",
      width: 80,
      cellStyle: changeRowColor,
      cellRenderer: function cellRenderer(params) {
        return parseInt(params.node.id) + 1;
      }
    }, {
      headerName: "Part Number",
      field: "PART_NUMBER",
      cellStyle: changeRowColor
    }, {
      headerName: "Nomenclature",
      field: "PART_NAME",
      cellStyle: changeRowColor
    }, {
      headerName: "Budgated Toolmaker",
      field: "BUDGETED_TOOLMAKER",
      cellStyle: changeRowColor
    }, {
      headerName: "Blanking Die",
      field: "NO_OF_DIES_BLANKINGDIE",
      cellStyle: changeRowColor,
      singleClickEdit: true,
      editable: true,
      cellRenderer: 'genderCellRenderer',
      cellRendererParams: function cellRendererParams(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            value: d.value,
            key: d.key
          };
        });

        return {
          params2: _t
        };
      },
      cellEditorSelector: function cellEditorSelector(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            text: d.value,
            value: d.key
          };
        });

        return {
          component: 'cellSelect',
          params: {
            values: _t
          }
        };
      }
    }, {
      headerName: "Die Budgeted ",
      field: "DIES_BUDGETED",
      cellStyle: changeRowColor,
      valueGetter: 'data.NO_OF_DIES_BLANKINGDIE',
      cellRenderer: function cellRenderer(params) {
        return 'test';
      }
    }],
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: CustomHeaderGroup,
      htmlText: htmlText,
      genderCellRenderer: CellRender,
      cellSelect: CellSelect
    }
  };

  function changeRowColor(params) {
    var key = _.keys(params.data).filter(function (d) {
      return d.match(/TOOLMAKER[0-9]/i);
    });

    for (var i = 0; i < key.length; i++) {
      if (Number(params.data.DIES_BUDGETED) > Number(params.data[key[i]].NODIES)) {
        return {
          backgroundColor: '#FFE8E8'
        };
      }
    }
  }

  $scope.$watchCollection('cmm.SaveTab', function (newValue, oldValue) {
    if (cmm.SaveTab == true) $scope.xlSave();
  }, true);

  $scope.changePrj = function (projectCode, panelGroup, bNum) {
    $scope.panelGroup = panelGroup;
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "NoOfDies",
        "panelGroup": panelGroup,
        "projectCode": projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": '',
        "baselineNum": bNum,
        "decimalPlace": '',
        "preferences": '',
        "ComparePref": '',
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        console.log($scope.gridOptions.data);
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);

        if ($scope.funcRun == 0) {
          $scope.colAdd($scope.gridOptions.data);
        }

        $.cordys.ajax({
          method: "GetToolMakersforCompair",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "projectCode": $scope.cmm.projectCode,
            "panelGroup": $scope.panelGroup
          },
          success: function success(data) {
            $scope.tmkdrp = $.cordys.json.findObjects(data, "ERFQ_TOOLMAKER_MASTER");
            $scope.toolmakerDropdown = [];

            for (var t = 0; t < $scope.tmkdrp.length; t++) {
              $scope.toolmakerDropdown.push($scope.tmkdrp[t]);
            }

            if (cmm.filtObj != null || cmm.filtObj != undefined) {
              $scope.filtObj = cmm.filtObj;
            }

            if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
              $scope.fillValue1($scope.filtObj.filterMG);
              $scope.fillValue2($scope.filtObj.filterBT);
              $scope.fillValue3($scope.filtObj.filterPG);

              if ($scope.toolmakerDropdown.length != 0) {
                var tk = cmm.filtObj.filtertmk;

                for (var t = 0; t < tk.length; t++) {
                  var a = tk[t];
                  $scope.toolmakerDropdown[a].selected1 = true;
                }
              }
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.error("Unable to load data. Please try refreshing the page.");
          }
        });
        $scope.makeHeader();
        $scope.settleData();
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.makeHeader = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "NoOfDies",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": '',
        "partNum": "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": '',
        "panelGrouping": '',
        "materialGrade": ''
      },
      success: function success(data) {
        $scope.gridOptions.data1 = $.cordys.json.findObjects(data, "COMPARISON");

        for (var i = 0; i < $scope.gridOptions.data1.length; i++) {
          $scope.callFunction1($scope.gridOptions.data1[i]);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.settleData = function () {
    if (cmm.filtObj != null || cmm.filtObj != undefined) {
      $scope.filtObj = cmm.filtObj;
    }

    if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
      $scope.fillValue1($scope.filtObj.filterMG);
      $scope.fillValue2($scope.filtObj.filterBT);
      $scope.fillValue3($scope.filtObj.filterPG);

      if ($scope.toolmakerDropdown.length != 0) {
        var tk = cmm.filtObj.filtertmk;

        for (var t = 0; t < tk.length; t++) {
          var a = tk[t];
          $scope.toolmakerDropdown[a].selected1 = true;
        }
      }

      $scope.tmkReq = $scope.filtObj.tmkReq;
      $scope.setArr = $scope.filtObj.setArr;
    }
  };

  $scope.fillValue1 = function (v1) {
    $scope.filterMG = v1;
  };

  $scope.fillValue2 = function (v1) {
    $scope.filterBT = v1;
  };

  $scope.fillValue3 = function (v1) {
    $scope.filterPG = v1;
  };

  $scope.adddrp = function (value1) {
    if ($scope.budgetedToolmk.length != 0) {
      for (var t = 0; t < $scope.budgetedToolmk.length; t++) {
        if ($scope.budgetedToolmk[t].value === value1.value) {
          return 1;
        }
      }
    } else {
      $scope.budgetedToolmk.push($scope.value);
      return 1;
    }
  };

  $scope.addMaterial = function (value2) {
    if ($scope.MaterialGrades.length != 0) {
      for (var t = 0; t < $scope.MaterialGrades.length; t++) {
        if ($scope.MaterialGrades[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.MaterialGrades.push(value2);
      return 1;
    }
  };

  $scope.addPaneldrp = function (value2) {
    if ($scope.PanelGrpDrpdwn.length != 0) {
      for (var t = 0; t < $scope.PanelGrpDrpdwn.length; t++) {
        if ($scope.PanelGrpDrpdwn[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.PanelGrpDrpdwn.push(value2);
      return 1;
    }
  };

  $scope.callFunction1 = function (obj) {
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key.startsWith("BUDGETED_TOOLMAKER")) {
          $scope.value = {
            value: obj[key]
          };
          var ret = 0;
          ret = $scope.adddrp($scope.value);

          if (ret == undefined || ret == 0) {
            $scope.budgetedToolmk.push($scope.value);
          }
        }

        if (key.startsWith("PART_GROUP")) {
          $scope.value1 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addPaneldrp($scope.value1);

          if (ret1 == undefined || ret1 == 0) {
            $scope.PanelGrpDrpdwn.push($scope.value1);
          }
        }

        if (key.startsWith("MATERIAL")) {
          $scope.value2 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addMaterial($scope.value2);

          if (ret1 == undefined || ret1 == 0) {
            $scope.MaterialGrades.push($scope.value2);
          }
        }
      }
    }
  };

  $scope.tmkReq = [];

  $scope.makeTmkArray = function (a) {
    debugger;
    console.log(a.TOOLMAKER_ID);

    if (a.selected1 == true) {
      $scope.tmkReq.push(a.TOOLMAKER_ID);
      var set = $scope.toolmakerDropdown.indexOf(a);
      $scope.setArr.push(set);
    }

    if (a.selected1 == false) {
      var indxOfObj = $scope.tmkReq.indexOf(a.TOOLMAKER_ID);
      $scope.tmkReq.splice(indxOfObj, 1);
      var set = $scope.toolmakerDropdown.indexOf(a);
      var s = $scope.setArr.indexOf(set);
      $scope.setArr.splice(s, 1);
    }
  };

  $scope.filter = function () {
    debugger;
    document.getElementById("myDropdown").classList.toggle("show");
    array = $scope.tmkReq;
    var flags = [],
        output = [],
        l = array.length,
        i;

    for (i = 0; i < l; i++) {
      if (flags[array[i]]) continue;
      flags[array[i]] = true;
      output.push(array[i]);
    }

    $scope.tmkReq = output;

    if ($scope.tmkReq.length > 0) {
      $scope.tmkarg = "";

      for (var i = 0; i < $scope.tmkReq.length; i++) {
        if ($scope.tmkarg != "") {
          $scope.tmkarg += ",";
        }

        $scope.tmkarg = $scope.tmkarg + "'" + $scope.tmkReq[i] + "'";
      }
    } else {
      $scope.tmkarg = '';
    }

    if ($scope.filterMG == undefined) {
      $scope.filterMG = '';
    }

    if ($scope.filterBT == undefined) {
      $scope.filterBT = '';
    }

    if ($scope.filterPG == undefined) {
      $scope.filterPG = '';
    }

    console.log($scope.filterMG);
    console.log($scope.filterBT);
    console.log($scope.filterPG);
    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.triggerRequest = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "NoOfDies",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        $scope.settleData();
        $scope.colAdd($scope.gridOptions.data);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.openDD = function () {
    document.getElementById("myDropdown").classList.toggle("show");
  };

  $scope.clearAllField = function () {
    $scope.filterMG = "";
    $scope.filterBT = "";
    $scope.setArr = [];
    $scope.filterPG = "";
    $scope.tmkarg = "";
    $scope.tmkReq = [];
    document.getElementById("myDropdown").classList.toggle("show");

    for (i = 0; i < $scope.toolmakerDropdown.length; i++) {
      if ($scope.toolmakerDropdown[i].selected1 != undefined && $scope.toolmakerDropdown[i].selected1 == true) {
        $scope.toolmakerDropdown[i].selected1 = false;
      }
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.xlDownload = function (arr, fileName) {
    function datenum(v, date1904) {
      if (date1904) v += 1462;
      var epoch = Date.parse(v);
      return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    }

    ;

    function getSheet(data, opts) {
      var ws = {};
      var range = {
        s: {
          c: 10000000,
          r: 10000000
        },
        e: {
          c: 0,
          r: 0
        }
      };

      for (var R = 0; R != data.length; ++R) {
        for (var C = 0; C != data[R].length; ++C) {
          if (range.s.r > R) range.s.r = R;
          if (range.s.c > C) range.s.c = C;
          if (range.e.r < R) range.e.r = R;
          if (range.e.c < C) range.e.c = C;
          var cell = {
            v: data[R][C]
          };
          if (cell.v == null) continue;
          var cell_ref = XLSX.utils.encode_cell({
            c: C,
            r: R
          });
          if (typeof cell.v === 'number') cell.t = 'n';else if (typeof cell.v === 'boolean') cell.t = 'b';else if (cell.v instanceof Date) {
            cell.t = 'n';
            cell.z = XLSX.SSF._table[14];
            cell.v = datenum(cell.v);
          } else cell.t = 's';
          ws[cell_ref] = cell;
        }
      }

      if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
      return ws;
    }

    ;

    function Workbook() {
      if (!(this instanceof Workbook)) return new Workbook();
      this.SheetNames = [];
      this.Sheets = {};
    }

    debugger;
    var wb = new Workbook(),
        ws = getSheet(arr);
    wb.SheetNames.push(fileName);
    wb.Sheets[fileName] = ws;
    var wbout = XLSX.write(wb, {
      bookType: 'xlsx',
      bookSST: true,
      type: 'binary'
    });

    function s2ab(s) {
      var buf = new ArrayBuffer(s.length);
      var view = new Uint8Array(buf);

      for (var i = 0; i != s.length; ++i) {
        view[i] = s.charCodeAt(i) & 0xFF;
      }

      return buf;
    }

    saveAs(new Blob([s2ab(wbout)], {
      type: "application/octet-stream"
    }), fileName + '.xlsx');
  };

  $scope.xl = function () {
    console.log($scope.gridOptions);
    var arrXl = [];
    arrXl.push(_.map($scope.gridOptions.columnDefs, 'displayName'));
  };

  $scope.xlSave = function () {
    console.log($scope.gridOptions);

    (function (_data) {
      console.log(_data);
      $.cordys.ajax({
        method: "UpdateErfqQuoteComparison",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          'tuple': _data
        },
        success: function success(data) {
          console.log("success");
          document.getElementById("revtab1").style.display = "";
          document.getElementById("revtab2").style.display = "none";
          document.getElementById("tab1").style.display = "";
          document.getElementById("tab2").style.display = "none";
          document.getElementById("dietab1").style.display = "";
          document.getElementById("dietab2").style.display = "none";
          document.getElementById("basictab1").style.display = "";
          document.getElementById("basictab2").style.display = "none";
          document.getElementById("landedtab1").style.display = "";
          document.getElementById("landedtab2").style.display = "none";
          document.getElementById("costtab1").style.display = "";
          document.getElementById("costtab2").style.display = "none";
          document.getElementById("besttab1").style.display = "";
          document.getElementById("besttab2").style.display = "none";
          document.getElementById("preftab1").style.display = "";
          document.getElementById("preftab2").style.display = "none";
          document.getElementById("targettab1").style.display = "";
          document.getElementById("targettab2").style.display = "none";
          document.getElementById("subtab1").style.display = "";
          document.getElementById("subtab2").style.display = "none";
          cmm.SaveTab = false;
          window.scrollTo(0, 0);
          toastr.success("Updated successfully!");
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log("jqXHR=>", jqXHR, "textStatus=>", textStatus, "errorThrown=>", errorThrown);
        }
      });
    })(_.map($scope.gridOptions.data, function (d) {
      if (d.COMPARISON_SEQ == "") {
        return {
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'PROJECT_CODE': cmm.projectCode,
              'PART_NUMBER': d.PART_NUMBER,
              'NO_OF_DIES_BLANKINGDIE': d.NO_OF_DIES_BLANKINGDIE,
              'DIE_WEIGHT_BLANKINGDIE': "Included",
              'BASIC_COST_BLANKINGDIE': "Included",
              'LANDED_COST_BLANKINGDIE': "Included",
              'COST_PER_TON_BLANKINGDIE': "Included",
              'PART_GROUP': $scope.cmm.label,
              'BASELINE_NUM': cmm.baslineNum
            }
          }
        };
      } else {
        return {
          "old": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ
            }
          },
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ,
              'NO_OF_DIES_BLANKINGDIE': d.NO_OF_DIES_BLANKINGDIE
            }
          }
        };
      }
    }));
  };

  $.cordys.ajax({
    method: "GetRoles",
    namespace: "http://schemas.cordys.com/1.0/ldap",
    parameters: {
      dn: "",
      depth: ""
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      debugger;
      $scope.roles1 = $.cordys.json.findObjects(e, "user");

      for (var i = 0; i < $scope.roles1[0].role.length; i++) {
        $scope.CordysRole = $scope.CordysRole + "," + $scope.roles1[0].role[i].description;
      }

      if ($scope.CordysRole.includes("MSIE")) {
        console.log("MSIE");
        $scope.CurrentRole = "MSIE";
      }

      if ($scope.CordysRole.includes("Stamping Lead")) {
        console.log("Stamping Lead");
        $scope.CurrentRole = "Stamping Lead";
      }

      if ($scope.CordysRole.includes("Asset Manager")) {
        console.log("Asset Manager");
        $scope.CurrentRole = "Asset Manager";
      }
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });
  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    if (newValue.projectCode != oldValue.projectCode || newValue.label != oldValue.label) $scope.changePrj(newValue.projectCode, newValue.label, cmm.baslineNum);
  }, true);

  $scope._init = function () {};

  $scope.budgetedCH = function (row) {
    if (row.entity.NO_OF_DIES_BLANKINGDIE == "Excluded") {
      row.entity = row.entity;
    }

    document.getElementById("revtab1").style.display = "none";
    document.getElementById("revtab2").style.display = "";
    document.getElementById("dietab1").style.display = "none";
    document.getElementById("dietab2").style.display = "";
    document.getElementById("basictab1").style.display = "none";
    document.getElementById("basictab2").style.display = "";
    document.getElementById("landedtab1").style.display = "none";
    document.getElementById("landedtab2").style.display = "";
    document.getElementById("costtab1").style.display = "none";
    document.getElementById("costtab2").style.display = "";
    document.getElementById("besttab1").style.display = "none";
    document.getElementById("besttab2").style.display = "";
    document.getElementById("preftab1").style.display = "none";
    document.getElementById("preftab2").style.display = "";
    document.getElementById("targettab1").style.display = "none";
    document.getElementById("targettab2").style.display = "";
    document.getElementById("subtab1").style.display = "none";
    document.getElementById("subtab2").style.display = "";
  };

  $scope._init();

  if ($scope.cmm.projectCode == undefined) toastr.warning("Select ProjectCode");else $scope.changePrj($scope.cmm.projectCode, $scope.cmm.label, cmm.baslineNum);

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.openFilterBox = function () {
    document.getElementById("filterBtn").style.backgroundColor = "#24c0c0";
  };

  $scope.downloadFile = function (grid, row, key) {
    if (row.entity.NO_OF_DIES_BLANKINGDIE == 'Included') {
      row.entity[key].selected = 'IN_NODIES';
      return row.entity[key].IN_NODIES;
    }

    if (row.entity.NO_OF_DIES_BLANKINGDIE == 'Excluded') {
      row.entity[key].selected = 'EX_NODIES';
      return row.entity[key].EX_NODIES;
    }
  };

  $scope.downloadFileOut = function (grid, row) {
    if (row.entity.NO_OF_DIES_BLANKINGDIE == 'Included') {
      return Number(row.entity.IN_DIES_BUDGETED);
    }

    if (row.entity.NO_OF_DIES_BLANKINGDIE == 'Excluded') {
      return Number(row.entity.EX_DIES_BUDGETED);
    }
  };

  $scope.colAdd = function (data) {
    var key = _.keys(data[0]).filter(function (d) {
      return d.match(/TOOLMAKER[0-9]/i);
    });

    for (var i = 0; i < key.length; i++) {
      $scope.gridOptions2.columnDefs.push({
        headerName: data[0][key[i]].TOOLMAKERNAME,
        field: key[i] + ".NODIES",
        cellStyle: changeRowColor,
        valueGetter: 'data.NO_OF_DIES_BLANKINGDIE',
        cellRenderer: function cellRenderer(params) {
          var obj = _.keys(params.data).filter(function (dd) {
            return dd.match(/^TOOLMAKER/i);
          }).map(function (dd) {
            return params.data[dd];
          }).filter(function (dd) {
            return dd.TOOLMAKERNAME == params.colDef.headerName;
          });

          var field = _.at(params.data, params.colDef.field);

          if (params.data.NO_OF_DIES_BLANKINGDIE == "Excluded") {
            field = obj[0].EX_NODIES;
            return obj[0].EX_NODIES;
          } else {
            field = obj[0].IN_NODIES;
            return obj[0].IN_NODIES;
          }
        }
      });
    }

    $scope.gridOptions2.api.setColumnDefs($scope.gridOptions2.columnDefs);
    $scope.funcRun += 1;
  };

  $scope.xl = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": false,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions2.api.exportDataAsCsv(params);
  };
}).filter('mapGender', function () {
  var genderHash = {
    'Included': 'Included',
    'Excluded': 'Excluded'
  };
  return function (input) {
    if (!input) {
      return '';
    } else {
      return genderHash[input];
    }
  };
});
"use strict";

angular.module('App.quoteComparisionCtrl').controller('noOfDiesCtrl', function ($scope, Upload, $window, $log, $state, NgTableParams, cmm) {
  console.log("cmm=>", cmm);
  $scope.data = {};
  $scope.toolmakerDropdown = [];
  $scope.PanelGrpDrpdwn = [];
  $scope.budgetedToolmk = [];
  $scope.MaterialGrades = [];
  $scope.setArr = [];
  $scope.excelDataArray = [];
  $scope.gridOptions = {};
  $scope.gridOptions.enableColumnMenus = false;
  $scope.gridOptions.enableSorting = false;
  $scope.cmm = cmm;
  $scope.cmm.label = 'A';
  $scope.funcRun = 0;

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.gridOptions2 = {
    enableColResize: true,
    headerHeight: 40,
    rowHeight: 40,
    pagination: true,
    paginationPageSize: 10,
    defaultColDef: {
      sortable: true,
      resizable: true
    },
    columnDefs: [{
      headerName: "S.No",
      width: 80,
      cellStyle: changeRowColor,
      cellRenderer: function cellRenderer(params) {
        return parseInt(params.node.id) + 1;
      }
    }, {
      headerName: "Part Number",
      field: "PART_NUMBER",
      cellStyle: changeRowColor
    }, {
      headerName: "Nomenclature",
      field: "PART_NAME",
      cellStyle: changeRowColor
    }, {
      headerName: "Budgated Toolmaker",
      field: "BUDGETED_TOOLMAKER",
      cellStyle: changeRowColor
    }, {
      headerName: "Blanking Die",
      field: "NO_OF_DIES_BLANKINGDIE",
      cellStyle: changeRowColor,
      singleClickEdit: true,
      editable: true,
      cellRenderer: 'genderCellRenderer',
      cellRendererParams: function cellRendererParams(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            value: d.value,
            key: d.key
          };
        });

        return {
          params2: _t
        };
      },
      cellEditorSelector: function cellEditorSelector(params) {
        var _t = _.map([{
          key: "Select",
          value: "Select"
        }, {
          key: "Included",
          value: "Included"
        }, {
          key: "Excluded",
          value: "Excluded"
        }], function (d) {
          return {
            text: d.value,
            value: d.key
          };
        });

        return {
          component: 'cellSelect',
          params: {
            values: _t
          }
        };
      }
    }, {
      headerName: "Die Budgeted ",
      field: "DIES_BUDGETED",
      cellStyle: changeRowColor,
      valueGetter: 'data.NO_OF_DIES_BLANKINGDIE',
      cellRenderer: function cellRenderer(params) {
        if (params.data.NO_OF_DIES_BLANKINGDIE == "Excluded") return params.data.EX_DIES_BUDGETED;else return params.data.IN_DIES_BUDGETED;
      }
    }],
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: CustomHeaderGroup,
      htmlText: htmlText,
      genderCellRenderer: CellRender,
      cellSelect: CellSelect
    }
  };

  function changeRowColor(params) {
    var key = _.keys(params.data).filter(function (d) {
      return d.match(/TOOLMAKER[0-9]/i);
    });

    for (var i = 0; i < key.length; i++) {
      if (Number(params.data.DIES_BUDGETED) > Number(params.data[key[i]].NODIES)) {
        return {
          backgroundColor: '#FFE8E8'
        };
      }
    }
  }

  $scope.$watchCollection('cmm.SaveTab', function (newValue, oldValue) {
    if (cmm.SaveTab == true) $scope.xlSave();
  }, true);

  $scope.changePrj = function (projectCode, panelGroup, bNum) {
    $scope.panelGroup = panelGroup;
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "NoOfDies",
        "panelGroup": panelGroup,
        "projectCode": projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": bNum,
        "decimalPlace": '',
        "preferences": '',
        "ComparePref": '',
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        console.log("No Of Dies :", $scope.gridOptions.data);
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);

        if ($scope.funcRun == 0) {
          $scope.colAdd($scope.gridOptions.data);
        }

        $.cordys.ajax({
          method: "GetToolMakersforCompair",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "projectCode": $scope.cmm.projectCode,
            "panelGroup": $scope.panelGroup
          },
          success: function success(data) {
            $scope.tmkdrp = $.cordys.json.findObjects(data, "ERFQ_TOOLMAKER_MASTER");
            $scope.toolmakerDropdown = [];

            for (var t = 0; t < $scope.tmkdrp.length; t++) {
              $scope.toolmakerDropdown.push($scope.tmkdrp[t]);
            }

            if (cmm.filtObj != null || cmm.filtObj != undefined) {
              $scope.filtObj = cmm.filtObj;
            }

            if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
              $scope.fillValue1($scope.filtObj.filterMG);
              $scope.fillValue2($scope.filtObj.filterBT);
              $scope.fillValue3($scope.filtObj.filterPG);

              if ($scope.toolmakerDropdown.length != 0) {
                var tk = cmm.filtObj.filtertmk;

                for (var t = 0; t < tk.length; t++) {
                  var a = tk[t];
                  $scope.toolmakerDropdown[a].selected1 = true;
                }
              }
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.error("Unable to load data. Please try refreshing the page.");
          }
        });
        $scope.makeHeader();
        $scope.settleData();
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.makeHeader = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "NoOfDies",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": '',
        "panelGrouping": '',
        "materialGrade": ''
      },
      success: function success(data) {
        $scope.gridOptions.data1 = $.cordys.json.findObjects(data, "COMPARISON");

        for (var i = 0; i < $scope.gridOptions.data1.length; i++) {
          $scope.callFunction1($scope.gridOptions.data1[i]);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.settleData = function () {
    if (cmm.filtObj != null || cmm.filtObj != undefined) {
      $scope.filtObj = cmm.filtObj;
    }

    if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
      $scope.fillValue1($scope.filtObj.filterMG);
      $scope.fillValue2($scope.filtObj.filterBT);
      $scope.fillValue3($scope.filtObj.filterPG);

      if ($scope.toolmakerDropdown.length != 0) {
        var tk = cmm.filtObj.filtertmk;

        for (var t = 0; t < tk.length; t++) {
          var a = tk[t];
          $scope.toolmakerDropdown[a].selected1 = true;
        }
      }

      $scope.tmkReq = $scope.filtObj.tmkReq;
      $scope.setArr = $scope.filtObj.setArr;
    }
  };

  $scope.fillValue1 = function (v1) {
    $scope.filterMG = v1;
  };

  $scope.fillValue2 = function (v1) {
    $scope.filterBT = v1;
  };

  $scope.fillValue3 = function (v1) {
    $scope.filterPG = v1;
  };

  $scope.adddrp = function (value1) {
    if ($scope.budgetedToolmk.length != 0) {
      for (var t = 0; t < $scope.budgetedToolmk.length; t++) {
        if ($scope.budgetedToolmk[t].value === value1.value) {
          return 1;
        }
      }
    } else {
      $scope.budgetedToolmk.push($scope.value);
      return 1;
    }
  };

  $scope.addMaterial = function (value2) {
    if ($scope.MaterialGrades.length != 0) {
      for (var t = 0; t < $scope.MaterialGrades.length; t++) {
        if ($scope.MaterialGrades[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.MaterialGrades.push(value2);
      return 1;
    }
  };

  $scope.addPaneldrp = function (value2) {
    if ($scope.PanelGrpDrpdwn.length != 0) {
      for (var t = 0; t < $scope.PanelGrpDrpdwn.length; t++) {
        if ($scope.PanelGrpDrpdwn[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.PanelGrpDrpdwn.push(value2);
      return 1;
    }
  };

  $scope.callFunction1 = function (obj) {
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key.startsWith("BUDGETED_TOOLMAKER")) {
          $scope.value = {
            value: obj[key]
          };
          var ret = 0;
          ret = $scope.adddrp($scope.value);

          if (ret == undefined || ret == 0) {
            $scope.budgetedToolmk.push($scope.value);
          }
        }

        if (key.startsWith("PART_GROUP")) {
          $scope.value1 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addPaneldrp($scope.value1);

          if (ret1 == undefined || ret1 == 0) {
            $scope.PanelGrpDrpdwn.push($scope.value1);
          }
        }

        if (key.startsWith("MATERIAL")) {
          $scope.value2 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addMaterial($scope.value2);

          if (ret1 == undefined || ret1 == 0) {
            $scope.MaterialGrades.push($scope.value2);
          }
        }
      }
    }
  };

  $scope.tmkReq = [];

  $scope.makeTmkArray = function (a) {
    debugger;
    console.log(a.TOOLMAKER_ID);

    if (a.selected1 == true) {
      $scope.tmkReq.push(a.TOOLMAKER_ID);
      var set = $scope.toolmakerDropdown.indexOf(a);
      $scope.setArr.push(set);
    }

    if (a.selected1 == false) {
      var indxOfObj = $scope.tmkReq.indexOf(a.TOOLMAKER_ID);
      $scope.tmkReq.splice(indxOfObj, 1);
      var set = $scope.toolmakerDropdown.indexOf(a);
      var s = $scope.setArr.indexOf(set);
      $scope.setArr.splice(s, 1);
    }
  };

  $scope.filter = function () {
    debugger;
    document.getElementById("myDropdown").classList.toggle("show");
    array = $scope.tmkReq;
    var flags = [],
        output = [],
        l = array.length,
        i;

    for (i = 0; i < l; i++) {
      if (flags[array[i]]) continue;
      flags[array[i]] = true;
      output.push(array[i]);
    }

    $scope.tmkReq = output;

    if ($scope.tmkReq.length > 0) {
      $scope.tmkarg = "";

      for (var i = 0; i < $scope.tmkReq.length; i++) {
        if ($scope.tmkarg != "") {
          $scope.tmkarg += ",";
        }

        $scope.tmkarg = $scope.tmkarg + "'" + $scope.tmkReq[i] + "'";
      }
    } else {
      $scope.tmkarg = '';
    }

    if ($scope.filterMG == undefined) {
      $scope.filterMG = '';
    }

    if ($scope.filterBT == undefined) {
      $scope.filterBT = '';
    }

    if ($scope.filterPG == undefined) {
      $scope.filterPG = '';
    }

    console.log($scope.filterMG);
    console.log($scope.filterBT);
    console.log($scope.filterPG);
    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.triggerRequest = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "NoOfDies",
        "panelGroup": $scope.panelGroup,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        $scope.settleData();
        $scope.colAdd($scope.gridOptions.data);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.openDD = function () {
    document.getElementById("myDropdown").classList.toggle("show");
  };

  $scope.clearAllField = function () {
    $scope.filterMG = "";
    $scope.filterBT = "";
    $scope.setArr = [];
    $scope.filterPG = "";
    $scope.tmkarg = "";
    $scope.tmkReq = [];
    document.getElementById("myDropdown").classList.toggle("show");

    for (i = 0; i < $scope.toolmakerDropdown.length; i++) {
      if ($scope.toolmakerDropdown[i].selected1 != undefined && $scope.toolmakerDropdown[i].selected1 == true) {
        $scope.toolmakerDropdown[i].selected1 = false;
      }
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.xl = function () {
    console.log($scope.gridOptions);
    var arrXl = [];
    arrXl.push(_.map($scope.gridOptions.columnDefs, 'displayName'));
  };

  $.cordys.ajax({
    method: "GetRoles",
    namespace: "http://schemas.cordys.com/1.0/ldap",
    parameters: {
      dn: "",
      depth: ""
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      debugger;
      $scope.roles1 = $.cordys.json.findObjects(e, "user");

      for (var i = 0; i < $scope.roles1[0].role.length; i++) {
        $scope.CordysRole = $scope.CordysRole + "," + $scope.roles1[0].role[i].description;
      }

      if ($scope.CordysRole.includes("MSIE")) {
        console.log("MSIE");
        $scope.CurrentRole = "MSIE";
      }

      if ($scope.CordysRole.includes("Stamping Lead")) {
        console.log("Stamping Lead");
        $scope.CurrentRole = "Stamping Lead";
      }

      if ($scope.CordysRole.includes("Asset Manager")) {
        console.log("Asset Manager");
        $scope.CurrentRole = "Asset Manager";
      }
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });
  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    if (newValue.projectCode != oldValue.projectCode || newValue.label != oldValue.label) $scope.changePrj(newValue.projectCode, newValue.label, cmm.baslineNum);
  }, true);

  $scope._init = function () {};

  $scope.budgetedCH = function (row) {
    if (row.entity.NO_OF_DIES_BLANKINGDIE == "Excluded") {
      row.entity = row.entity;
    }

    document.getElementById("revtab1").style.display = "none";
    document.getElementById("revtab2").style.display = "";
    document.getElementById("dietab1").style.display = "none";
    document.getElementById("dietab2").style.display = "";
    document.getElementById("basictab1").style.display = "none";
    document.getElementById("basictab2").style.display = "";
    document.getElementById("landedtab1").style.display = "none";
    document.getElementById("landedtab2").style.display = "";
    document.getElementById("costtab1").style.display = "none";
    document.getElementById("costtab2").style.display = "";
    document.getElementById("besttab1").style.display = "none";
    document.getElementById("besttab2").style.display = "";
    document.getElementById("preftab1").style.display = "none";
    document.getElementById("preftab2").style.display = "";
    document.getElementById("targettab1").style.display = "none";
    document.getElementById("targettab2").style.display = "";
    document.getElementById("subtab1").style.display = "none";
    document.getElementById("subtab2").style.display = "";
  };

  $scope._init();

  if ($scope.cmm.projectCode == undefined) toastr.warning("Select ProjectCode");else $scope.changePrj($scope.cmm.projectCode, $scope.cmm.label, cmm.baslineNum);

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.openFilterBox = function () {
    document.getElementById("filterBtn").style.backgroundColor = "#24c0c0";
  };

  $scope.colAdd = function (data) {
    var key = _.keys(data[0]).filter(function (d) {
      return d.match(/TOOLMAKER[0-9]/i);
    });

    for (var i = 0; i < key.length; i++) {
      $scope.gridOptions2.columnDefs.push({
        headerName: data[0][key[i]].TOOLMAKERNAME,
        field: key[i] + ".NODIES",
        cellStyle: changeRowColor,
        valueGetter: 'data.NO_OF_DIES_BLANKINGDIE',
        cellRenderer: function cellRenderer(params) {
          var obj = _.keys(params.data).filter(function (dd) {
            return dd.match(/^TOOLMAKER/i);
          }).map(function (dd) {
            return params.data[dd];
          }).filter(function (dd) {
            return dd.TOOLMAKERNAME == params.colDef.headerName;
          });

          if (params.data.NO_OF_DIES_BLANKINGDIE == "Excluded") return obj[0].EX_NODIES;else return obj[0].IN_NODIES;
        }
      });
    }

    $scope.gridOptions2.api.setColumnDefs($scope.gridOptions2.columnDefs);
    $scope.funcRun += 1;
  };

  $scope.xl = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": false,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions2.api.exportDataAsCsv(params);
  };

  $scope.xlSave = function () {
    console.log("no of dies save Data:", $scope.gridOptions.data);

    (function (_data) {
      console.log(_data);
      $.cordys.ajax({
        method: "UpdateErfqQuoteComparison",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          'tuple': _data
        },
        success: function success(data) {
          console.log("success");
          document.getElementById("revtab1").style.display = "";
          document.getElementById("tab1").style.display = "";
          document.getElementById("dietab1").style.display = "";
          document.getElementById("basictab1").style.display = "";
          document.getElementById("landedtab1").style.display = "";
          document.getElementById("costtab1").style.display = "";
          document.getElementById("besttab1").style.display = "";
          document.getElementById("preftab1").style.display = "";
          document.getElementById("targettab1").style.display = "";
          document.getElementById("subtab1").style.display = "";
          cmm.SaveTab = false;
          window.scrollTo(0, 0);
          toastr.success("Updated successfully!");
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log("jqXHR=>", jqXHR, "textStatus=>", textStatus, "errorThrown=>", errorThrown);
        }
      });
    })(_.map($scope.gridOptions2.data, function (d) {
      if (d.COMPARISON_SEQ == "") {
        return {
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'PROJECT_CODE': cmm.projectCode,
              'PART_NUMBER': d.PART_NUMBER,
              'NO_OF_DIES_BLANKINGDIE': d.NO_OF_DIES_BLANKINGDIE,
              'DIE_WEIGHT_BLANKINGDIE': "Included",
              'BASIC_COST_BLANKINGDIE': "Included",
              'LANDED_COST_BLANKINGDIE': "Included",
              'COST_PER_TON_BLANKINGDIE': "Included",
              'PART_GROUP': $scope.cmm.label,
              'BASELINE_NUM': cmm.baslineNum
            }
          }
        };
      } else {
        return {
          "old": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ
            }
          },
          "new": {
            'ERFQ_QUOTE_COMPARISON': {
              'COMPARISON_SEQ': d.COMPARISON_SEQ,
              'NO_OF_DIES_BLANKINGDIE': d.NO_OF_DIES_BLANKINGDIE
            }
          }
        };
      }
    }));
  };
}).filter('mapGender', function () {
  var genderHash = {
    'Included': 'Included',
    'Excluded': 'Excluded'
  };
  return function (input) {
    if (!input) {
      return '';
    } else {
      return genderHash[input];
    }
  };
});
'use strict';

angular.module('App.mainApp').controller('panelGroupingCtrl', function ($scope, Upload, $timeout, $window, $uibModal, $log, $document, $state, uiGridConstants, $compile) {
  var vm = this;
  vm.data = {};
  $scope.ssaveFlag = false;
  vm.respArr = [];
  $scope.fileName = 'report_' + new Date().toISOString();
  $scope.exportData = [];

  $scope["export"] = function () {
    var myElement = angular.element(document.querySelectorAll(".custom-csv-link-location"));
    $scope.gridApi.exporter.csvExport("ALL", "ALL", myElement);
  };

  if (localStorage.role != 'MSIE') {
    $state.go('main');
  }

  vm.ssave = function () {
    var dd = [];

    for (var d in $scope.gridOptions.data) {
      var z = Object.keys($scope.gridOptions.data[d]).filter(function (d) {
        return d.match(/GROUP/i);
      }).map(function (x) {
        $scope.gridOptions.data[d][x].grp = x;
        $scope.gridOptions.data[d][x].PART_NUMBER = $scope.gridOptions.data[d].PART_NUMBER;
        return $scope.gridOptions.data[d][x];
      });
      dd = dd.concat(z);
    }

    var req = dd.map(function (d) {
      if (d.PART_ID) {
        return {
          "old": {
            "ERFQ_PART_GROUP": {
              "PART_ID": d.PART_ID
            }
          },
          "new": {
            "ERFQ_PART_GROUP": {
              "PART_ID": d.PART_ID,
              "PROJECT_CODE": vm.data.pass.ProjectCode,
              "PART_GROUP_NO": d.grp == 'PartGroup' ? "GROUP" + (Number($scope.keys.length) + 1) : d.grp,
              "PART_VALUE": d.VALUE
            }
          }
        };
      } else {
        return {
          "new": {
            "ERFQ_PART_GROUP": {
              "PART_NUMBER": d.PART_NUMBER,
              "PROJECT_CODE": vm.data.pass.ProjectCode,
              "E_BOM_REVISION": vm.selectedItem.value,
              "PART_GROUP_NO": "GROUP" + (Number($scope.keys.length) + 1),
              "PART_VALUE": d.VALUE,
              "STATUS": "Panel Grouping"
            }
          }
        };
      }
    });
    console.log("req=>", JSON.stringify(req));
    $.cordys.ajax({
      method: "UpdateErfqPartGroup",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": req
      },
      success: function success(data) {
        $scope.respArr = $.cordys.json.findObjects(data, "TABLE");
        $scope.gridOptions.columnDefs = [];
        $scope.$apply();
        $scope.changechange({}, {}, vm.selectedItem.value);
        setTimeout(function () {
          $scope.ssaveFlag = false;
          $scope.$apply();
        }, 2000);
        toastr.success("Saved successfully!");
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        $scope.changechange({}, {}, vm.selectedItem.value);
        setTimeout(function () {
          $scope.ssaveFlag = false;
          $scope.$apply();
        }, 2000);
      }
    });
  };

  if (localStorage.projectCode != undefined) {
    if (localStorage.projectCode && JSON.parse(localStorage.projectCode).dataFlag == 'IE') {
      toastr.warning("Plz Select Other Project Code");
      $state.go('mainApp.ProjectRequirement');
    }

    if (localStorage.projectCode && JSON.parse(localStorage.projectCode).ProjectCode) vm.data.pass = JSON.parse(localStorage.projectCode);else {
      toastr.warning("Select Project Code");
      $state.go('mainApp.ProjectRequirement');
    }
    $.cordys.ajax({
      method: "GetERFQListofEbomRev",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        ProjectCode: vm.data.pass.ProjectCode
      },
      success: function success(data) {
        vm.arr = $.cordys.json.findObjects(data, "getERFQListofEbomRev")[0].getERFQListofEbomRev;
        console.log("arr=>", vm.arr);
        vm.arr = vm.arr.split(",").map(function (d) {
          return {
            "label": d,
            value: d
          };
        });
        console.log("arr=>", vm.arr);
        vm.selectedItem = _.filter(vm.arr, function (d) {
          return Number(d.value) == _.max(_.map(vm.arr, function (d) {
            return Number(d.value);
          }));
        })[0];
        $scope.changechange({}, {}, vm.selectedItem.value);
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  }

  $scope.animationsEnabled = true;

  $scope.contentTypeForImage = function (ext) {
    var arr = ext.split(".");
    ext = arr[arr.length - 1];
    if (ext == 'jpg') return 'image/jpg';else if (ext == 'png') return 'image/png';else if (ext == 'jpeg') return 'image/jpeg';else if (ext == 'docx') return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';else if (ext == 'doc') return 'application/msword';else if (ext == 'txt') return 'text/plain';else if (ext == 'pdf') return 'application/pdf';else if (ext == 'xls' || ext == 'xlsx') return 'application/vnd.ms-excel';else if (ext == 'xsd' || ext == 'XSD') return 'application/octet-stream';else if (ext == 'igs' || ext == 'IGS') return 'application/octet-stream';else if (ext == '3DXML' || ext == '3dxml') return 'application/octet-stream';else if (ext == 'IGES' || ext == 'iges') return 'application/octet-stream';else if (ext == 'xml' || ext == 'XML') return 'text/xml';
  };

  $scope.downloadFile = function (grid, myRow) {
    $.cordys.ajax({
      method: "DownloadERFQDocs",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        fileName: myRow.entity.DOCUMENT_PATH
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        if (e.tuple.old != undefined) {
          $scope.base64EncodedFileObj = e.tuple.old.downloadERFQDocs;
          $scope.base64EncodedFile = e.tuple.old.downloadERFQDocs.downloadERFQDocs;
          var mimeType = $scope.contentTypeForImage(myRow.entity.DOCUMENT_NAME);
          var dlnk = document.getElementById("dwnldLnk");

          if (mimeType != undefined) {
            dlnk.href = 'data:' + mimeType + ';base64,' + $scope.base64EncodedFile;
            dlnk.download = myRow.entity.DOCUMENT_NAME;
          } else dlnk.href = 'data:application/octet-stream;base64,' + $scope.base64EncodedFile;

          dlnk.click();
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        alert("Error in loading data");
      }
    });
    console.log("download file=>", myRow.entity);
  };

  $scope.uploadGrid = function (grid, myRow) {
    if (myRow.entity.STATUS != 'Submitted') return true;else return false;
  };

  $scope.downloadGrid = function (grid, myRow) {
    if (myRow.entity.DOCUMENT_ID) return 1;else return 0;
  };

  $scope.cumulative = function (grid, myRow) {
    $scope.selectedRow = myRow.entity;
  };

  $scope.animationsEnabled = true;

  $scope._next = function (size, parentSelector) {};

  function color(grid, row, col, rowRenderIndex, colRenderIndex) {
    if (row.entity.DELETED_DATA == "0" && row.entity.STATUS == "Submitted") return 'green';
    if (row.entity.DELETED_DATA == "0" && row.entity.STATUS == "") return 'white';
    if (row.entity.DELETED_DATA == "1") return 'red';
  }

  function colordrop(grid, row, col, rowRenderIndex, colRenderIndex) {
    var str = col.colDef.name;
    str = str.replace(/\s/g, '');
    window.setTimeout(function () {
      if (row.entity.STATUS == "Submitted") {
        $("." + str).attr("disabled", true);
      }
    }, 500);
    if (row.entity.DELETED_DATA == "0" && row.entity.STATUS == "Submitted") return 'greend';
    if (row.entity.DELETED_DATA == "0" && row.entity.STATUS == "") return 'whited';
    if (row.entity.DELETED_DATA == "1") return 'redd';
  }

  function redimp(grid, row, col, rowRenderIndex, colRenderIndex) {
    if (row.entity.DELETED_DATA == "1") return 'redd';
  }

  $scope.aChange = function (grid, row, status) {
    console.log("grid=>", grid);
    console.log("row=>", row);
    console.log("status=>", status);

    _.keys(row.entity).filter(function (d) {
      return d.match(/GROUP[0-9]/i);
    }).forEach(function (d) {
      if (row.entity[d].VALUE == row.entity['PartGroup'].VALUE) {
        console.log("alredy selected");
        toastr.error("Already Selected");
        row.entity['PartGroup'].VALUE = "";
      }
    });
  };

  $scope.tableCol = {
    "PART_NUMBER": {
      value: 1,
      coldef: {
        srt: 1,
        enableCellEdit: false,
        enableColumnMenu: false,
        name: 'Part Number',
        field: 'PART_NUMBER',
        enablePinning: true,
        pinnedLeft: true,
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellClass: color,
        visible: true
      }
    },
    "EBOM_REV": {
      value: 2,
      coldef: {
        srt: 2,
        enableCellEdit: false,
        enableColumnMenu: false,
        name: 'Revision',
        field: 'PART_REV',
        enablePinning: true,
        pinnedLeft: true,
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        hidePinLeft: false,
        hidePinRight: false,
        cellClass: color,
        visible: true
      }
    },
    "PART_NAME": {
      value: 3,
      coldef: {
        srt: 1,
        enableCellEdit: false,
        enableColumnMenu: false,
        name: 'Nomenclature',
        field: 'PART_NAME',
        enablePinning: true,
        pinnedLeft: true,
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellClass: color,
        visible: true
      }
    },
    "SOURCE": {
      value: 3,
      coldef: {
        srt: 4,
        enableCellEdit: false,
        enableColumnMenu: false,
        name: 'Source',
        field: 'SOURCE',
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellClass: color,
        visible: true
      }
    },
    "CATEGORY": {
      value: 4,
      coldef: {
        srt: 4,
        enableCellEdit: false,
        enableColumnMenu: false,
        name: 'Part Category',
        field: 'CATEGORY',
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellClass: color,
        visible: true
      }
    },
    "CAD_THICKNESS": {
      value: 5,
      coldef: {
        srt: 5,
        enableCellEdit: false,
        enableColumnMenu: false,
        name: 'CAD Thickness',
        displayName: "CAD Thickness",
        field: "CAD_THICKNESS",
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellClass: color,
        visible: true
      }
    },
    "DIE_WEIGHT": {
      value: 5,
      coldef: {
        srt: 5,
        enableCellEdit: false,
        enableColumnMenu: false,
        name: 'Die Weight',
        field: "DIE_WEIGHT",
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellClass: color,
        visible: true
      }
    },
    "CAD_DATA": {
      value: 6,
      coldef: {
        srt: 98,
        enableCellEdit: false,
        enableColumnMenu: false,
        name: 'CAD Data',
        displayName: "CAD Data",
        field: 'DOCUMENT_NAME',
        cellTemplate: '<ins><a class="ml-2" ng-if="grid.appScope.downloadGrid(grid, row)"  ng-click="grid.appScope.downloadFile(grid, row)">{{row.entity.DOCUMENT_NAME}}</a></ins><i ng-if="grid.appScope.uploadGrid(grid, row)" class="ml-2 fas fa-file-upload" data-toggle="modal" data-target="#myModal" ng-click="grid.appScope.cumulative(grid, row)" ></i>',
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellClass: color,
        visible: true
      }
    },
    "NO_OF_DIES": {
      value: 8,
      coldef: {
        srt: 7,
        enableColumnMenu: false,
        enableCellEdit: false,
        name: 'No. of Dies',
        field: 'NO_OF_DIES',
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellClass: color,
        visible: true
      }
    },
    "PART_GROUP": {
      value: 10,
      coldef: {
        srt: 1000,
        enableColumnMenu: false,
        cellClass: redimp,
        visible: true,
        name: 'Part Group',
        field: 'PartGroup.VALUE',
        width: '*',
        minWidth: 200,
        maxWidth: 2000,
        cellTemplate: "<div>\n        <div ng-if=\"row.entity.CATEGORY=='A'\">\n            <select ng-change=\"grid.appScope.aChange(grid, row,'A')\" ng-disabled=\"row.entity.DELETED_DATA == 1\" class=\"redd\" style=\"width:100%;height:100%;border:none;\" ng-model=\"row.entity.PartGroup.VALUE\">\n                <option>A1</option>\n                <option>A2</option>\n                <option>A3</option>\n                <option>A4</option>\n                <option>A5</option>\n                <option>A6</option>\n                <option>A7</option>\n                <option>A8</option>\n                <option>A9</option>\n                <option>A10</option>\n                <option>A11</option>\n                <option>A12</option>\n                <option>A13</option>\n                <option>A14</option>\n                <option>A15</option>\n            </select>\n        </div>\n        <div ng-if=\"row.entity.CATEGORY=='B'\">\n            <select ng-change=\"grid.appScope.aChange(grid, row,'B')\" ng-disabled=\"row.entity.DELETED_DATA == 1\" class=\"redd\" style=\"width:100%;height:100%;border:none;\" ng-model=\"row.entity.PartGroup.VALUE\">\n                <option>B1</option>\n                <option>B2</option>\n                <option>B3</option>\n                <option>B4</option>\n                <option>B5</option>\n                <option>B6</option>\n                <option>B7</option>\n                <option>B8</option>\n                <option>B9</option>\n                <option>B10</option>\n                <option>B11</option>\n                <option>B12</option>\n                <option>B13</option>\n                <option>B14</option>\n                <option>B15</option>\n            </select>\n        </div>\n    </div>"
      }
    }
  };
  $scope.temp_gridOptions = {
    enableSorting: false,
    useExternalSorting: true,
    columnDefs: [],
    onRegisterApi: function onRegisterApi(gridApi) {
      $scope.gridApi = gridApi;
    }
  };

  $scope.sh = function (data) {
    if (data.visible != undefined) data.visible = !data.visible;else data.visible = true;
    $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
  };

  $scope.changechange = function (item, model, label) {
    vm.data.pass.E_BOM_Rev = label;

    if (label == "") {
      label = "001";
      toastr.error("No parts available for this project code. Please contact Admin.");
    }

    vm.data.pass.E_BOM_Rev = label;
    localStorage.projectCode = JSON.stringify(vm.data.pass);
    $.cordys.ajax({
      method: "GetERFQRevisedEBOM",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        projectCode: vm.data.pass.ProjectCode,
        EBOMRev: label
      },
      success: function success(data) {
        $scope.gridOptions = $scope.temp_gridOptions;
        $scope.BL = $.cordys.json.findObjects(data, "ROOT")[0].GROUPING;
        $scope.gridOptions.data = _.sortBy($.cordys.json.findObjects(data, "PANELDATA"), "PART_NUMBER");
        console.log("$scope.gridOptions.data=>", angular.copy($scope.gridOptions.data));
        $scope.gridOptions.columnDefs = [];

        for (var d in $scope.tableCol) {
          $scope.gridOptions.columnDefs.push($scope.tableCol[d].coldef);
        }

        var tkey = $scope.gridOptions.data.map(function (d) {
          return _.keys(d).filter(function (d1) {
            return d1.match(/^GROUP[0-9]/);
          });
        });
        $scope.keys = _.uniq(_.flatten(tkey, Infinity));
        $scope.keys = _.sortBy($scope.keys);
        var projectCode = JSON.parse(localStorage.projectCode);

        if ($scope.BL != "") {
          projectCode.group = $scope.BL;
        } else {
          projectCode.group = $scope.keys[$scope.keys.length - 1];
        }

        localStorage.projectCode = JSON.stringify(projectCode);

        for (var i = 0; i < $scope.keys.length; i++) {
          $scope.gridOptions.columnDefs.push({
            name: "Part Group Baseline " + (i + 1),
            field: "GROUP" + (i + 1) + ".VALUE",
            width: '*',
            minWidth: 200,
            maxWidth: 2000,
            enableColumnMenu: false,
            visible: true,
            srt: 990,
            enableCellEdit: false,
            flagName: $scope.keys[i],
            cellClass: colordrop,
            cellTemplate: '<div><div ng-if="row.entity.CATEGORY==\'A\'"><select  class="PartGroupBaseline' + (i + 1) + '"  style="width:100%;height:100%;border:none;" ng-model="row.entity.GROUP' + (i + 1) + '.VALUE"> <option>A1</option> <option>A2</option> <option>A3</option> <option>A4</option> <option>A5</option> <option>A6</option> <option>A7</option> <option>A8</option> <option>A9</option> <option>A10</option> <option>A11</option> <option>A12</option> <option>A13</option> <option>A14</option> <option>A15</option> </select> </div> <div ng-if="row.entity.CATEGORY==\'B\'"><select class="PartGroupBaseline' + (i + 1) + '"  style="width:100%;height:100%;border:none;"ng-model="row.entity.GROUP' + (i + 1) + '.VALUE"> <option>B1</option> <option>B2</option> <option>B3</option> <option>B4</option> <option>B5</option> <option>B6</option> <option>B7</option> <option>B8</option> <option>B9</option> <option>B10</option> <option>B11</option> <option>B12</option> <option>B13</option> <option>B14</option> <option>B15</option> </select></div></div>'
          });
        }

        $scope.gridOptions.columnDefs = _.sortBy($scope.gridOptions.columnDefs, 'srt');

        var _flagName = $scope.gridOptions.columnDefs.filter(function (d) {
          return d.field == "A" + Number(label);
        });

        if (_flagName.length > 0) {
          $scope.gridOptions.columnDefs.pop();
        }

        var temp_data = _.filter($scope.gridOptions.data, function (d) {
          return d.STATUS == "Panel Grouping" || d.STATUS == null;
        });

        if (temp_data.length > 0) {
          $scope.gridOptions.columnDefs[$scope.gridOptions.columnDefs.length - 1].name = "Panel Group";
          $scope.gridOptions.columnDefs[$scope.gridOptions.columnDefs.length - 1].cellClass;
        }

        console.log("$scope.gridOptions=>", $scope.gridOptions);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.download = function () {
    var _field = _.map($scope.gridOptions.columnDefs, 'field');

    var _name = _.map($scope.gridOptions.columnDefs, 'name');

    var _ARR = [];
    angular.forEach($scope.gridOptions.data, function (d) {
      var _t = {};

      _field.forEach(function (v, k) {
        _t[_name[k]] = _.at(d, v)[0] != undefined ? _.at(d, v)[0] : " ";
      });

      _ARR.push(_t);
    });
    xlsx.write(_ARR, "data-" + new Date().getTime() + ".xlsx");
  };

  $scope.uploadFiles = function (files, errFiles) {
    if (files.length > 0) {
      var farr = files[0].name.split(".");
      var ext = farr[farr.length - 1];

      if (ext) {
        $scope.files = files;
        $scope.errFiles = errFiles;
        angular.forEach(files, function (file) {
          var reader = new FileReader();

          reader.onloadend = function () {
            file.base64 = reader.result;
          };

          reader.readAsDataURL(file);
        });
      } else {
        files = [];
        toastr.error("CAD Data Type: only IGS and 3D xml applicable");
        return;
      }
    }
  };

  $scope.browseAndAddRow = function () {
    if ($scope.selectedRow.DOCUMENT_ID == "") {
      $.cordys.ajax({
        method: "UploadERFQDoc",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: '* json',
        parameters: {
          FileName: $scope.files[0].name,
          FileContent: $scope.files[0].base64.split(",")[1]
        },
        success: function success(e) {
          $scope.ServerFilePath = $.cordys.json.findObjects(e, "uploadERFQDoc")[0].uploadERFQDoc;
          $.cordys.ajax({
            method: "UpdateErfqUploadedDocument",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: '* json',
            parameters: {
              tuple: {
                "new": {
                  "ERFQ_UPLOADED_DOCUMENT": {
                    "PROJECT_CODE": vm.data.pass.ProjectCode,
                    "DOCUMENT_NAME": $scope.files[0].name,
                    "DOCUMENT_PATH": $scope.ServerFilePath,
                    "DOCUMENT_TYPE": "CAD_DATA",
                    "REVISION": vm.selectedItem,
                    "DOCUMENT_DESC": "",
                    "PART_NUMBER": $scope.selectedRow.PART_NUMBER
                  }
                }
              }
            },
            success: function success(e) {
              $.cordys.json.findObjects(e, "ERFQ_UPLOADED_DOCUMENT")[0].DOCUMENT_ID;
              $scope.DOCUMENT_NAME1 = null;
              $scope.DOCUMENT_DESC1 = null;
              $scope.files = "";
              $scope.DOCUMENT_DESC1 = "";
              $scope.changechange({}, {}, vm.selectedItem.value);
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              alert("Error in uploading file");
            }
          });
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          alert("Error in uploading file");
        }
      });
    } else {
      $.cordys.ajax({
        method: "UploadERFQDoc",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: '* json',
        parameters: {
          FileName: $scope.files[0].name,
          FileContent: $scope.files[0].base64.split(",")[1]
        },
        success: function success(e) {
          $scope.ServerFilePath = $.cordys.json.findObjects(e, "uploadERFQDoc")[0].uploadERFQDoc;
          $.cordys.ajax({
            method: "UpdateErfqUploadedDocument",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_UPLOADED_DOCUMENT": {
                    "DOCUMENT_ID": $scope.selectedRow.DOCUMENT_ID
                  }
                },
                "new": {
                  "ERFQ_UPLOADED_DOCUMENT": {
                    "DOCUMENT_ID": $scope.selectedRow.DOCUMENT_ID,
                    "PROJECT_CODE": vm.data.pass.ProjectCode,
                    "DOCUMENT_NAME": $scope.files[0].name,
                    "DOCUMENT_PATH": $scope.ServerFilePath,
                    "DOCUMENT_TYPE": "CAD_DATA",
                    "REVISION": vm.selectedItem,
                    "DOCUMENT_DESC": ""
                  }
                }
              }
            },
            success: function success(data) {
              toastr.success("Uploaded successfully!");
              $scope.DOCUMENT_NAME1 = null;
              $scope.DOCUMENT_DESC1 = null;
              $scope.files = "";
              $scope.DOCUMENT_DESC1 = "";
              $scope.changechange({}, {}, vm.selectedItem.value);
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              alert("Error in loading data");
            }
          });
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          alert("Error in uploading file");
        }
      });
    }
  };
}).filter('mapStatus', function () {
  return function (input) {
    return input;
  };
});
"use strict";

angular.module('App.quoteComparisionCtrl').controller('prefTmkCompCtrl', function ($scope, Upload, $window, $log, $state, cmm) {
  console.log("cmm=>", cmm);
  $scope.toolmakerDropdown = [];
  $scope.PanelGrpDrpdwn = [];
  $scope.budgetedToolmk = [];
  $scope.MaterialGrades = [];

  function cl() {
    this.data = {};
  }

  cl.prototype.gridInit = function () {
    return {
      headerHeight: 40,
      rowHeight: 40,
      rowDrag: false,
      columnDefs: [{
        headerName: "PART_NUMBER",
        field: "PART_NUMBER",
        resizable: true
      }],
      components: {
        moodEditor: DropDownTemplate
      }
    };
  };

  cl.prototype.initPro = function (data) {
    $scope.setting.p = [];
    $scope.setting.l = [];

    _.keys(data[0].ToolmakerPref).map(function (d) {
      $scope.setting.p.push({
        key: d,
        value: true
      });
    });

    _.keys(data[0].LANDEDCOST).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });

    return _.map(data, function (d) {
      var ll = _.keys(d.LANDEDCOST);

      for (var i = 1; i <= ll.length; i++) {
        d['L' + i] = {
          LANDEDCOST: d.LANDEDCOST['L' + i],
          NOOFDIES: d.NOOFDIES['L' + i],
          DIEWEIGHT: d.DIEWEIGHT['L' + i],
          BASICCOST: d.BASICCOST['L' + i],
          COSTPERTON: d.BASICCOST['L' + i]
        };
      }

      ;
      return d;
    });
  };

  cl.prototype.addTm = function (temp) {
    var TOOLMAKER = [];
    Object.keys(temp[0].ToolmakerPref).forEach(function (d) {
      var z = {
        headerName: d,
        field: "ToolmakerPref." + d,
        editable: true,
        resizable: true,
        cellClass: ['ToolmakerPref'],
        cellEditorSelector: function cellEditorSelector(params) {
          var arr = ['Select'];
          arr = _.concat(arr, _.map(_.isArray(params.data.TOOLMAKER) ? params.data.TOOLMAKER : [params.data.TOOLMAKER], 'NAME'));
          return {
            component: 'moodEditor',
            params: {
              values: arr
            }
          };
        }
      };
      TOOLMAKER.push(z);
    });
    return {
      headerName: '<b>Toolmaker Preference</b><div class="float-right"> <i id="subFun" ng-click="addCol()" class="border rounded-circle bg-danger text-light fas fa-minus" style="font-size: 25px;"></i> <i id="addFun" ng-click="addSub()" class="border rounded-circle bg-success text-light   fas fa-plus " style="font-size: 25px;"></i> </div>',
      children: TOOLMAKER,
      headerGroupComponent: 'customHeaderGroupComponent'
    };
  };

  cl.prototype.addTmLP = function (data) {
    var tp = data.columnDefs.filter(function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tp.length > 0) {
      tp[0].children.push(angular.copy(tp[0].children[tp[0].children.length - 1]));
    }

    tp[0].children[tp[0].children.length - 1].headerName = "P" + tp[0].children.length;
    tp[0].children[tp[0].children.length - 1].field = "ToolmakerPref.P" + tp[0].children.length;
    data.api.setColumnDefs(data.columnDefs);
    console.log(data);
  };

  cl.prototype.addAuto = function (temp) {
    var tmp = [];

    _.filter(_.keys(temp[0]), function (d) {
      return d.match(/L[0-9]/);
    }).forEach(function (d) {
      var arr = [];
      arr.push({
        resizable: true,
        headerName: "Toolmaker",
        field: d + ".BASICCOST.TOOLMAKER"
      });
      arr.push({
        resizable: true,
        headerName: "Base Cost",
        field: d + ".BASICCOST.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Landed Cost",
        field: d + ".LANDEDCOST.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "No Of Dies",
        field: d + ".NOOFDIES.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Die Weight",
        field: d + ".DIEWEIGHT.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Cost Per Ton",
        field: d + ".COSTPERTON.VALUE"
      });
      tmp.push({
        resizable: true,
        headerName: d,
        children: arr
      });
    });

    return tmp;
  };

  var zz = new cl();

  function autoSizeAll(gop) {
    var allColumnIds = [];
    gop.columnApi.getAllColumns().forEach(function (column) {
      allColumnIds.push(column.colId);
    });
    gop.columnApi.autoSizeColumns(allColumnIds);
  }

  $scope.baseLineD = {};

  $scope.addCol = function () {
    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tmCol.children.length < $scope.gridOptions.api.getRowNode(0).data.TOOLMAKER.length) {
      zz.addTmLP($scope.gridOptions);
      $("#addFun").click(function () {
        console.log("addFun");
        $scope.addCol();
      });
      $("#subFun").click(function () {
        console.log("subFun");
        $scope.addSub();
      });
    } else {
      toastr.info("Not Valid");
      $scope.gridOptions.columnApi.autoSizeColumns($scope.gridOptions.columnDefs);
    }

    $scope.setting.p = [];
    $scope.setting.l = [];

    _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    }).children.forEach(function (d) {
      $scope.setting.p.push({
        key: d.headerName,
        value: true
      });
    });

    _.map($scope.gridOptions.columnDefs, 'headerName').filter(function (d) {
      return d.match(/^L[0-9]/);
    }).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });
  };

  $scope.addSub = function () {
    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tmCol.children.length > 1) {
      var rem = tmCol.children.pop();
      var remArr = [];
      $scope.gridOptions.api.forEachLeafNode(function (n, i) {
        if (n.data.SeqPref != undefined && n.data.SeqPref[rem.headerName] != undefined) remArr.push({
          old: {
            ERFQ_COMPARISON_PREFERENCE: {
              "PREFERENCE_SEQ": n.data.SeqPref[rem.headerName]
            }
          }
        });
      });
      console.log("removeArr=>", remArr);
      $.cordys.ajax({
        method: "UpdateErfqComparisonPreference",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          "tuple": remArr
        },
        success: function success(data) {
          $scope.changePrj(cmm.projectCode, cmm.label, cmm.baslineNum);
          console.log("successfully data deleted");
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log("error");
        }
      });
      $scope.gridOptions.api.setColumnDefs($scope.gridOptions.columnDefs);
      $("#addFun").click(function () {
        console.log("addFun");
        $scope.addCol();
      });
      $("#subFun").click(function () {
        console.log("subFun");
        $scope.addSub();
      });
      toastr.success("Successfully Deleted");
    } else {
      toastr.info("Not Valid");
    }

    $scope.setting.p = [];
    $scope.setting.l = [];

    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    }).children.forEach(function (d) {
      $scope.setting.p.push({
        key: d.headerName,
        value: true
      });
    });

    _.map($scope.gridOptions.columnDefs, 'headerName').filter(function (d) {
      return d.match(/^L[0-9]/);
    }).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });
  };

  $scope.baselineSave = function () {
    console.log("baseline save", $scope.baseLineD);
    console.log("cmm", cmm);
    var qr = {
      "new": {
        "ERFQ_BASELINE_MAIN": {
          "PROJECT_CODE": cmm.projectCode,
          "BASELINE_NUM": Number(cmm.baslineNum) + 1,
          "BASELINE_NAME": $scope.baseLineD.name,
          "BASELINE_REMARK": $scope.baseLineD.remark,
          "PREFERENCE": $scope.setting.menus.replace(/\s/g, ''),
          "BASELINE_STATUS": "QUCO"
        }
      }
    };
    $.cordys.ajax({
      method: "UpdateErfqBaselineMain",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": qr
      },
      success: function success(data) {
        $scope.data.erfq_toolmaker_master = $.cordys.json.findObjects(data, "ERFQ_BASELINE_MAIN");
        cmm.baslineNum = cmm.baslineNum != undefined ? Number(cmm.baslineNum) + 1 : 1;
        console.log("$scope.data.erfq_toolmaker_master=>", $scope.data.erfq_toolmaker_master);
        $.cordys.ajax({
          method: "GetQuoteComparisionbyProject",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            ProjectCode: cmm.projectCode,
            baselinenum: cmm.baslineNum,
            GROUP: ""
          },
          success: function success(data) {
            var saveQrData = $.cordys.json.findObjects(data, "ERFQ_QUOTE_COMPARISON");

            if (saveQrData.length == 0) {
              var _a = [];
              $scope.gridOptions.api.forEachNode(function (n, i) {
                _a.push({
                  "new": {
                    "ERFQ_QUOTE_COMPARISON": {
                      "PROJECT_CODE": cmm.projectCode,
                      "PART_NUMBER": n.data.PART_NUMBER,
                      "NEW_PART_GROUP": "",
                      "BASELINE_NUM": cmm.baslineNum,
                      "PART_GROUP": cmm.label
                    }
                  }
                });
              });
              $.cordys.ajax({
                method: "UpdateErfqQuoteComparison",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  "tuple": _a
                },
                success: function success(data) {
                  console.log("success=>");
                  $scope.tableDataSave();
                },
                error: function error() {}
              });
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {}
        });
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.settingFun = function () {
    console.log("$scope.setting=>", $scope.setting);
    console.log("$scope.gridOptions=>", $scope.gridOptions);
    $scope.hideAll($scope.setting.p.length, $scope.setting.l.length);
    var temp = "";

    for (var i = 0; i < $scope.setting.p.length; i++) {
      if ($scope.setting.p[i].value == true) {
        temp = i + 1;
        $scope.gridOptions.columnApi.setColumnVisible(['ToolmakerPref.P' + temp + ''], true);
      }
    }

    var tmp = "";

    for (var j = 0; j < $scope.setting.l.length; j++) {
      if ($scope.setting.l[j].value == true) {
        tmp = j + 1;
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.BASICCOST.TOOLMAKER'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.BASICCOST.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.LANDEDCOST.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.NOOFDIES.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.DIEWEIGHT.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.COSTPERTON.VALUE'], true);
      }
    }
  };

  $scope.setting = {
    p: [],
    l: [],
    menus: "LANDEDCOST",
    ps: {
      "key": "Select All",
      "value": true,
      f: function f(dt) {
        if (this.value == true) {
          dt.map(function (d) {
            d.value = true;
            return d;
          });
        }
      }
    },
    ls: {
      "key": "Select All",
      "value": true,
      f: function f(dt) {
        if (this.value == true) {
          dt.map(function (d) {
            d.value = true;
            return d;
          });
        }
      }
    }
  };

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.tableDataSave = function () {
    var arr = [];
    $scope.gridOptions.api.forEachNode(function (node, i) {
      _.keys(node.data.ToolmakerPref).forEach(function (d) {
        var temp = {
          "new": {
            ERFQ_COMPARISON_PREFERENCE: {
              "PROJECT_CODE": cmm.projectCode,
              "PART_NUMBER": node.data.PART_NUMBER,
              "BASELINE_NUM": cmm.baslineNum,
              "LEVEL_PREFERNCE": node.data[d.replace("P", "L")] == undefined || node.data[d.replace("P", "L")].BASICCOST == undefined || node.data[d.replace("P", "L")].BASICCOST.TOOLMAKER ? "" : node.data[d.replace("P", "L")].BASICCOST.TOOLMAKER,
              "TOOLMAKER_PREFERNCE": node.data.ToolmakerPref[d] != undefined ? node.data.ToolmakerPref[d] : "",
              "PREFERENCE_NUM": d,
              "JUSTIFICATION": node.data.JUSTIFICATION,
              "CATEGORY": cmm.label
            }
          }
        };

        if (node.data.SeqPref != undefined && node.data.SeqPref[d] != undefined && node.data.SeqPref[d] != "") {
          temp.old = {
            ERFQ_COMPARISON_PREFERENCE: {
              "PREFERENCE_SEQ": node.data.SeqPref[d]
            }
          };
        }

        arr.push(temp);
      });
    });
    console.log("req=>", arr);
    $.cordys.ajax({
      method: "UpdateErfqComparisonPreference",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": arr
      },
      success: function success(data) {
        console.log("success");
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        console.log("error");
      }
    });
  };

  $scope.xl = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": false,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions.api.exportDataAsCsv(params);
  };

  $scope.gridOptions = {
    defaultColDef: {
      resizable: true,
      sortable: true
    },
    headerHeight: 40,
    rowHeight: 40,
    pagination: true,
    paginationPageSize: 10,
    columnDefs: [{
      headerName: "PART_NUMBER",
      field: "PART_NUMBER"
    }],
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: htmlText
    },
    rowData: null
  };
  $scope.data = {};
  $scope.cmm = cmm;
  $scope.cmm.label = 'A';
  console.log(cmm);

  $scope.changePrj = function (projectCode, panelGroup, bNum) {
    if (cmm.baslineNum == undefined) {
      cmm.baslineNum = "";
    } else {
      cmm.baslineNum = Number(cmm.baslineNum);
    }

    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "Preference",
        "panelGroup": panelGroup,
        "projectCode": projectCode,
        "baselineNum": cmm.baslineNum,
        "budgeted": "",
        "partNum": cmm.selectedPartNumber != undefined ? cmm.selectedPartNumber[0] : "",
        "decimalPlace": "5",
        "preferences": "",
        "ComparePref": "LandedCost",
        "toolmakersRequired": '',
        "panelGrouping": ''
      },
      success: function success(data) {
        var temp = $.cordys.json.findObjects(data, "COMPARISON");

        if (temp.length > 0) {
          $scope.gridOptions.columnDefs = [{
            headerName: "PART_NUMBER",
            field: "PART_NUMBER"
          }];
          temp = zz.initPro(temp);
          $scope.gridOptions.columnDefs.push(zz.addTm(temp));
          console.log("$scope.gridOptions.columnDefs=>", $scope.gridOptions.columnDefs);
          $scope.gridOptions.columnDefs.push({
            headerName: "Justification",
            field: "JUSTIFICATION",
            resizable: true,
            editable: true
          });
          $scope.gridOptions.columnDefs = _.concat($scope.gridOptions.columnDefs, zz.addAuto(temp));

          if (window.location.hash.match(/prefTmkComp/g)) {
            $scope.gridOptions.api.setColumnDefs($scope.gridOptions.columnDefs);
            console.log("show data=>", temp);
            $scope.gridOptions.api.setRowData(temp);
            $scope.makeHeader();
            $scope.settleData();
            $scope.$apply();
            setTimeout(function () {
              $("#subFun").click(function () {
                console.log("subFun");
                $scope.addSub();
              });
              $("#addFun").click(function () {
                console.log("addFun");
                $scope.addCol();
              });
            }, 1000);
            autoSizeAll($scope.gridOptions);
          }
        } else {
          console.log("no data on base line ");
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.binit = function (d) {
    $scope.baseLineLead = {
      ch: []
    };
    $.cordys.ajax({
      method: "GetBaselineForProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "projectCode": cmm.projectCode
      },
      success: function success(data) {
        $scope.baseLineLead = {
          ch: []
        };
        $.cordys.json.findObjects(data, "ERFQ_BASELINE_MAIN").forEach(function (d) {
          if (d.BASELINE_STATUS == "Submitted") $scope.baseLineLead.ch.push({
            "key": d.BASELINE_NUM,
            value: true,
            status: d.BASELINE_STATUS,
            name: d.BASELINE_NAME
          });else $scope.baseLineLead.ch.push({
            "key": d.BASELINE_NUM,
            value: false,
            status: d.BASELINE_STATUS,
            name: d.BASELINE_NAME
          });
          $scope.$apply();
        });

        if (d != undefined) {
          $(d).modal("show");
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.baselineLeadSave = function () {
    console.log("$scope.baseLineLead=>", $scope.baseLineLead);
    $scope.baseLineLead.ch.filter(function (d) {
      return d.value == true;
    }).forEach(function (d2) {
      $.cordys.ajax({
        method: "erfqQuoteCompare",
        namespace: "http://schemas.cordys.com/default",
        dataType: "* json",
        parameters: {
          "pojCode": cmm.projectCode,
          "baseLine": d2.key,
          "other": d2.name
        },
        success: function success(data) {
          $scope.data.erfq_toolmaker_master = $.cordys.json.findObjects(data, "ERFQ_TOOLMAKER_MASTER");
        },
        error: function error(jqXHR, textStatus, errorThrown) {}
      });
    });
  };

  $scope.hideAll = function (countPTm, countLCols) {
    for (var i = 1; i <= countPTm; i++) {
      $scope.gridOptions.columnApi.setColumnVisible(['ToolmakerPref.P' + i + ''], false);
    }

    for (var j = 1; j <= countLCols; j++) {
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.BASICCOST.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.LANDEDCOST.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.NOOFDIES.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.DIEWEIGHT.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.COSTPERTON.VALUE'], false);
    }
  };

  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    $scope.data.dynamicCnt = 1;
    if (newValue != undefined && !_.isEqual(oldValue, newValue)) $scope.changePrj(newValue.projectCode, newValue.label, cmm.baslineNum);
  }, true);

  $scope.fillValue1 = function (v1) {
    $scope.filterMG = v1;
  };

  $scope.fillValue2 = function (v1) {
    $scope.filterBT = v1;
  };

  $scope.fillValue3 = function (v1) {
    $scope.filterPG = v1;
  };

  $scope.makeHeader = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "BasicCost",
        "panelGroup": $scope.cmm.label,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": '',
        "partNum": "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": '',
        "panelGrouping": '',
        "materialGrade": ''
      },
      success: function success(data) {
        $scope.gridOptions.data1 = $.cordys.json.findObjects(data, "COMPARISON");

        for (var i = 0; i < $scope.gridOptions.data1.length; i++) {
          $scope.callFunction1($scope.gridOptions.data1[i]);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.settleData = function () {
    if (cmm.filtObj != null || cmm.filtObj != undefined) {
      $scope.filtObj = cmm.filtObj;
    }

    if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
      $scope.fillValue1($scope.filtObj.filterMG);
      $scope.fillValue2($scope.filtObj.filterBT);
      $scope.fillValue3($scope.filtObj.filterPG);

      if ($scope.toolmakerDropdown.length != 0) {
        var tk = cmm.filtObj.filtertmk;

        for (var t = 0; t < tk.length; t++) {
          var a = tk[t];
          $scope.toolmakerDropdown[a].selected1 = true;
        }
      }

      $scope.tmkReq = $scope.filtObj.tmkReq;
      $scope.setArr = $scope.filtObj.setArr;
    }
  };

  $scope.adddrp = function (value1) {
    if ($scope.budgetedToolmk.length != 0) {
      for (var t = 0; t < $scope.budgetedToolmk.length; t++) {
        if ($scope.budgetedToolmk[t].value === value1.value) {
          return 1;
        }
      }
    } else {
      $scope.budgetedToolmk.push($scope.value);
      return 1;
    }
  };

  $scope.addMaterial = function (value2) {
    if ($scope.MaterialGrades.length != 0) {
      for (var t = 0; t < $scope.MaterialGrades.length; t++) {
        if ($scope.MaterialGrades[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.MaterialGrades.push(value2);
      return 1;
    }
  };

  $scope.addPaneldrp = function (value2) {
    if ($scope.PanelGrpDrpdwn.length != 0) {
      for (var t = 0; t < $scope.PanelGrpDrpdwn.length; t++) {
        if ($scope.PanelGrpDrpdwn[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.PanelGrpDrpdwn.push(value2);
      return 1;
    }
  };

  $scope.callFunction1 = function (obj) {
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key.startsWith("BUDGETED_TOOLMAKER")) {
          $scope.value = {
            value: obj[key]
          };
          var ret = 0;
          ret = $scope.adddrp($scope.value);

          if (ret == undefined || ret == 0) {
            $scope.budgetedToolmk.push($scope.value);
          }
        }

        if (key.startsWith("PART_GROUP")) {
          $scope.value1 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addPaneldrp($scope.value1);

          if (ret1 == undefined || ret1 == 0) {
            $scope.PanelGrpDrpdwn.push($scope.value1);
          }
        }

        if (key.startsWith("MATERIAL")) {
          $scope.value2 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addMaterial($scope.value2);

          if (ret1 == undefined || ret1 == 0) {
            $scope.MaterialGrades.push($scope.value2);
          }
        }
      }
    }
  };

  $scope.tmkReq = [];

  $scope.makeTmkArray = function (a) {
    debugger;

    if (a.selected1 == true) {
      $scope.tmkReq.push(a.TOOLMAKER_ID);
      var set = $scope.toolmakerDropdown.indexOf(a);
      $scope.setArr.push(set);
    }

    if (a.selected1 == false) {
      var indxOfObj = $scope.tmkReq.indexOf(a.TOOLMAKER_ID);
      $scope.tmkReq.splice(indxOfObj, 1);
      var set = $scope.toolmakerDropdown.indexOf(a);
      var s = $scope.setArr.indexOf(set);
      $scope.setArr.splice(s, 1);
    }
  };

  $scope.filter = function () {
    document.getElementById("myDropdown").classList.toggle("show");
    array = $scope.tmkReq;
    var flags = [],
        output = [],
        l = array.length,
        i;

    for (i = 0; i < l; i++) {
      if (flags[array[i]]) continue;
      flags[array[i]] = true;
      output.push(array[i]);
    }

    $scope.tmkReq = output;

    if ($scope.tmkReq.length > 0) {
      $scope.tmkarg = "";

      for (var i = 0; i < $scope.tmkReq.length; i++) {
        if ($scope.tmkarg != "") {
          $scope.tmkarg += ",";
        }

        $scope.tmkarg = $scope.tmkarg + "'" + $scope.tmkReq[i] + "'";
      }
    } else {
      $scope.tmkarg = '';
    }

    if ($scope.filterMG == undefined) {
      $scope.filterMG = '';
    }

    if ($scope.filterBT == undefined) {
      $scope.filterBT = '';
    }

    if ($scope.filterPG == undefined) {
      $scope.filterPG = '';
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.triggerRequest = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "Preference",
        "panelGroup": $scope.cmm.label,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "5",
        "preferences": "",
        "ComparePref": "LandedCost",
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        console.log("filtered: ", $scope.gridOptions.data);
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);
        $scope.gridOptions2.columnDefs.splice(7);
        $scope.colAdd($scope.gridOptions.data);
        $scope.settleData();
        console.log("Filtered BasicCost: ", $scope.gridOptions2.columnDefs);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.openDD = function () {
    document.getElementById("myDropdown").classList.toggle("show");
  };

  $scope.clearAllField = function () {
    $scope.filterMG = "";
    $scope.filterBT = "";
    $scope.setArr = [];
    $scope.filterPG = "";
    $scope.tmkarg = "";
    $scope.tmkReq = [];
    document.getElementById("myDropdown").classList.toggle("show");

    for (i = 0; i < $scope.toolmakerDropdown.length; i++) {
      if ($scope.toolmakerDropdown[i].selected1 != undefined && $scope.toolmakerDropdown[i].selected1 == true) {
        $scope.toolmakerDropdown[i].selected1 = false;
      }
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.changePrj($scope.cmm.projectCode, $scope.cmm.label, $scope.cmm.baslineNum);
  };

  if (cmm.projectCode == undefined) toastr.warning("Select ProjectCode");else $scope.changePrj(cmm.projectCode, cmm.label, cmm.baslineNum);
});
"use strict";

angular.module('App.quoteComparisionCtrl').controller('prefTmkCompCtrl', function ($scope, Upload, $window, $log, $state, cmm) {
  $scope.toolmakerDropdown = [];
  $scope.PanelGrpDrpdwn = [];
  $scope.budgetedToolmk = [];
  $scope.MaterialGrades = [];

  function cl() {
    this.data = {};
  }

  cl.prototype.gridInit = function () {
    return {
      headerHeight: 40,
      rowHeight: 40,
      rowDrag: false,
      columnDefs: [{
        headerName: "PART_NUMBER",
        field: "PART_NUMBER",
        resizable: true
      }],
      components: {
        moodEditor: DropDownTemplate
      }
    };
  };

  cl.prototype.initPro = function (data) {
    $scope.setting.p = [];
    $scope.setting.l = [];

    _.keys(data[0].ToolmakerPref).map(function (d) {
      $scope.setting.p.push({
        key: d,
        value: true
      });
    });

    _.keys(data[0].LANDEDCOST).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });

    return _.map(data, function (d) {
      var ll = _.keys(d.LANDEDCOST);

      for (var i = 1; i <= ll.length; i++) {
        d['L' + i] = {
          LANDEDCOST: d.LANDEDCOST['L' + i],
          NOOFDIES: d.NOOFDIES['L' + i],
          DIEWEIGHT: d.DIEWEIGHT['L' + i],
          BASICCOST: d.BASICCOST['L' + i],
          COSTPERTON: d.BASICCOST['L' + i]
        };
      }

      ;
      return d;
    });
  };

  cl.prototype.addTm = function (temp) {
    var TOOLMAKER = [];
    Object.keys(temp[0].ToolmakerPref).forEach(function (d) {
      var z = {
        headerName: d,
        field: "ToolmakerPref." + d,
        editable: true,
        resizable: true,
        cellClass: ['ToolmakerPref'],
        cellEditorSelector: function cellEditorSelector(params) {
          var arr = ['Select'];
          arr = _.concat(arr, _.map(_.isArray(params.data.TOOLMAKER) ? params.data.TOOLMAKER : [params.data.TOOLMAKER], 'NAME'));
          return {
            component: 'moodEditor',
            params: {
              values: arr
            }
          };
        }
      };
      TOOLMAKER.push(z);
    });
    return {
      headerName: '<b>Toolmaker Preference</b><div class="float-right"> <i id="subFun" ng-click="addCol()" class="border rounded-circle bg-danger text-light fas fa-minus" style="font-size: 25px;"></i> <i id="addFun" ng-click="addSub()" class="border rounded-circle bg-success text-light   fas fa-plus " style="font-size: 25px;"></i> </div>',
      children: TOOLMAKER,
      headerGroupComponent: 'customHeaderGroupComponent'
    };
  };

  cl.prototype.addTmLP = function (data) {
    var tp = data.columnDefs.filter(function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tp.length > 0) {
      tp[0].children.push(angular.copy(tp[0].children[tp[0].children.length - 1]));
    }

    tp[0].children[tp[0].children.length - 1].headerName = "P" + tp[0].children.length;
    tp[0].children[tp[0].children.length - 1].field = "ToolmakerPref.P" + tp[0].children.length;
    data.api.setColumnDefs(data.columnDefs);
    console.log(data);
  };

  cl.prototype.addAuto = function (temp) {
    var tmp = [];

    _.filter(_.keys(temp[0]), function (d) {
      return d.match(/L[0-9]/);
    }).forEach(function (d) {
      var arr = [];
      arr.push({
        resizable: true,
        headerName: "Toolmaker",
        field: d + ".BASICCOST.TOOLMAKER"
      });
      arr.push({
        resizable: true,
        headerName: "Base Cost",
        field: d + ".BASICCOST.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Landed Cost",
        field: d + ".LANDEDCOST.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "No Of Dies",
        field: d + ".NOOFDIES.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Die Weight",
        field: d + ".DIEWEIGHT.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Cost Per Ton",
        field: d + ".COSTPERTON.VALUE"
      });
      tmp.push({
        resizable: true,
        headerName: d,
        children: arr
      });
    });

    return tmp;
  };

  var zz = new cl();

  function autoSizeAll(gop) {
    var allColumnIds = [];
    gop.columnApi.getAllColumns().forEach(function (column) {
      allColumnIds.push(column.colId);
    });
    gop.columnApi.autoSizeColumns(allColumnIds);
  }

  $scope.baseLineD = {};

  $scope.addCol = function () {
    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tmCol.children.length < $scope.gridOptions.api.getRowNode(0).data.TOOLMAKER.length) {
      zz.addTmLP($scope.gridOptions);
      $("#addFun").click(function () {
        console.log("addFun");
        $scope.addCol();
      });
      $("#subFun").click(function () {
        console.log("subFun");
        $scope.addSub();
      });
    } else {
      toastr.info("Not Valid");
      $scope.gridOptions.columnApi.autoSizeColumns($scope.gridOptions.columnDefs);
    }

    $scope.setting.p = [];
    $scope.setting.l = [];

    _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    }).children.forEach(function (d) {
      $scope.setting.p.push({
        key: d.headerName,
        value: true
      });
    });

    _.map($scope.gridOptions.columnDefs, 'headerName').filter(function (d) {
      return d.match(/^L[0-9]/);
    }).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });
  };

  $scope.addSub = function () {
    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tmCol.children.length > 1) {
      var rem = tmCol.children.pop();
      var remArr = [];
      $scope.gridOptions.api.forEachLeafNode(function (n, i) {
        if (n.data.SeqPref != undefined && n.data.SeqPref[rem.headerName] != undefined) remArr.push({
          old: {
            ERFQ_COMPARISON_PREFERENCE: {
              "PREFERENCE_SEQ": n.data.SeqPref[rem.headerName]
            }
          }
        });
      });
      console.log("removeArr=>", remArr);
      $.cordys.ajax({
        method: "UpdateErfqComparisonPreference",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          "tuple": remArr
        },
        success: function success(data) {
          $scope.changePrj(cmm.projectCode, cmm.label, cmm.baslineNum);
          console.log("successfully data deleted");
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log("error");
        }
      });
      $scope.gridOptions.api.setColumnDefs($scope.gridOptions.columnDefs);
      $("#addFun").click(function () {
        console.log("addFun");
        $scope.addCol();
      });
      $("#subFun").click(function () {
        console.log("subFun");
        $scope.addSub();
      });
      toastr.success("Successfully Deleted");
    } else {
      toastr.info("Not Valid");
    }

    $scope.setting.p = [];
    $scope.setting.l = [];

    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    }).children.forEach(function (d) {
      $scope.setting.p.push({
        key: d.headerName,
        value: true
      });
    });

    _.map($scope.gridOptions.columnDefs, 'headerName').filter(function (d) {
      return d.match(/^L[0-9]/);
    }).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });
  };

  $scope.baselineSave = function () {
    console.log("baseline save", $scope.baseLineD);
    console.log("cmm", cmm);
    var qr = {
      "new": {
        "ERFQ_BASELINE_MAIN": {
          "PROJECT_CODE": cmm.projectCode,
          "BASELINE_NUM": Number(cmm.baslineNum) + 1,
          "BASELINE_NAME": $scope.baseLineD.name,
          "BASELINE_REMARK": $scope.baseLineD.remark,
          "PREFERENCE": $scope.setting.menus.replace(/\s/g, ''),
          "BASELINE_STATUS": "QUCO"
        }
      }
    };
    $.cordys.ajax({
      method: "UpdateErfqBaselineMain",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": qr
      },
      success: function success(data) {
        $scope.data.erfq_toolmaker_master = $.cordys.json.findObjects(data, "ERFQ_BASELINE_MAIN");
        cmm.baslineNum = cmm.baslineNum != undefined ? Number(cmm.baslineNum) + 1 : 1;
        console.log("$scope.data.erfq_toolmaker_master=>", $scope.data.erfq_toolmaker_master);
        $.cordys.ajax({
          method: "GetQuoteComparisionbyProject",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            ProjectCode: cmm.projectCode,
            baselinenum: cmm.baslineNum,
            GROUP: ""
          },
          success: function success(data) {
            var saveQrData = $.cordys.json.findObjects(data, "ERFQ_QUOTE_COMPARISON");

            if (saveQrData.length == 0) {
              var _a = [];
              $scope.gridOptions.api.forEachNode(function (n, i) {
                _a.push({
                  "new": {
                    "ERFQ_QUOTE_COMPARISON": {
                      "PROJECT_CODE": cmm.projectCode,
                      "PART_NUMBER": n.data.PART_NUMBER,
                      "NEW_PART_GROUP": "",
                      "BASELINE_NUM": cmm.baslineNum,
                      "PART_GROUP": cmm.label
                    }
                  }
                });
              });
              $.cordys.ajax({
                method: "UpdateErfqQuoteComparison",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  "tuple": _a
                },
                success: function success(data) {
                  console.log("success=>");
                  $scope.tableDataSave();
                },
                error: function error() {}
              });
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {}
        });
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.settingFun = function () {
    console.log("$scope.setting=>", $scope.setting);
    console.log("$scope.gridOptions=>", $scope.gridOptions);
    $scope.hideAll($scope.setting.p.length, $scope.setting.l.length);
    var temp = "";

    for (var i = 0; i < $scope.setting.p.length; i++) {
      if ($scope.setting.p[i].value == true) {
        temp = i + 1;
        $scope.gridOptions.columnApi.setColumnVisible(['ToolmakerPref.P' + temp + ''], true);
      }
    }

    var tmp = "";

    for (var j = 0; j < $scope.setting.l.length; j++) {
      if ($scope.setting.l[j].value == true) {
        tmp = j + 1;
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.BASICCOST.TOOLMAKER'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.BASICCOST.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.LANDEDCOST.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.NOOFDIES.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.DIEWEIGHT.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.COSTPERTON.VALUE'], true);
      }
    }
  };

  $scope.setting = {
    p: [],
    l: [],
    menus: "LANDEDCOST",
    ps: {
      "key": "Select All",
      "value": true,
      f: function f(dt) {
        if (this.value == true) {
          dt.map(function (d) {
            d.value = true;
            return d;
          });
        }
      }
    },
    ls: {
      "key": "Select All",
      "value": true,
      f: function f(dt) {
        if (this.value == true) {
          dt.map(function (d) {
            d.value = true;
            return d;
          });
        }
      }
    }
  };

  $scope.setLab = function (d) {
    $scope.cmm.label = d;
  };

  $scope.tableDataSave = function () {
    var arr = [];
    $scope.gridOptions.api.forEachNode(function (node, i) {
      _.keys(node.data.ToolmakerPref).forEach(function (d) {
        var temp = {
          "new": {
            ERFQ_COMPARISON_PREFERENCE: {
              "PROJECT_CODE": cmm.projectCode,
              "PART_NUMBER": node.data.PART_NUMBER,
              "BASELINE_NUM": cmm.baslineNum,
              "LEVEL_PREFERNCE": node.data[d.replace("P", "L")] == undefined || node.data[d.replace("P", "L")].BASICCOST == undefined || node.data[d.replace("P", "L")].BASICCOST.TOOLMAKER ? "" : node.data[d.replace("P", "L")].BASICCOST.TOOLMAKER,
              "TOOLMAKER_PREFERNCE": node.data.ToolmakerPref[d] != undefined ? node.data.ToolmakerPref[d] : "",
              "PREFERENCE_NUM": d,
              "JUSTIFICATION": node.data.JUSTIFICATION,
              "CATEGORY": cmm.label
            }
          }
        };

        if (node.data.SeqPref != undefined && node.data.SeqPref[d] != undefined && node.data.SeqPref[d] != "") {
          temp.old = {
            ERFQ_COMPARISON_PREFERENCE: {
              "PREFERENCE_SEQ": node.data.SeqPref[d]
            }
          };
        }

        arr.push(temp);
      });
    });
    console.log("req=>", arr);
    $.cordys.ajax({
      method: "UpdateErfqComparisonPreference",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": arr
      },
      success: function success(data) {
        console.log("success");
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        console.log("error");
      }
    });
  };

  $scope.xl = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": false,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions.api.exportDataAsCsv(params);
  };

  $scope.gridOptions = {
    defaultColDef: {
      resizable: true,
      sortable: true
    },
    headerHeight: 40,
    rowHeight: 40,
    pagination: true,
    paginationPageSize: 10,
    columnDefs: [{
      headerName: "PART_NUMBER",
      field: "PART_NUMBER"
    }],
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: htmlText
    },
    rowData: null
  };
  $scope.data = {};
  $scope.cmm = cmm;
  $scope.cmm.label = 'A';
  console.log(cmm);

  $scope.changePrj = function (projectCode, panelGroup, bNum) {
    if (cmm.baslineNum == undefined) {
      cmm.baslineNum = "";
    } else {
      cmm.baslineNum = Number(cmm.baslineNum);
    }

    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "Preference",
        "panelGroup": panelGroup,
        "projectCode": projectCode,
        "baselineNum": cmm.baslineNum,
        "budgeted": "",
        "partNum": "",
        "decimalPlace": "5",
        "preferences": "",
        "ComparePref": "LandedCost",
        "toolmakersRequired": '',
        "panelGrouping": ''
      },
      success: function success(data) {
        var temp = $.cordys.json.findObjects(data, "COMPARISON");

        if (temp.length > 0) {
          $scope.gridOptions.columnDefs = [{
            headerName: "PART_NUMBER",
            field: "PART_NUMBER"
          }];
          temp = zz.initPro(temp);
          $scope.gridOptions.columnDefs.push(zz.addTm(temp));
          console.log("$scope.gridOptions.columnDefs=>", $scope.gridOptions.columnDefs);
          $scope.gridOptions.columnDefs.push({
            headerName: "Justification",
            field: "JUSTIFICATION",
            resizable: true,
            editable: true
          });
          $scope.gridOptions.columnDefs = _.concat($scope.gridOptions.columnDefs, zz.addAuto(temp));

          if (window.location.hash.match(/prefTmkComp/g)) {
            $scope.gridOptions.api.setColumnDefs($scope.gridOptions.columnDefs);
            console.log("show data=>", temp);
            $scope.gridOptions.api.setRowData(temp);
            $scope.makeHeader();
            $scope.settleData();
            $scope.$apply();
            setTimeout(function () {
              $("#subFun").click(function () {
                console.log("subFun");
                $scope.addSub();
              });
              $("#addFun").click(function () {
                console.log("addFun");
                $scope.addCol();
              });
            }, 1000);
            autoSizeAll($scope.gridOptions);
          }
        } else {
          console.log("no data on base line ");
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.binit = function (d) {
    $scope.baseLineLead = {
      ch: []
    };
    $.cordys.ajax({
      method: "GetBaselineForProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "projectCode": cmm.projectCode
      },
      success: function success(data) {
        $scope.baseLineLead = {
          ch: []
        };
        $.cordys.json.findObjects(data, "ERFQ_BASELINE_MAIN").forEach(function (d) {
          if (d.BASELINE_STATUS == "Submitted") $scope.baseLineLead.ch.push({
            "key": d.BASELINE_NUM,
            value: true,
            status: d.BASELINE_STATUS,
            name: d.BASELINE_NAME
          });else $scope.baseLineLead.ch.push({
            "key": d.BASELINE_NUM,
            value: false,
            status: d.BASELINE_STATUS,
            name: d.BASELINE_NAME
          });
          $scope.$apply();
        });

        if (d != undefined) {
          $(d).modal("show");
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.baselineLeadSave = function () {
    console.log("$scope.baseLineLead=>", $scope.baseLineLead);
    $scope.baseLineLead.ch.filter(function (d) {
      return d.value == true;
    }).forEach(function (d2) {
      $.cordys.ajax({
        method: "erfqQuoteCompare",
        namespace: "http://schemas.cordys.com/default",
        dataType: "* json",
        parameters: {
          "pojCode": cmm.projectCode,
          "baseLine": d2.key,
          "other": d2.name
        },
        success: function success(data) {
          $scope.data.erfq_toolmaker_master = $.cordys.json.findObjects(data, "ERFQ_TOOLMAKER_MASTER");
        },
        error: function error(jqXHR, textStatus, errorThrown) {}
      });
    });
  };

  $scope.hideAll = function (countPTm, countLCols) {
    for (var i = 1; i <= countPTm; i++) {
      $scope.gridOptions.columnApi.setColumnVisible(['ToolmakerPref.P' + i + ''], false);
    }

    for (var j = 1; j <= countLCols; j++) {
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.BASICCOST.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.LANDEDCOST.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.NOOFDIES.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.DIEWEIGHT.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.COSTPERTON.VALUE'], false);
    }
  };

  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    $scope.data.dynamicCnt = 1;
    if (newValue != undefined && !_.isEqual(oldValue, newValue)) $scope.changePrj(newValue.projectCode, newValue.label, cmm.baslineNum);
  }, true);

  $scope.fillValue1 = function (v1) {
    $scope.filterMG = v1;
  };

  $scope.fillValue2 = function (v1) {
    $scope.filterBT = v1;
  };

  $scope.fillValue3 = function (v1) {
    $scope.filterPG = v1;
  };

  $scope.makeHeader = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "BasicCost",
        "panelGroup": $scope.cmm.label,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": '',
        "partNum": "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": '',
        "panelGrouping": '',
        "materialGrade": ''
      },
      success: function success(data) {
        $scope.gridOptions.data1 = $.cordys.json.findObjects(data, "COMPARISON");

        for (var i = 0; i < $scope.gridOptions.data1.length; i++) {
          $scope.callFunction1($scope.gridOptions.data1[i]);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.settleData = function () {
    if (cmm.filtObj != null || cmm.filtObj != undefined) {
      $scope.filtObj = cmm.filtObj;
    }

    if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
      $scope.fillValue1($scope.filtObj.filterMG);
      $scope.fillValue2($scope.filtObj.filterBT);
      $scope.fillValue3($scope.filtObj.filterPG);

      if ($scope.toolmakerDropdown.length != 0) {
        var tk = cmm.filtObj.filtertmk;

        for (var t = 0; t < tk.length; t++) {
          var a = tk[t];
          $scope.toolmakerDropdown[a].selected1 = true;
        }
      }

      $scope.tmkReq = $scope.filtObj.tmkReq;
      $scope.setArr = $scope.filtObj.setArr;
    }
  };

  $scope.adddrp = function (value1) {
    if ($scope.budgetedToolmk.length != 0) {
      for (var t = 0; t < $scope.budgetedToolmk.length; t++) {
        if ($scope.budgetedToolmk[t].value === value1.value) {
          return 1;
        }
      }
    } else {
      $scope.budgetedToolmk.push($scope.value);
      return 1;
    }
  };

  $scope.addMaterial = function (value2) {
    if ($scope.MaterialGrades.length != 0) {
      for (var t = 0; t < $scope.MaterialGrades.length; t++) {
        if ($scope.MaterialGrades[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.MaterialGrades.push(value2);
      return 1;
    }
  };

  $scope.addPaneldrp = function (value2) {
    if ($scope.PanelGrpDrpdwn.length != 0) {
      for (var t = 0; t < $scope.PanelGrpDrpdwn.length; t++) {
        if ($scope.PanelGrpDrpdwn[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.PanelGrpDrpdwn.push(value2);
      return 1;
    }
  };

  $scope.callFunction1 = function (obj) {
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key.startsWith("BUDGETED_TOOLMAKER")) {
          $scope.value = {
            value: obj[key]
          };
          var ret = 0;
          ret = $scope.adddrp($scope.value);

          if (ret == undefined || ret == 0) {
            $scope.budgetedToolmk.push($scope.value);
          }
        }

        if (key.startsWith("PART_GROUP")) {
          $scope.value1 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addPaneldrp($scope.value1);

          if (ret1 == undefined || ret1 == 0) {
            $scope.PanelGrpDrpdwn.push($scope.value1);
          }
        }

        if (key.startsWith("MATERIAL")) {
          $scope.value2 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addMaterial($scope.value2);

          if (ret1 == undefined || ret1 == 0) {
            $scope.MaterialGrades.push($scope.value2);
          }
        }
      }
    }
  };

  $scope.tmkReq = [];

  $scope.makeTmkArray = function (a) {
    debugger;

    if (a.selected1 == true) {
      $scope.tmkReq.push(a.TOOLMAKER_ID);
      var set = $scope.toolmakerDropdown.indexOf(a);
      $scope.setArr.push(set);
    }

    if (a.selected1 == false) {
      var indxOfObj = $scope.tmkReq.indexOf(a.TOOLMAKER_ID);
      $scope.tmkReq.splice(indxOfObj, 1);
      var set = $scope.toolmakerDropdown.indexOf(a);
      var s = $scope.setArr.indexOf(set);
      $scope.setArr.splice(s, 1);
    }
  };

  $scope.filter = function () {
    document.getElementById("myDropdown").classList.toggle("show");
    array = $scope.tmkReq;
    var flags = [],
        output = [],
        l = array.length,
        i;

    for (i = 0; i < l; i++) {
      if (flags[array[i]]) continue;
      flags[array[i]] = true;
      output.push(array[i]);
    }

    $scope.tmkReq = output;

    if ($scope.tmkReq.length > 0) {
      $scope.tmkarg = "";

      for (var i = 0; i < $scope.tmkReq.length; i++) {
        if ($scope.tmkarg != "") {
          $scope.tmkarg += ",";
        }

        $scope.tmkarg = $scope.tmkarg + "'" + $scope.tmkReq[i] + "'";
      }
    } else {
      $scope.tmkarg = '';
    }

    if ($scope.filterMG == undefined) {
      $scope.filterMG = '';
    }

    if ($scope.filterBT == undefined) {
      $scope.filterBT = '';
    }

    if ($scope.filterPG == undefined) {
      $scope.filterPG = '';
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.triggerRequest = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "Preference",
        "panelGroup": $scope.cmm.label,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "5",
        "preferences": "",
        "ComparePref": "LandedCost",
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        console.log("filtered: ", $scope.gridOptions.data);
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);
        $scope.gridOptions2.columnDefs.splice(7);
        $scope.colAdd($scope.gridOptions.data);
        $scope.settleData();
        console.log("Filtered BasicCost: ", $scope.gridOptions2.columnDefs);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.openDD = function () {
    document.getElementById("myDropdown").classList.toggle("show");
  };

  $scope.clearAllField = function () {
    $scope.filterMG = "";
    $scope.filterBT = "";
    $scope.setArr = [];
    $scope.filterPG = "";
    $scope.tmkarg = "";
    $scope.tmkReq = [];
    document.getElementById("myDropdown").classList.toggle("show");

    for (i = 0; i < $scope.toolmakerDropdown.length; i++) {
      if ($scope.toolmakerDropdown[i].selected1 != undefined && $scope.toolmakerDropdown[i].selected1 == true) {
        $scope.toolmakerDropdown[i].selected1 = false;
      }
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.changePrj($scope.cmm.projectCode, $scope.cmm.label, $scope.cmm.baslineNum);
  };

  if (cmm.projectCode == undefined) toastr.warning("Select ProjectCode");else $scope.changePrj(cmm.projectCode, cmm.label, cmm.baslineNum);
});
"use strict";

angular.module('App.quoteComparisionCtrl').controller('prefTmkCompCtrl', function ($scope, Upload, $window, $log, $state, cmm) {
  console.log("cmm=>", cmm);
  $scope.toolmakerDropdown = [];
  $scope.PanelGrpDrpdwn = [];
  $scope.budgetedToolmk = [];
  $scope.MaterialGrades = [];

  function cl() {
    this.data = {};
  }

  cl.prototype.gridInit = function () {
    return {
      headerHeight: 40,
      rowHeight: 40,
      rowDrag: false,
      columnDefs: [{
        headerName: "PART_NUMBER",
        field: "PART_NUMBER",
        resizable: true
      }],
      components: {
        moodEditor: DropDownTemplate
      }
    };
  };

  cl.prototype.initPro = function (data) {
    $scope.setting.p = [];
    $scope.setting.l = [];

    _.keys(data[0].ToolmakerPref).map(function (d) {
      $scope.setting.p.push({
        key: d,
        value: true
      });
    });

    _.keys(data[0].LANDEDCOST).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });

    return _.map(data, function (d) {
      var ll = _.keys(d.LANDEDCOST);

      for (var i = 1; i <= ll.length; i++) {
        d['L' + i] = {
          LANDEDCOST: d.LANDEDCOST['L' + i],
          NOOFDIES: d.NOOFDIES['L' + i],
          DIEWEIGHT: d.DIEWEIGHT['L' + i],
          BASICCOST: d.BASICCOST['L' + i],
          COSTPERTON: d.BASICCOST['L' + i]
        };
      }

      ;
      return d;
    });
  };

  cl.prototype.addTm = function (temp) {
    var TOOLMAKER = [];
    Object.keys(temp[0].ToolmakerPref).forEach(function (d) {
      var z = {
        headerName: d,
        field: "ToolmakerPref." + d,
        editable: true,
        resizable: true,
        cellClass: ['ToolmakerPref'],
        cellEditorSelector: function cellEditorSelector(params) {
          var arr = ['Select'];
          arr = _.concat(arr, _.map(_.isArray(params.data.TOOLMAKER) ? params.data.TOOLMAKER : [params.data.TOOLMAKER], 'NAME'));
          return {
            component: 'moodEditor',
            params: {
              values: arr
            }
          };
        }
      };
      TOOLMAKER.push(z);
    });
    return {
      headerName: '<b>Toolmaker Preference</b><div class="float-right"> <i id="subFun" ng-click="addCol()" class="border rounded-circle bg-danger text-light fas fa-minus" style="font-size: 25px;"></i> <i id="addFun" ng-click="addSub()" class="border rounded-circle bg-success text-light   fas fa-plus " style="font-size: 25px;"></i> </div>',
      children: TOOLMAKER,
      headerGroupComponent: 'customHeaderGroupComponent'
    };
  };

  cl.prototype.addTmLP = function (data) {
    var tp = data.columnDefs.filter(function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tp.length > 0) {
      tp[0].children.push(angular.copy(tp[0].children[tp[0].children.length - 1]));
    }

    tp[0].children[tp[0].children.length - 1].headerName = "P" + tp[0].children.length;
    tp[0].children[tp[0].children.length - 1].field = "ToolmakerPref.P" + tp[0].children.length;
    data.api.setColumnDefs(data.columnDefs);
    console.log(data);
  };

  cl.prototype.addAuto = function (temp) {
    var tmp = [];

    _.filter(_.keys(temp[0]), function (d) {
      return d.match(/L[0-9]/);
    }).forEach(function (d) {
      var arr = [];
      arr.push({
        resizable: true,
        headerName: "Toolmaker",
        field: d + ".BASICCOST.TOOLMAKER"
      });
      arr.push({
        resizable: true,
        headerName: "Base Cost",
        field: d + ".BASICCOST.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Landed Cost",
        field: d + ".LANDEDCOST.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "No Of Dies",
        field: d + ".NOOFDIES.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Die Weight",
        field: d + ".DIEWEIGHT.VALUE"
      });
      arr.push({
        resizable: true,
        headerName: "Cost Per Ton",
        field: d + ".COSTPERTON.VALUE"
      });
      tmp.push({
        resizable: true,
        headerName: d,
        children: arr
      });
    });

    return tmp;
  };

  var zz = new cl();

  function autoSizeAll(gop) {
    var allColumnIds = [];
    gop.columnApi.getAllColumns().forEach(function (column) {
      allColumnIds.push(column.colId);
    });
    gop.columnApi.autoSizeColumns(allColumnIds);
  }

  $scope.baseLineD = {};

  $scope.addCol = function () {
    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tmCol.children.length < $scope.gridOptions.api.getRowNode(0).data.TOOLMAKER.length) {
      zz.addTmLP($scope.gridOptions);
      $("#addFun").click(function () {
        alert("#addFun / #subFun");
        console.log("addFun");
        $scope.addCol();
      });
      $("#subFun").click(function () {
        console.log("subFun");
        $scope.addSub();
      });
    } else {
      toastr.info("Not Valid");
      $scope.gridOptions.columnApi.autoSizeColumns($scope.gridOptions.columnDefs);
    }

    $scope.setting.p = [];
    $scope.setting.l = [];

    _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    }).children.forEach(function (d) {
      $scope.setting.p.push({
        key: d.headerName,
        value: true
      });
    });

    _.map($scope.gridOptions.columnDefs, 'headerName').filter(function (d) {
      return d.match(/^L[0-9]/);
    }).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });
  };

  $scope.addSub = function () {
    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    });

    if (tmCol.children.length > 1) {
      var rem = tmCol.children.pop();
      var remArr = [];
      $scope.gridOptions.api.forEachLeafNode(function (n, i) {
        if (n.data.SeqPref != undefined && n.data.SeqPref[rem.headerName] != undefined) remArr.push({
          old: {
            ERFQ_COMPARISON_PREFERENCE: {
              "PREFERENCE_SEQ": n.data.SeqPref[rem.headerName]
            }
          }
        });
      });
      console.log("removeArr=>", remArr);
      $.cordys.ajax({
        method: "UpdateErfqComparisonPreference",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          "tuple": remArr
        },
        success: function success(data) {
          $scope.changePrj(cmm.projectCode, cmm.label, cmm.baslineNum);
          console.log("successfully data deleted");
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.log("error");
        }
      });
      $scope.gridOptions.api.setColumnDefs($scope.gridOptions.columnDefs);
      $("#addFun").click(function () {
        console.log("addFun");
        $scope.addCol();
      });
      $("#subFun").click(function () {
        console.log("subFun");
        $scope.addSub();
      });
      toastr.success("Successfully Deleted");
    } else {
      toastr.info("Not Valid");
    }

    $scope.setting.p = [];
    $scope.setting.l = [];

    var tmCol = _.find($scope.gridOptions.columnDefs, function (d) {
      return d.headerName.match(/Toolmaker Preference/g);
    }).children.forEach(function (d) {
      $scope.setting.p.push({
        key: d.headerName,
        value: true
      });
    });

    _.map($scope.gridOptions.columnDefs, 'headerName').filter(function (d) {
      return d.match(/^L[0-9]/);
    }).map(function (d) {
      $scope.setting.l.push({
        key: d,
        value: true
      });
    });
  };

  $scope.baselineSave = function () {
    console.log("baseline save", $scope.baseLineD);
    console.log("cmm", cmm);
    var qr = {
      "new": {
        "ERFQ_BASELINE_MAIN": {
          "PROJECT_CODE": cmm.projectCode,
          "BASELINE_NUM": Number(cmm.baslineNum) + 1,
          "BASELINE_NAME": $scope.baseLineD.name,
          "BASELINE_REMARK": $scope.baseLineD.remark,
          "PREFERENCE": $scope.setting.menus.replace(/\s/g, ''),
          "BASELINE_STATUS": "QUCO"
        }
      }
    };
    $.cordys.ajax({
      method: "UpdateErfqBaselineMain",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": qr
      },
      success: function success(data) {
        $scope.data.erfq_toolmaker_master = $.cordys.json.findObjects(data, "ERFQ_BASELINE_MAIN");
        cmm.baslineNum = cmm.baslineNum != undefined ? Number(cmm.baslineNum) + 1 : 1;
        console.log("$scope.data.erfq_toolmaker_master=>", $scope.data.erfq_toolmaker_master);
        $.cordys.ajax({
          method: "GetQuoteComparisionbyProject",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            ProjectCode: cmm.projectCode,
            baselinenum: cmm.baslineNum,
            GROUP: ""
          },
          success: function success(data) {
            var saveQrData = $.cordys.json.findObjects(data, "ERFQ_QUOTE_COMPARISON");

            if (saveQrData.length == 0) {
              var _a = [];
              $scope.gridOptions.api.forEachNode(function (n, i) {
                _a.push({
                  "new": {
                    "ERFQ_QUOTE_COMPARISON": {
                      "PROJECT_CODE": cmm.projectCode,
                      "PART_NUMBER": n.data.PART_NUMBER,
                      "NEW_PART_GROUP": "",
                      "BASELINE_NUM": cmm.baslineNum,
                      "PART_GROUP": cmm.label
                    }
                  }
                });
              });
              $.cordys.ajax({
                method: "UpdateErfqQuoteComparison",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  "tuple": _a
                },
                success: function success(data) {
                  console.log("success=>");
                  $scope.tableDataSave();
                },
                error: function error() {}
              });
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {}
        });
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.settingFun = function () {
    console.log("$scope.setting=>", $scope.setting);
    console.log("$scope.gridOptions=>", $scope.gridOptions);
    $scope.hideAll($scope.setting.p.length, $scope.setting.l.length);
    var temp = "";

    for (var i = 0; i < $scope.setting.p.length; i++) {
      if ($scope.setting.p[i].value == true) {
        temp = i + 1;
        $scope.gridOptions.columnApi.setColumnVisible(['ToolmakerPref.P' + temp + ''], true);
      }
    }

    var tmp = "";

    for (var j = 0; j < $scope.setting.l.length; j++) {
      if ($scope.setting.l[j].value == true) {
        tmp = j + 1;
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.BASICCOST.TOOLMAKER'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.BASICCOST.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.LANDEDCOST.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.NOOFDIES.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.DIEWEIGHT.VALUE'], true);
        $scope.gridOptions.columnApi.setColumnVisible(['L' + tmp + '.COSTPERTON.VALUE'], true);
      }
    }
  };

  $scope.setting = {
    p: [],
    l: [],
    menus: "LANDEDCOST",
    ps: {
      "key": "Select All",
      "value": true,
      f: function f(dt) {
        if (this.value == true) {
          dt.map(function (d) {
            d.value = true;
            return d;
          });
        }
      }
    },
    ls: {
      "key": "Select All",
      "value": true,
      f: function f(dt) {
        if (this.value == true) {
          dt.map(function (d) {
            d.value = true;
            return d;
          });
        }
      }
    }
  };

  $scope.setLab = function (d) {
    $scope.cmm.label = $scope.cmm.label;
  };

  $scope.tableDataSave = function () {
    var arr = [];
    $scope.gridOptions.api.forEachNode(function (node, i) {
      _.keys(node.data.ToolmakerPref).forEach(function (d) {
        var temp = {
          "new": {
            ERFQ_COMPARISON_PREFERENCE: {
              "PROJECT_CODE": cmm.projectCode,
              "PART_NUMBER": node.data.PART_NUMBER,
              "BASELINE_NUM": cmm.baslineNum,
              "LEVEL_PREFERNCE": node.data[d.replace("P", "L")] == undefined || node.data[d.replace("P", "L")].BASICCOST == undefined || node.data[d.replace("P", "L")].BASICCOST.TOOLMAKER ? "" : node.data[d.replace("P", "L")].BASICCOST.TOOLMAKER,
              "TOOLMAKER_PREFERNCE": node.data.ToolmakerPref[d] != undefined ? node.data.ToolmakerPref[d] : "",
              "PREFERENCE_NUM": d,
              "JUSTIFICATION": node.data.JUSTIFICATION,
              "CATEGORY": cmm.label
            }
          }
        };

        if (node.data.SeqPref != undefined && node.data.SeqPref[d] != undefined && node.data.SeqPref[d] != "") {
          temp.old = {
            ERFQ_COMPARISON_PREFERENCE: {
              "PREFERENCE_SEQ": node.data.SeqPref[d]
            }
          };
        }

        arr.push(temp);
      });
    });
    console.log("req=>", arr);
    $.cordys.ajax({
      method: "UpdateErfqComparisonPreference",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": arr
      },
      success: function success(data) {
        console.log("success");
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        console.log("error");
      }
    });
  };

  $scope.xl = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": false,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions.api.exportDataAsCsv(params);
  };

  $scope.gridOptions = {
    defaultColDef: {
      resizable: true,
      sortable: true
    },
    headerHeight: 40,
    rowHeight: 40,
    pagination: true,
    paginationPageSize: 10,
    columnDefs: [{
      headerName: "PART_NUMBER",
      field: "PART_NUMBER"
    }],
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: htmlText
    },
    rowData: null
  };
  $scope.data = {};
  $scope.cmm = cmm;
  $scope.cmm.label = _.keys(cmm.selectedPartNumber)[0];
  console.log(cmm);

  $scope.changePrj = function (projectCode, panelGroup, bNum) {
    if (cmm.baslineNum == undefined) {
      cmm.baslineNum = "";
    } else {
      cmm.baslineNum = Number(cmm.baslineNum);
    }

    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "Preference",
        "panelGroup": panelGroup,
        "projectCode": projectCode,
        "baselineNum": cmm.baslineNum,
        "budgeted": "",
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "decimalPlace": "5",
        "preferences": "",
        "ComparePref": "LandedCost",
        "toolmakersRequired": '',
        "panelGrouping": ''
      },
      success: function success(data) {
        var temp = $.cordys.json.findObjects(data, "COMPARISON");

        if (temp.length > 0) {
          $scope.gridOptions.columnDefs = [{
            headerName: "PART_NUMBER",
            field: "PART_NUMBER"
          }];
          temp = zz.initPro(temp);
          $scope.gridOptions.columnDefs.push(zz.addTm(temp));
          console.log("$scope.gridOptions.columnDefs=>", $scope.gridOptions.columnDefs);
          $scope.gridOptions.columnDefs.push({
            headerName: "Justification",
            field: "JUSTIFICATION",
            resizable: true,
            editable: true
          });
          $scope.gridOptions.columnDefs = _.concat($scope.gridOptions.columnDefs, zz.addAuto(temp));

          if (window.location.hash.match(/prefTmkComp/g)) {
            $scope.gridOptions.api.setColumnDefs($scope.gridOptions.columnDefs);
            console.log("show data=>", temp);
            $scope.gridOptions.api.setRowData(temp);
            $scope.makeHeader();
            $scope.settleData();
            $scope.$apply();
            setTimeout(function () {
              $("#subFun").click(function () {
                console.log("subFun");
                $scope.addSub();
              });
              $("#addFun").click(function () {
                console.log("addFun");
                $scope.addCol();
              });
            }, 1000);
            autoSizeAll($scope.gridOptions);
          }
        } else {
          console.log("no data on base line ");
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.binit = function (d) {
    $scope.baseLineLead = {
      ch: []
    };
    $.cordys.ajax({
      method: "GetBaselineForProject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "projectCode": cmm.projectCode
      },
      success: function success(data) {
        $scope.baseLineLead = {
          ch: []
        };
        $.cordys.json.findObjects(data, "ERFQ_BASELINE_MAIN").forEach(function (d) {
          if (d.BASELINE_STATUS == "Submitted") $scope.baseLineLead.ch.push({
            "key": d.BASELINE_NUM,
            value: true,
            status: d.BASELINE_STATUS,
            name: d.BASELINE_NAME
          });else $scope.baseLineLead.ch.push({
            "key": d.BASELINE_NUM,
            value: false,
            status: d.BASELINE_STATUS,
            name: d.BASELINE_NAME
          });
          $scope.$apply();
        });

        if (d != undefined) {
          $(d).modal("show");
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {}
    });
  };

  $scope.baselineLeadSave = function () {
    console.log("$scope.baseLineLead=>", $scope.baseLineLead);
    $scope.baseLineLead.ch.filter(function (d) {
      return d.value == true;
    }).forEach(function (d2) {
      $.cordys.ajax({
        method: "erfqQuoteCompare",
        namespace: "http://schemas.cordys.com/default",
        dataType: "* json",
        parameters: {
          "pojCode": cmm.projectCode,
          "baseLine": d2.key,
          "other": d2.name
        },
        success: function success(data) {
          $scope.data.erfq_toolmaker_master = $.cordys.json.findObjects(data, "ERFQ_TOOLMAKER_MASTER");
        },
        error: function error(jqXHR, textStatus, errorThrown) {}
      });
    });
  };

  $scope.hideAll = function (countPTm, countLCols) {
    for (var i = 1; i <= countPTm; i++) {
      $scope.gridOptions.columnApi.setColumnVisible(['ToolmakerPref.P' + i + ''], false);
    }

    for (var j = 1; j <= countLCols; j++) {
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.BASICCOST.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.LANDEDCOST.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.NOOFDIES.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.DIEWEIGHT.VALUE'], false);
      $scope.gridOptions.columnApi.setColumnVisible(['L' + j + '.COSTPERTON.VALUE'], false);
    }
  };

  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    $scope.data.dynamicCnt = 1;
    if (newValue != undefined && !_.isEqual(oldValue, newValue)) $scope.changePrj(newValue.projectCode, newValue.label, cmm.baslineNum);
  }, true);

  $scope.fillValue1 = function (v1) {
    $scope.filterMG = v1;
  };

  $scope.fillValue2 = function (v1) {
    $scope.filterBT = v1;
  };

  $scope.fillValue3 = function (v1) {
    $scope.filterPG = v1;
  };

  $scope.makeHeader = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "BasicCost",
        "panelGroup": $scope.cmm.label,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "",
        "preferences": "",
        "ComparePref": "",
        "toolmakersRequired": '',
        "panelGrouping": '',
        "materialGrade": ''
      },
      success: function success(data) {
        $scope.gridOptions.data1 = $.cordys.json.findObjects(data, "COMPARISON");

        for (var i = 0; i < $scope.gridOptions.data1.length; i++) {
          $scope.callFunction1($scope.gridOptions.data1[i]);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.settleData = function () {
    if (cmm.filtObj != null || cmm.filtObj != undefined) {
      $scope.filtObj = cmm.filtObj;
    }

    if ($scope.filtObj != undefined && $scope.filtObj != "" && $scope.filtObj != null) {
      $scope.fillValue1($scope.filtObj.filterMG);
      $scope.fillValue2($scope.filtObj.filterBT);
      $scope.fillValue3($scope.filtObj.filterPG);

      if ($scope.toolmakerDropdown.length != 0) {
        var tk = cmm.filtObj.filtertmk;

        for (var t = 0; t < tk.length; t++) {
          var a = tk[t];
          $scope.toolmakerDropdown[a].selected1 = true;
        }
      }

      $scope.tmkReq = $scope.filtObj.tmkReq;
      $scope.setArr = $scope.filtObj.setArr;
    }
  };

  $scope.adddrp = function (value1) {
    if ($scope.budgetedToolmk.length != 0) {
      for (var t = 0; t < $scope.budgetedToolmk.length; t++) {
        if ($scope.budgetedToolmk[t].value === value1.value) {
          return 1;
        }
      }
    } else {
      $scope.budgetedToolmk.push($scope.value);
      return 1;
    }
  };

  $scope.addMaterial = function (value2) {
    if ($scope.MaterialGrades.length != 0) {
      for (var t = 0; t < $scope.MaterialGrades.length; t++) {
        if ($scope.MaterialGrades[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.MaterialGrades.push(value2);
      return 1;
    }
  };

  $scope.addPaneldrp = function (value2) {
    if ($scope.PanelGrpDrpdwn.length != 0) {
      for (var t = 0; t < $scope.PanelGrpDrpdwn.length; t++) {
        if ($scope.PanelGrpDrpdwn[t].grp === value2.grp) {
          return 1;
        }
      }
    } else {
      $scope.PanelGrpDrpdwn.push(value2);
      return 1;
    }
  };

  $scope.callFunction1 = function (obj) {
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key.startsWith("BUDGETED_TOOLMAKER")) {
          $scope.value = {
            value: obj[key]
          };
          var ret = 0;
          ret = $scope.adddrp($scope.value);

          if (ret == undefined || ret == 0) {
            $scope.budgetedToolmk.push($scope.value);
          }
        }

        if (key.startsWith("PART_GROUP")) {
          $scope.value1 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addPaneldrp($scope.value1);

          if (ret1 == undefined || ret1 == 0) {
            $scope.PanelGrpDrpdwn.push($scope.value1);
          }
        }

        if (key.startsWith("MATERIAL")) {
          $scope.value2 = {
            grp: obj[key]
          };
          var ret1 = 0;
          ret1 = $scope.addMaterial($scope.value2);

          if (ret1 == undefined || ret1 == 0) {
            $scope.MaterialGrades.push($scope.value2);
          }
        }
      }
    }
  };

  $scope.tmkReq = [];

  $scope.makeTmkArray = function (a) {
    debugger;

    if (a.selected1 == true) {
      $scope.tmkReq.push(a.TOOLMAKER_ID);
      var set = $scope.toolmakerDropdown.indexOf(a);
      $scope.setArr.push(set);
    }

    if (a.selected1 == false) {
      var indxOfObj = $scope.tmkReq.indexOf(a.TOOLMAKER_ID);
      $scope.tmkReq.splice(indxOfObj, 1);
      var set = $scope.toolmakerDropdown.indexOf(a);
      var s = $scope.setArr.indexOf(set);
      $scope.setArr.splice(s, 1);
    }
  };

  $scope.filter = function () {
    document.getElementById("myDropdown").classList.toggle("show");
    array = $scope.tmkReq;
    var flags = [],
        output = [],
        l = array.length,
        i;

    for (i = 0; i < l; i++) {
      if (flags[array[i]]) continue;
      flags[array[i]] = true;
      output.push(array[i]);
    }

    $scope.tmkReq = output;

    if ($scope.tmkReq.length > 0) {
      $scope.tmkarg = "";

      for (var i = 0; i < $scope.tmkReq.length; i++) {
        if ($scope.tmkarg != "") {
          $scope.tmkarg += ",";
        }

        $scope.tmkarg = $scope.tmkarg + "'" + $scope.tmkReq[i] + "'";
      }
    } else {
      $scope.tmkarg = '';
    }

    if ($scope.filterMG == undefined) {
      $scope.filterMG = '';
    }

    if ($scope.filterBT == undefined) {
      $scope.filterBT = '';
    }

    if ($scope.filterPG == undefined) {
      $scope.filterPG = '';
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.triggerRequest();
  };

  $scope.triggerRequest = function () {
    $.cordys.ajax({
      method: "GetERFQComparisonData",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "comparisonType": "Preference",
        "panelGroup": $scope.cmm.label,
        "projectCode": $scope.cmm.projectCode,
        "budgeted": cmm.filtObj != undefined && cmm.filtObj.filterBT != undefined ? cmm.filtObj.filterBT : '',
        "partNum": cmm.selectedPartNumber != undefined && cmm.selectedPartNumber.length > 0 ? cmm.selectedPartNumber[0] : "",
        "baselineNum": $scope.cmm.baslineNum,
        "decimalPlace": "5",
        "preferences": "",
        "ComparePref": "LandedCost",
        "toolmakersRequired": cmm.filtObj != undefined && cmm.filtObj.filtReq != undefined ? cmm.filtObj.filtReq : '',
        "panelGrouping": cmm.filtObj != undefined && cmm.filtObj.filterPG != undefined ? cmm.filtObj.filterPG : '',
        "materialGrade": cmm.filtObj != undefined && cmm.filtObj.filterMG != undefined ? cmm.filtObj.filterMG : ''
      },
      success: function success(data) {
        $scope.gridOptions.data = $.cordys.json.findObjects(data, "COMPARISON");
        console.log("filtered: ", $scope.gridOptions.data);
        $scope.gridOptions2.api.setRowData($scope.gridOptions.data);
        $scope.gridOptions2.columnDefs.splice(7);
        $scope.colAdd($scope.gridOptions.data);
        $scope.settleData();
        console.log("Filtered BasicCost: ", $scope.gridOptions2.columnDefs);
        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Unable to load data. Please try refreshing the page.");
      }
    });
  };

  $scope.openDD = function () {
    document.getElementById("myDropdown").classList.toggle("show");
  };

  $scope.clearAllField = function () {
    $scope.filterMG = "";
    $scope.filterBT = "";
    $scope.setArr = [];
    $scope.filterPG = "";
    $scope.tmkarg = "";
    $scope.tmkReq = [];
    document.getElementById("myDropdown").classList.toggle("show");

    for (i = 0; i < $scope.toolmakerDropdown.length; i++) {
      if ($scope.toolmakerDropdown[i].selected1 != undefined && $scope.toolmakerDropdown[i].selected1 == true) {
        $scope.toolmakerDropdown[i].selected1 = false;
      }
    }

    $scope.filtObj = {
      "filterMG": $scope.filterMG,
      "filterBT": $scope.filterBT,
      "filtertmk": $scope.setArr,
      "filterPG": $scope.filterPG,
      "filtReq": $scope.tmkarg,
      "tmkReq": $scope.tmkReq,
      "setArr": $scope.setArr
    };
    cmm.filtObj = $scope.filtObj;
    $scope.changePrj($scope.cmm.projectCode, $scope.cmm.label, $scope.cmm.baslineNum);
  };

  if (cmm.projectCode == undefined) toastr.warning("Select ProjectCode");else $scope.changePrj(cmm.projectCode, cmm.label, cmm.baslineNum);
});
"use strict";

exports.__esModule = true;

var ajax_1 = require("rxjs/ajax");

var rxjs_1 = require("rxjs");

rxjs_1.forkJoin({
  google: ajax_1.ajax.getJSON('https://api.github.com/users/google'),
  microsoft: ajax_1.ajax.getJSON('https://api.github.com/users/microsoft'),
  users: ajax_1.ajax.getJSON('https://api.github.com/users')
}).subscribe(console.log);
"use strict";

angular.module('App.quoteComparisionCtrl').controller('targetCostCtrl', function ($scope, Upload, $window, $log, $state, NgTableParams, cmm) {
  $scope.cmm = cmm;
  $scope.cmm.label = 'A';
  $scope.gridOptions = {
    pagination: true,
    paginationPageSize: 10,
    components: {
      moodEditor: DropDownTemplate,
      customHeaderGroupComponent: CustomHeaderGroup,
      htmlText: htmlText,
      genderCellRenderer: CellRender,
      cellSelect: CellSelect
    },
    columnDefs: [{
      headerName: "PART_NUMBER",
      field: "PART_NUMBER"
    }],
    rowData: null
  };

  $scope.xlSave = function () {
    var temp = [];
    $scope.gridOptions.api.forEachLeafNode(function (n, i) {
      console.log("data=>", n.data);
      var data = n.data;

      _.keys(n.data).filter(function (d) {
        return d.match(/^R[0-9]/i);
      }).forEach(function (d1) {
        var _t = {
          "new": {
            ERFQ_PROJECT_REFERENCES: {
              PROJECT_CODE: $scope.cmm.projectCode,
              ERFQ_NUMBER_COMPAIR: Number(i) + 1,
              PART_NUMBER: 1,
              PR_PROJECT_CODE: data[d1].PROJECTCODE,
              PR_PARTNUMBER: data[d1].PARTNUMBER,
              PR_NOMENCLATURE: data[d1].NOMENCLATURE,
              PR_TOOLMAKERID: data[d1].TOOLMAKER,
              PR_BASICCOST: data[d1].BASICCOST,
              PR_LANDEDCOST: data[d1].LANDEDCOST,
              PR_NOOFDIES: data[d1].NOOFDIES,
              PR_DIEWEIGHT: data[d1].DIEWEIGHT,
              PR_COSTPERTON: data[d1].COSTPERTON,
              BASELINE_NUM: $scope.cmm.baslineNum,
              PREFERENCE_PARAM: 1,
              CATEGORY: $scope.cmm.label,
              TARGET_COST: 1
            }
          }
        };
        temp.push(_t);
      });

      _.keys(n.data).filter(function (d) {
        return d.match(/^C[0-9]/i);
      }).forEach(function (d1) {
        var _t = {
          "new": {
            ERFQ_PROJECT_REFERENCES: {
              PROJECT_CODE: $scope.cmm.projectCode,
              ERFQ_NUMBER_COMPAIR: Number(i) + 1,
              PART_NUMBER: 1,
              PR_PROJECT_CODE: "",
              PR_PARTNUMBER: "",
              PR_NOMENCLATURE: "",
              PR_TOOLMAKERID: data[d1].value,
              PR_BASICCOST: "",
              PR_LANDEDCOST: "",
              PR_NOOFDIES: "",
              PR_DIEWEIGHT: "",
              PR_COSTPERTON: "",
              BASELINE_NUM: $scope.cmm.baslineNum,
              PREFERENCE_PARAM: 1,
              CATEGORY: $scope.cmm.label,
              TARGET_COST: 1
            }
          }
        };
        temp.push(_t);
      });

      _.keys(n.data).filter(function (d) {
        return d.match(/^Toolmaker[0-9]/i);
      }).forEach(function (d1) {
        var _t = {
          "new": {
            ERFQ_PROJECT_REFERENCES: {
              PROJECT_CODE: $scope.cmm.projectCode,
              ERFQ_NUMBER_COMPAIR: Number(i) + 1,
              PART_NUMBER: 1,
              PR_PROJECT_CODE: "",
              PR_PARTNUMBER: "",
              PR_NOMENCLATURE: "",
              PR_TOOLMAKERID: data[d1],
              PR_BASICCOST: "",
              PR_LANDEDCOST: "",
              PR_NOOFDIES: "",
              PR_DIEWEIGHT: "",
              PR_COSTPERTON: "",
              BASELINE_NUM: $scope.cmm.baslineNum,
              PREFERENCE_PARAM: 1,
              CATEGORY: $scope.cmm.label,
              TARGET_COST: 1
            }
          }
        };
        temp.push(_t);
      });
    });
    console.log("temp save data=>", temp);
    console.log("temp save cmm=>", $scope.cmm);
    post('UpdateErfqProjectReferences', temp, function (data) {
      toastr.success("Record Successfully Saved");
    }, function (e1, e2, e3) {});
  };

  function jqCall() {
    $("#rAdd").bind("click", function () {
      $scope.pushRcolDef();
    });
    $("#rSub").bind("click", function () {
      $scope.rmRcolDef();
    });
    $("#cAdd").bind("click", function () {
      $scope.pushCcolDef();
    });
    $("#cSub").bind("click", function () {
      $scope.rmCcolDef();
    });
    $("#tmkrAdd").bind("click", function () {
      tmkrAdd($scope.gridOptions);
    });
    $("#tmkrSub").bind("click", function () {
      console.log("tmkrSub");
    });
  }

  $scope.htmTmkrAdd = function () {
    tmkrAdd($scope.gridOptions);
  };

  function tmkrAdd(gop) {
    var newAdd = "";
    var rArr = gop.columnDefs.filter(function (d) {
      return d.headerName.match(/Toolmaker Preference_$/i);
    });

    if (rArr.length > 0) {
      newAdd = "Toolmaker" + (Number(rArr[0].children.length) + 1);
    }

    gop.api.forEachLeafNode(function (n, i) {
      n.data[newAdd] = "";
    });

    if (rArr.length > 0) {
      rArr[0].children.push({
        headerName: newAdd,
        field: newAdd,
        editable: true,
        cellRenderer: 'genderCellRenderer',
        cellRendererParams: function cellRendererParams(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              value: d.TOOLMAKER_NAME,
              key: d.TOOLMAKER_ID
            };
          });

          return {
            params2: _t
          };
        },
        cellEditorSelector: function cellEditorSelector(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              text: d.TOOLMAKER_NAME,
              value: d.TOOLMAKER_ID
            };
          });

          return {
            component: 'cellSelect',
            params: {
              values: _t
            }
          };
        }
      });
      console.log("gop.columnDefs R ADDED=>", gop.columnDefs);
      gop.api.setColumnDefs(angular.copy(gop.columnDefs));
      setTimeout(function () {
        jqCall();
      }, 500);
    }
  }

  function xmltojson(data, key) {
    return $.cordys.json.findObjects(data, key);
  }

  function autoSizeAll(data) {
    var allColumnIds = [];
    data.columnApi.getAllColumns().forEach(function (column) {
      allColumnIds.push(column.colId);
    });
    data.columnApi.autoSizeColumns(allColumnIds);
  }

  function post(method, qr, success, cb) {
    $.cordys.ajax({
      method: method,
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: qr,
      success: success,
      cb: cb
    });
  }

  function initPro(temp) {
    return _.map(temp, function (d) {
      var rArr = _.keys(d).filter(function (d1) {
        return d1.match(/^R[0-9]/i);
      });

      if (rArr.length == 0) {
        d.R1 = {
          PROJECTCODE: "",
          PARTNUMBER: "",
          NOMENCLATURE: "",
          TOOLMAKER: "",
          BASICCOST: "",
          LANDEDCOST: "",
          NOOFDIES: "",
          DIEWEIGHT: "",
          COSTPERTON: ""
        };
      }

      var ll = _.keys(d.LANDEDCOST);

      for (var i = 1; i <= ll.length; i++) {
        d['L' + i] = {
          LANDEDCOST: d.LANDEDCOST['L' + i],
          NOOFDIES: d.NOOFDIES['L' + i],
          DIEWEIGHT: d.DIEWEIGHT['L' + i],
          BASICCOST: d.BASICCOST['L' + i],
          COSTPERTON: d.BASICCOST['L' + i]
        };
      }

      ;
      return d;
    });
  }

  function commDisc(data) {
    var cArr = _.filter(_.keys(data[0]), function (d) {
      return d.match(/^C[0-9]/);
    });

    if (cArr.length == 0) {
      data.forEach(function (d) {
        d.C1 = {
          key: "",
          value: ""
        };
      });
    }

    var tmkr = _.filter(_.keys(data[0]), function (d) {
      return d.match(/^Toolmaker[0-9]/);
    });

    if (tmkr.length == 0) {
      data.forEach(function (d) {
        d.Toolmaker1 = "";
      });
    }

    if (_.keys(data[0]).indexOf("Remark") == -1) {
      data.forEach(function (d) {
        d.Remark = "";
      });
    }
  }

  function rmC(gop) {
    var t = gop.columnDefs.filter(function (d) {
      return d.headerName.match(/^C[0-9]/i);
    });

    if (t.length > 1) {
      var id = _.findIndex(gop.columnDefs, t[t.length - 1]);

      gop.columnDefs.splice(id, 1);
      console.log(gop.columnDefs);
      gop.api.setColumnDefs(angular.copy(gop.columnDefs));
    } else {
      toastr.warning("Not a Valid");
    }

    setTimeout(function () {
      jqCall();
    }, 500);
  }

  function rmR(gop) {
    var t = gop.columnDefs.filter(function (d) {
      return d.headerName.match(/^R[0-9]/i);
    });

    if (t.length > 1) {
      var id = _.findIndex(gop.columnDefs, t[t.length - 1]);

      gop.columnDefs.splice(id, 1);
      console.log(gop.columnDefs);
      gop.api.setColumnDefs(angular.copy(gop.columnDefs));
    } else {
      toastr.warning("Not a Valid");
    }

    setTimeout(function () {
      jqCall();
    }, 500);
  }

  function pushC(gop) {
    debugger;

    var cArr = _.filter(gop.columnDefs, function (d) {
      return d.headerName.match(/^C[0-9]/i);
    });

    if (cArr.length > 0) {
      var lastIndex = _.findIndex(gop.columnDefs, cArr[cArr.length - 1]);

      var cellEditorSelector = function cellEditorSelector(params) {
        debugger;
        return {
          component: 'moodEditor',
          params: {
            values: _.map(params.data.dropTm, 'TOOLMAKER_NAME')
          }
        };
      };

      var arr = [];
      var d = "C" + (cArr.length + 1);
      gop.api.forEachNode(function (node, index) {
        node.data[d] = {
          key: "",
          value: ""
        };
      });
      arr.push({
        headerName: "Key",
        field: d + ".key",
        editable: true
      });
      arr.push({
        headerName: "Value",
        field: d + ".value",
        editable: true,
        cellRenderer: 'genderCellRenderer',
        cellRendererParams: function cellRendererParams(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              value: '<i class="fas fa-rupee-sign"></i>' + d.TOOLMAKER_NAME,
              key: d.TOOLMAKER_ID
            };
          });

          return {
            params2: _t
          };
        },
        cellEditorSelector: function cellEditorSelector(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              text: d.TOOLMAKER_NAME,
              value: d.TOOLMAKER_ID
            };
          });

          return {
            component: 'cellSelect',
            params: {
              values: _t
            }
          };
        }
      });
      gop.columnDefs.splice(lastIndex + 1, 0, {
        headerName: d,
        children: arr,
        headerGroupComponent: 'customHeaderGroupComponent'
      });
      gop.api.setColumnDefs(angular.copy(gop.columnDefs));
      setTimeout(function () {
        jqCall();
      }, 500);
    }
  }

  function pushR(gop) {
    var newAdd = "";
    var rArr = gop.columnDefs.filter(function (d) {
      return d.headerName.match(/^R[0-9]/i);
    });

    if (rArr.length > 0) {
      newAdd = "R" + (Number(rArr.length) + 1);
    }

    gop.api.forEachLeafNode(function (n, i) {
      n.data[newAdd] = {
        PROJECTCODE: "",
        PARTNUMBER: "",
        NOMENCLATURE: "",
        TOOLMAKER: "",
        BASICCOST: "",
        LANDEDCOST: "",
        NOOFDIES: "",
        DIEWEIGHT: "",
        COSTPERTON: ""
      };
    });

    if (rArr.length > 0) {
      gop.columnDefs.splice(_.findIndex(gop.columnDefs, {
        headerName: "L1"
      }), 0, {
        headerName: newAdd,
        children: rCol(newAdd),
        headerGroupComponent: 'customHeaderGroupComponent'
      });
      console.log("gop.columnDefs R ADDED=>", gop.columnDefs);
      gop.api.setColumnDefs(angular.copy(gop.columnDefs));
    }

    setTimeout(function () {
      jqCall();
    }, 500);
  }

  function rCol(colKey) {
    var arr = [];
    arr.push({
      editable: true,
      headerName: "PROJECTCODE",
      field: colKey + ".PROJECTCODE"
    });
    arr.push({
      editable: true,
      headerName: "PARTNUMBER",
      field: colKey + ".PARTNUMBER",
      columnGroupShow: 'open'
    });
    arr.push({
      editable: true,
      headerName: "NOMENCLATURE",
      field: colKey + ".NOMENCLATURE",
      columnGroupShow: 'open'
    });
    arr.push({
      editable: true,
      headerName: "TOOLMAKER",
      field: colKey + ".TOOLMAKER",
      columnGroupShow: 'open'
    });
    arr.push({
      editable: true,
      headerName: "BASICCOST",
      field: colKey + ".BASICCOST",
      columnGroupShow: 'open'
    });
    arr.push({
      editable: true,
      headerName: "LANDEDCOST",
      field: colKey + ".LANDEDCOST",
      columnGroupShow: 'open'
    });
    arr.push({
      editable: true,
      headerName: "NOOFDIES",
      field: colKey + ".NOOFDIES",
      columnGroupShow: 'open'
    });
    arr.push({
      editable: true,
      headerName: "DIEWEIGHT",
      field: colKey + ".DIEWEIGHT",
      columnGroupShow: 'open'
    });
    arr.push({
      editable: true,
      headerName: "COSTPERTON",
      field: colKey + ".COSTPERTON",
      columnGroupShow: 'open'
    });
    return arr;
  }

  function addR(temp) {
    var tmp = [];

    _.filter(_.keys(temp[0]), function (x1) {
      return x1.match(/^R[0-9]/);
    }).forEach(function (d) {
      tmp.push({
        headerName: d + '<div class="float-right"><i id="rSub" class="border rounded-circle bg-danger text-light fas fa-minus" style="font-size: 25px;"></i> <i id="rAdd"  class="border rounded-circle bg-success text-light   fas fa-plus " style="font-size: 25px;"></i></div>',
        children: rCol(d),
        headerGroupComponent: 'customHeaderGroupComponent'
      });
    });

    return tmp;
  }

  function gridopInit() {
    return [{
      headerName: "PART_NUMBER",
      field: "PART_NUMBER"
    }];
  }

  function changePrjQr(projectCode, panelGroup, bNum, cmm) {
    return {
      "comparisonType": "TargetCost",
      "panelGroup": panelGroup,
      "projectCode": projectCode,
      "baselineNum": cmm.baslineNum,
      "budgeted": "",
      "partNum": "",
      "decimalPlace": "5",
      "preferences": "",
      "ComparePref": "LandedCost",
      "toolmakersRequired": '',
      "panelGrouping": ''
    };
  }

  function changePrjSuccess(data) {
    var temp = xmltojson(data, "COMPARISON");
    temp = initPro(temp);
    console.log("grid-data=>", temp);
    $scope.$apply();
    $scope.gridOptions.api.setColumnDefs($scope.gridOptions.columnDefs);
    $scope.gridOptions.api.setRowData(temp);
  }

  function addTm(temp) {
    var TOOLMAKER = [];
    Object.keys(temp[0].ToolmakerPref).forEach(function (d) {
      var z = {
        headerName: d,
        field: "ToolmakerPref." + d,
        cellClass: ['ToolmakerPref'],
        editable: true,
        cellRenderer: 'genderCellRenderer',
        cellRendererParams: function cellRendererParams(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              value: d.TOOLMAKER_NAME,
              key: d.TOOLMAKER_ID
            };
          });

          return {
            params2: _t
          };
        },
        cellEditorSelector: function cellEditorSelector(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              text: d.TOOLMAKER_NAME,
              value: d.TOOLMAKER_ID
            };
          });

          return {
            component: 'cellSelect',
            params: {
              values: _t
            }
          };
        }
      };
      TOOLMAKER.push(z);
    });
    delete TOOLMAKER[0].columnGroupShow;
    return {
      headerName: 'Toolmaker Preference',
      headerGroupComponent: 'customHeaderGroupComponent',
      width: '300px',
      children: TOOLMAKER
    };
  }

  function addTmkColDef(temp) {
    var tmp = [];

    _.filter(_.keys(temp[0]), function (d) {
      return d.match(/^Toolmaker[0-9]/i);
    }).forEach(function (d) {
      var arr = [];
      arr.push({
        headerName: d,
        field: d,
        editable: true,
        cellRenderer: 'genderCellRenderer',
        cellRendererParams: function cellRendererParams(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              value: d.TOOLMAKER_NAME,
              key: d.TOOLMAKER_ID
            };
          });

          return {
            params2: _t
          };
        },
        cellEditorSelector: function cellEditorSelector(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              text: d.TOOLMAKER_NAME,
              value: d.TOOLMAKER_ID
            };
          });

          return {
            component: 'cellSelect',
            params: {
              values: _t
            }
          };
        }
      });
      tmp.push({
        width: 300,
        headerName: '<div class="float-right"><i id="tmkrSub" class="border rounded-circle bg-danger text-light fas fa-minus" style="font-size: 25px;"></i> <i id="tmkrAdd"  class="border rounded-circle bg-success text-light   fas fa-plus " style="font-size: 25px;"></i></div>' + 'Toolmaker Preference_',
        children: arr
      });
    });

    tmp.push({
      headerName: "Remark",
      field: "Remark",
      editable: true
    });
    return tmp;
  }

  function addCommDisc(temp) {
    var tmp = [],
        cellEditorSelector = function cellEditorSelector(params) {
      var _t = _.map(params.data.dropTm, 'TOOLMAKER_NAME');

      _t.splice(0, 0, 'Select');

      return {
        component: 'moodEditor',
        params: {
          values: _t
        }
      };
    };

    _.filter(_.keys(temp[0]), function (d) {
      return d.match(/^C[0-9]/i);
    }).forEach(function (d) {
      var arr = [];
      arr.push({
        headerName: "Key",
        field: d + ".key",
        editable: true
      });
      arr.push({
        headerName: "Value",
        field: d + ".value",
        editable: true,
        cellRenderer: 'genderCellRenderer',
        cellRendererParams: function cellRendererParams(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              value: d.TOOLMAKER_NAME,
              key: d.TOOLMAKER_ID
            };
          });

          return {
            params2: _t
          };
        },
        cellEditorSelector: function cellEditorSelector(params) {
          var _t = _.map(params.data.dropTm, function (d) {
            return {
              text: d.TOOLMAKER_NAME,
              value: d.TOOLMAKER_ID
            };
          });

          return {
            component: 'cellSelect',
            params: {
              values: _t
            }
          };
        }
      });
      tmp.push({
        headerName: d + '<div class="float-right"><i id="cSub" class="border rounded-circle bg-danger text-light fas fa-minus" style="font-size: 25px;"></i> <i id="cAdd"  class="border rounded-circle bg-success text-light   fas fa-plus " style="font-size: 25px;"></i></div>',
        children: arr,
        headerGroupComponent: 'customHeaderGroupComponent'
      });
    });

    return tmp;
  }

  function addL(temp) {
    var tmp = [];

    _.filter(_.keys(temp[0]), function (d) {
      return d.match(/L[0-9]/);
    }).forEach(function (d) {
      var arr = [];
      arr.push({
        headerName: "Base Cost",
        field: d + ".BASICCOST.VALUE"
      });
      arr.push({
        headerName: "Landed Cost",
        field: d + ".LANDEDCOST.VALUE",
        columnGroupShow: 'open'
      });
      arr.push({
        headerName: "No Of Dies",
        field: d + ".NOOFDIES.VALUE",
        columnGroupShow: 'open'
      });
      arr.push({
        headerName: "Die Weight",
        field: d + ".DIEWEIGHT.VALUE",
        columnGroupShow: 'open'
      });
      arr.push({
        headerName: "Cost Per Ton",
        field: d + ".COSTPERTON.VALUE",
        columnGroupShow: 'open'
      });
      tmp.push({
        headerName: d,
        children: arr,
        headerGroupComponent: 'customHeaderGroupComponent'
      });
    });

    return tmp;
  }

  $scope.createExcel = function () {
    var params = {
      "skipHeader": false,
      "columnGroups": true,
      "skipFooters": false,
      "skipGroups": false,
      "skipPinnedTop": false,
      "skipPinnedBottom": false,
      "allColumns": false,
      "onlySelected": false,
      "suppressQuotes": false,
      "fileName": "",
      "columnSeparator": ""
    };
    $scope.gridOptions.api.exportDataAsCsv(params);
  };

  $scope.addRColNewDef = function () {
    pushR($scope.gridOptions);
  };

  $scope.pushRcolDef = function () {
    pushR($scope.gridOptions);
  };

  $scope.rmRcolDef = function () {
    rmR($scope.gridOptions);
  };

  $scope.pushCcolDef = function () {
    pushC($scope.gridOptions);
  };

  $scope.rmCcolDef = function () {
    rmC($scope.gridOptions);
  };

  function mainCall(projectCode, panelGroup, bNum, cmm, tmArr) {
    post('GetERFQComparisonData', changePrjQr(projectCode, panelGroup, bNum, cmm), function (data) {
      var temp = xmltojson(data, "TARGETCOMPARISON");
      temp.forEach(function (d) {
        d.dropTm = tmArr;
      });
      temp = initPro(temp);
      commDisc(temp);
      console.log("after commDuisc=>", temp);
      console.log("grid-data=>", temp);
      $scope.gridOptions.api.setRowData(temp);
      $scope.gridOptions.columnDefs = gridopInit();
      $scope.gridOptions.columnDefs.push(addTm(temp));
      $scope.gridOptions.columnDefs = _.concat($scope.gridOptions.columnDefs, addR(temp));
      $scope.gridOptions.columnDefs = _.concat($scope.gridOptions.columnDefs, addL(temp));
      $scope.gridOptions.columnDefs = _.concat($scope.gridOptions.columnDefs, addCommDisc(temp));
      $scope.gridOptions.columnDefs = _.concat($scope.gridOptions.columnDefs, addTmkColDef(temp));
      console.log("after add C col def=>", $scope.gridOptions.columnDefs);
      $scope.gridOptions.columnDefs.forEach(function (d) {
        d.width = 400;
      });
      $scope.gridOptions.api.setColumnDefs($scope.gridOptions.columnDefs);
      autoSizeAll($scope.gridOptions);
      setTimeout(function () {
        jqCall();
      }, 500);
    }, function (e1, e2, e3) {});
  }

  $scope.changePrj = function (projectCode, panelGroup, bNum) {
    post('GetToolMakersforCompair', function (pcode, pgroup) {
      return {
        projectCode: pcode,
        panelGroup: pgroup
      };
    }(projectCode, panelGroup), function (data) {
      mainCall(projectCode, panelGroup, bNum, cmm, xmltojson(data, "ERFQ_TOOLMAKER_MASTER"));
    }, function (e1, e2, e3) {});
  };

  $scope.$watchCollection('cmm', function (newValue, oldValue) {
    if (newValue.projectCode != oldValue.projectCode || newValue.label != oldValue.label) $scope.changePrj(newValue.projectCode, newValue.label, cmm.baslineNum);
  }, true);
  if ($scope.cmm.projectCode == undefined) toastr.warning("Select ProjectCode");else $scope.changePrj($scope.cmm.projectCode, $scope.cmm.label, cmm.baslineNum);
});
"use strict";

var CellRender = function () {
  function CellRender() {}

  var _proto = CellRender.prototype;

  _proto.init = function init(params) {
    this.eGui = document.createElement('span');
    var getData = params.params2.filter(function (d) {
      return d.key == params.value;
    });
    if (getData.length > 0) this.eGui.innerHTML = getData[0].value;else this.eGui.innerHTML = "-";
  };

  _proto.getGui = function getGui() {
    return this.eGui;
  };

  return CellRender;
}();

var CellText = function () {
  function CellText() {}

  var _proto2 = CellText.prototype;

  _proto2.init = function init() {
    this.html = document.createElement('input');
    this.html.value = params.value;
  };

  _proto2.getGui = function getGui() {
    return this.html;
  };

  _proto2.afterGuiAttached = function afterGuiAttached() {
    this.html.focus();
    this.html.select();
  };

  _proto2.getValue = function getValue() {
    return this.html.value;
  };

  _proto2.destroy = function destroy() {};

  _proto2.isPopup = function isPopup() {
    return false;
  };

  return CellText;
}();

var CellSelect = function () {
  function CellSelect() {
    this.selected();
  }

  var _proto3 = CellSelect.prototype;

  _proto3.init = function init(params) {
    this.div = document.createElement('div');
    this.div.style.width = '100%';
    this.div.style.height = '100%';
    this.gui = document.createElement('select');
    this.gui.style.width = '100%';
    this.gui.style.height = '100%';

    for (var i = 0; i < params.values.length; i++) {
      var op = document.createElement('option');
      op.text = params.values[i].text;
      op.value = params.values[i].value;
      this.gui.add(op);
    }

    this.div.appendChild(this.gui);
    var that = this;
    this.gui.addEventListener('change', function (event) {
      params.value = params.values[event.target.selectedIndex].value;

      if (params.value != undefined) {
        that.selected(params.value);
      }
    });
  };

  _proto3.selected = function selected(value) {
    this.seledtedValue = value;
  };

  _proto3.getGui = function getGui() {
    return this.div;
  };

  _proto3.getValue = function getValue() {
    return this.seledtedValue;
  };

  _proto3.afterGuiAttached = function afterGuiAttached() {
    this.div.focus();
  };

  return CellSelect;
}();

var CellSelectCb = function () {
  function CellSelectCb() {}

  var _proto4 = CellSelectCb.prototype;

  _proto4.init = function init(cb) {
    cb();
  };

  _proto4.selected = function selected(value) {
    this.seledtedValue = value;
  };

  _proto4.getGui = function getGui() {
    return this.div;
  };

  _proto4.getValue = function getValue() {
    return this.gui.options[e.selectedIndex].value;
  };

  _proto4.afterGuiAttached = function afterGuiAttached() {
    this.gui.focus();
  };

  return CellSelectCb;
}();
"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var show = {
  color: [{
    key: 'red'
  }, {
    key: 'blue'
  }, {
    key: 'yellow'
  }, {
    key: 'black'
  }]
};
var _default = show;
exports["default"] = _default;
"use strict";

angular.module('App.tmProcessSubmission', ['ui.router', 'ngAnimate', 'ngSanitize', 'ui.bootstrap', 'ngFileUpload']).component('dbmultiple', {
  transclude: true,
  template: "<div class=\"dropdown\" ng-transclude>\n    <button class=\"btn border dropdown-toggle\" \n    type=\"button\" \n    style=\"width:100%;\"\n    id=\"dropdownMenuButton\" \n    data-toggle=\"dropdown\" \n    aria-haspopup=\"true\" \n    aria-expanded=\"false\"\n    ng-class=\"{disabled:!($ctrl.dbdisabled=='Yes')}\"\n    >\n    <div class=\"float-left\">\n    </div>\n      Select\n    </button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n    <span class=\"dropdown-item\" ng-repeat=\"d in $ctrl.op\">\n        <input type=\"checkbox\" class=\"m-2\" ng-model=\"$ctrl.arr[$index]\" ng-change=\"$ctrl.change($index)\">{{d.PART_NUMBER}}\n      </span>\n    </div>\n  </div>",
  controller: function controller($compile) {
    var that = this;
    this.arr = [];

    this.$onInit = function () {
      this.model = [];
      console.log("this.op", this.op);
      console.log("this.model", this.model);
      console.log("this.scope", this.scope);
    };

    this.change = function (id) {
      if (that.index == id) {
        toastr.error("Not Selected!");
        return;
      }

      if (_.find(that.model, function (d) {
        return that.op[id].PART_NUMBER == d;
      }) == undefined) {
        $("#" + that.op[id].PART_NUMBER).hide();
        that.op[id].freeze = true;
        that.model.push(that.op[id].PART_NUMBER);
      } else {
        var index = _.findIndex(that.model, function (d) {
          return d == that.op[id].PART_NUMBER;
        });

        $("#" + that.model[index]).show();

        var _d = _.find(this.op, {
          PART_NUMBER: that.model[index]
        });

        _d.freeze = false;
        that.model.splice(index, 1);
      }

      console.log("this.op", this.op);
      console.log("that.model=>", that.model);
    };
  },
  bindings: {
    op: '<',
    model: '=',
    dbdisabled: '<',
    index: '<',
    scope: '='
  }
}).config(function ($stateProvider, $urlRouterProvider, $locationProvider) {
  $stateProvider.state('tmProcessSubmission', {
    url: '/tmProcessSubmission/:erfqID',
    templateUrl: 'app/TMProcessSubmission/tmProcessSubmission.tpl.htm',
    controller: 'tmProcessSubmission as vm',
    params: {
      erfqID: null,
      erfqDetails: []
    }
  });
}).controller('tmProcessSubmission', function ($scope, NgTableParams, $state, Upload, $timeout) {
  var that = this;

  $scope.scope = function () {
    return $scope;
  };

  if ($state.params.erfqDetails.hasOwnProperty("TASK_ID")) {
    $scope.obj = $state.params.erfqDetails;
    $scope.indix = $state.params.erfqID;
    $scope.group = $scope.obj.ERFQ_NUMBER.split("-")[2];
    localStorage.setItem("erfqdetails", JSON.stringify($scope.obj));
  } else if (JSON.parse(localStorage.getItem("erfqdetails")) != null) {
    $scope.obj = JSON.parse(localStorage.getItem("erfqdetails"));
  } else {
    $state.go("erfqInbox");
  }

  $scope.row = {};
  $scope.isValid = [];
  $scope.isView = [];
  $scope.isParts = [];
  $scope.enableParts = [];
  $scope.noclicks = [];
  $scope.fileData = [];
  $scope.FiletupleIndex = [];
  $scope.loggedUserID = [];
  $scope.xmlObject = [];
  $scope.currStatus = [];
  $scope.newERFQNum = [];
  $.cordys.ajax({
    method: "GetLoggedInUserID",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.loggedUserID = $.cordys.json.findObjects(e, "getLoggedInUserID")[0];
      $scope.username = $scope.loggedUserID.getLoggedInUserID;
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });
  $.cordys.ajax({
    method: "GetXMLObject",
    namespace: "http://schemas.cordys.com/1.0/xmlstore",
    dataType: "* json",
    parameters: {
      key: "com/Mahindra/Mahindra_eRFQ/erfqMailConfig.xml"
    },
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.xmlObject = $.cordys.json.findObjects(e, "eRFQConfig");
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error while loading XML object data");
    }
  });

  $scope.getInboxStatus = function (erfq, btnStatus) {
    $.cordys.ajax({
      method: "GetErfqInboxObject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        ERFQ_NUMBER: erfq
      },
      success: function success(response) {
        $scope.inboxDetails = $.cordys.json.findObjects(response, "ERFQ_INBOX")[0];

        if (btnStatus == 'MOM') {
          toastr.info("Please wait till process is getting completed");
          $.cordys.ajax({
            method: "UpdateErfqInbox",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_INBOX": {
                    TASK_ID: $scope.inboxDetails.TASK_ID,
                    ERFQ_NUMBER: $scope.inboxDetails.ERFQ_NUMBER,
                    PROJECT_CODE: $scope.inboxDetails.PROJECT_CODE,
                    USERNAME: $scope.inboxDetails.USERNAME,
                    USER_ID: $scope.inboxDetails.USER_ID,
                    TARGET_DATE: $scope.inboxDetails.TARGET_DATE,
                    RECEIVED_DATE: $scope.inboxDetails.RECEIVED_DATE,
                    STATUS: $scope.inboxDetails.STATUS,
                    INITIATED_BY: $scope.inboxDetails.INITIATED_BY
                  }
                },
                "new": {
                  "ERFQ_INBOX": {
                    STATUS: "TEDIMO",
                    USER_ID: $scope.MSIE.AFSPM_MEMBER_TOKEN
                  }
                }
              }
            },
            success: function success(response) {
              $.cordys.ajax({
                method: "SendMailWrapper",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  toDisplayNames: $scope.ToolMakerData[0].CONTACT_PERSON,
                  toEmailIDs: $scope.ToolMakerData[0].EMAIL_TO,
                  ccDisplayNames: $scope.StampL.AFSPM_MEMBER_NAME + ";" + $scope.MSIE.AFSPM_MEMBER_NAME + ";",
                  ccEmailIDs: $scope.StampL.AFSPM_MEMBER_TOKEN + ";" + $scope.MSIE.AFSPM_MEMBER_TOKEN + ";",
                  emailBody: "Dear " + $scope.ToolMakerData[0].CONTACT_PERSON + ",<br/>Greetings from Mahindra &amp; Mahindra Ltd.!<br/><br/>This is to inform you that our team has uploaded TEDIMO on VOB system. <br/>Please go through all the point.<br/>In-case of queries please contact project lead Mr. (" + $scope.MSIE.AFSPM_MEMBER_NAME + "), contact no (number).<br/><br/>Direct link: www.xxxxxxxxxxxxxxxxxxxx.com <br/><br/><br/>Kind regards, CME dept, Mahindra &amp; Mahindra Ltd."
                },
                success: function success(data) {
                  toastr.info("Mail has been send to Toolmaker for Technical discussion confirmation.");
                  $scope.currStatus = 'TEDIMO';
                  $scope.showHide();
                },
                error: function error(jqXHR, textStatus, errorThrown) {
                  toastr.error("Error while sending mail of technical discussion confirmation to Toolamaker,please contact administrator");
                  $scope.currStatus = 'TEDIMO';
                  $scope.showHide();
                }
              });
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
            }
          });
        }

        if (btnStatus == '') {
          if ($scope.obj.STATUS == 'TEDIMO' || $scope.inboxDetails.STATUS == 'TEDIMO') {
            updateinbox("QUSU", $scope.username);
          }
        }

        if (btnStatus == 'reject') {
          updateinbox("TOREPRDO", $scope.username);
        }

        if (btnStatus == 'qReview') {
          updateinbox("QUCO", $scope.MSIE.AFSPM_MEMBER_NAME);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
      }
    });
  };

  $scope.showHide = function () {
    if ($scope.roles == 'Toolmaker') {
      if ($scope.obj.STATUS == 'TOPRSU' || $scope.obj.STATUS == 'TOREPRDO') {
        $('#BtnSubmit').show();
        $('#BtnRegret').show();
        $('#BtnIntTechD').hide();
        $('#BtnTechDM').hide();
        $('#BTNReject').hide();
      } else if ($scope.obj.STATUS == 'RGRT') {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
      } else if ($scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU') {
        $('#BtnSubmit').show();
        $('#BtnRegret').hide();
        $('#BtnIntTechD').hide();
        $('#BtnTechDM').hide();
        $('#BTNReject').hide();
      } else if ($scope.obj.STATUS == 'CMEAC' || $scope.obj.STATUS == 'QURE') {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
        $('#BtnIntTechD').hide();
        $('#BtnTechDM').hide();
        $('#BTNReject').hide();
        $('#BTNReject1').hide();
        $("#textArea").val($scope.obj.TOOLMAKER_REMARK);
      }
    } else if ($scope.roles == 'MSIE' && ($scope.obj.STATUS == 'TOREPRDO' || $scope.obj.STATUS == 'CMEAC' || $scope.obj.STATUS == 'INTRDI' || $scope.obj.STATUS == 'TEDIMO' || $scope.obj.STATUS == 'QURE' || $scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU')) {
      if ($scope.roles == 'MSIE' && $scope.currStatus == 'INTRDI') {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
        document.getElementById("BtnIntTechD").disabled = true;
        document.getElementById("BtnTechDM").disabled = false;
        $('#BTNReject').show();
      } else if ($scope.roles == 'MSIE' && $scope.currStatus == 'TEDIMO') {
        document.getElementById("BtnIntTechD").disabled = true;
        document.getElementById("BtnTechDM").disabled = true;
        $('#BtnSubmit').show();
        $('#BtnRegret').hide();
        $('#BTNReject').show();
      } else if ($scope.roles == 'MSIE' && $scope.obj.STATUS == 'QUSU') {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
        $("#textArea").val($scope.obj.MSIE_REMARKS);
      } else if ($scope.roles == 'MSIE' && ($scope.obj.STATUS == 'TOREPRDO' || $scope.obj.STATUS == 'QURESU')) {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
        $("#textArea").val($scope.obj.MSIE_REMARKS);
      } else {
        if ($scope.obj.STATUS == 'INTRDI') {
          document.getElementById("BtnIntTechD").disabled = true;
          document.getElementById("BtnTechDM").disabled = false;
          $('#BtnSubmit').hide();
          $('#BtnRegret').hide();
          $('#BTNReject').show();
        } else if ($scope.obj.STATUS == 'TEDIMO') {
          document.getElementById("BtnIntTechD").disabled = true;
          document.getElementById("BtnTechDM").disabled = true;
          $('#BtnSubmit').show();
          $('#BtnRegret').hide();
          $('#BTNReject').show();
        } else {
          if ($scope.roles == 'MSIE' && $scope.obj.STATUS != 'QURE') {
            document.getElementById("BtnIntTechD").disabled = false;
            document.getElementById("BtnTechDM").disabled = true;
            $('#BtnSubmit').hide();
            $('#BtnRegret').hide();
            $('#BTNReject').hide();
          }
        }
      }
    }
  };

  $scope.combinations = ["Yes", "No"];
  var data = [];
  $scope.roleValue = [];
  $scope.roles = [];
  $scope.onerow = false;
  $scope.tmshow = false;
  $scope.msshow = false;
  $scope.tpsshow = false;
  $scope.cmeshow = false;
  $scope.qsshow = false;
  $scope.qrshow = false;
  $scope.msrows = false;
  $scope.complete = false;
  $scope.rejectT = false;
  $scope.rejectTC = false;
  $scope.checkA = [];
  $scope.checkA.push("false");
  $scope.checkR = [];
  $scope.checkR.push("false");
  $scope.checkC = [];
  $scope.checkC.push("false");
  $scope.disbleRows = [];

  $scope.dataCall = function (records) {
    $scope.tableParams = new NgTableParams({}, {
      filterDelay: 0,
      dataset: records
    });
  };

  $scope.FileArray = [];
  $scope.HFileArray = [];
  $.cordys.ajax({
    method: "GetDataByToolMakerID",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      toolMaker_id: $scope.obj.TOOLMAKER_ID
    },
    success: function success(response) {
      $scope.tmDetails = response.tuple.old.ERFQ_TOOLMAKER_MASTER;
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
    }
  });
  $.cordys.ajax({
    method: "GetTaskIDByErfqNum",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      erfqNumber: $scope.obj.ERFQ_NUMBER
    },
    success: function success(response) {
      $scope.obj.TASK_ID = response.tuple.old.erfq_inbox.TASK_ID;
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
    }
  });
  $.cordys.ajax({
    method: "GetErfqInboxObject",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
    },
    success: function success(response) {
      $scope.inboxDetails = $.cordys.json.findObjects(response, "ERFQ_INBOX")[0];
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
    }
  });

  $scope.getSLnMSIE = function () {
    if ($scope.complete == true) {
      $.cordys.ajax({
        method: "GetMSIEStampingLeadByTaskIDForComp",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          taskid: $scope.obj.TASK_ID
        },
        success: function success(response) {
          for (var i = 0; i < response.tuple.length; i++) {
            if (response.tuple[i].old.afs_proj_members.AFSPM_MEMBER_ROLE == "MSIE") {
              $scope.MSIE = response.tuple[i].old.afs_proj_members;
            } else if (response.tuple[i].old.afs_proj_members.AFSPM_MEMBER_ROLE == "Stamping Lead") {
              $scope.StampL = response.tuple[i].old.afs_proj_members;
            }
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
        }
      });
    } else {
      $.cordys.ajax({
        method: "GetMSIEStampingLeadByTaskID",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          taskID: $scope.obj.TASK_ID
        },
        success: function success(response) {
          for (var i = 0; i < response.tuple.length; i++) {
            if (response.tuple[i].old.afs_proj_members.AFSPM_MEMBER_ROLE == "MSIE") {
              $scope.MSIE = response.tuple[i].old.afs_proj_members;
            } else if (response.tuple[i].old.afs_proj_members.AFSPM_MEMBER_ROLE == "Stamping Lead") {
              $scope.StampL = response.tuple[i].old.afs_proj_members;
            }
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
        }
      });
    }
  };

  $scope.$watchGroup('records', function (newNames, oldNames) {
    console.log("newNames=>", newNames);
    console.log("oldNames=>", oldNames);
  }, true);

  $scope.getDataForToolmaker = function () {
    $scope.getSLnMSIE();
    $scope.newERFQNum = $scope.obj.ERFQ_NUMBER;
    $scope.newERFQNum = $scope.newERFQNum.substring(0, $scope.newERFQNum.lastIndexOf("-"));
    $scope.newERFQNum = $scope.newERFQNum + "-" + $scope.obj.E_BOM;
    $.cordys.ajax({
      method: "GetPartAndDocDataByErfqNumber",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        erfqNumber: $scope.newERFQNum
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        console.log(e);
        $scope.docData = $.cordys.json.findObjects(e, "TABLE");
        $scope.records = angular.copy($scope.docData);
        $scope.parts = $scope.records;
        $scope.dataCall($scope.records);

        for (var i = 0; i < $scope.records.length; i++) {
          $scope.isValid[i] = false;
          $scope.isParts[i] = null;
          $scope.enableParts[i] = true;

          if ($scope.records[i].DOCEXIST == 'YES') {
            $scope.isView[i] = true;
          }

          $.cordys.ajax({
            method: "GetTotalCostByErfqNumberAndPart",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            parameters: {
              erfqNumber: $scope.obj.ERFQ_NUMBER,
              partNum: $scope.records[i].PART_NUMBER
            },
            dataType: "* json",
            async: false,
            success: function success(resp) {
              if (resp.tuple == undefined) {
                $scope.records[i].COST = null;
              } else {
                $scope.records[i].COST = resp.tuple.old.erfq_die_cost_Data.TOTAL_COST;
              }
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in loading data");
            }
          });
        }

        if ($scope.records.length == 1) {
          $scope.onerow = true;
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  $scope.getDataForMSIE = function () {
    $scope.getSLnMSIE();
    $.cordys.ajax({
      method: "GetPartAndDocDataByErfqNumberForMSIE",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        erfqNumber: $scope.obj.ERFQ_NUMBER
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        console.log(e);
        $scope.docData = $.cordys.json.findObjects(e, "TABLE");
        $scope.records = angular.copy($scope.docData);
        $scope.parts = $scope.records;
        $scope.dataCall($scope.records);

        for (var i = 0; i < $scope.records.length; i++) {
          $scope.isValid[i] = false;
          $scope.isParts[i] = null;
          $scope.checkA[i] = false;
          $scope.checkR[i] = false;
          $scope.checkC[i] = false;
          $scope.enableParts[i] = true;

          if ($scope.records[i].DOCEXIST == 'YES') {
            $scope.isView[i] = true;
          }

          if ($scope.records[i].PROCESS_COMBINATION == 'Yes') {
            $scope.records[i].prcsCombo = $scope.records[i].PROCESS_COMBINATION;
            $scope.records[i].part_combined = $scope.records[i].PART_COMBINED;
            $scope.disbleRows.push($scope.records[i].PART_COMBINED);
            $scope.enableParts[i] = false;
          }

          $.cordys.ajax({
            method: "GetTotalCostByErfqNumberAndPart",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            parameters: {
              erfqNumber: $scope.obj.ERFQ_NUMBER,
              partNum: $scope.records[i].PART_NUMBER
            },
            dataType: "* json",
            async: false,
            success: function success(resp) {
              if (resp.tuple == undefined) {
                $scope.records[i].COST = null;
              } else {
                $scope.records[i].COST = resp.tuple.old.erfq_die_cost_Data.TOTAL_COST;
              }
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in loading data");
            }
          });
        }

        $scope.markDisabel();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  $scope.cftMappedUsers = [];
  $.cordys.ajax({
    method: "GetMyERFQDetails",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    parameters: {
      UserID: $scope.username
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.cftMappedUsers = $.cordys.json.findObjects(e, "ERFQ_PROJECT_REQ");
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.dataCallFunction = function (data) {
    $scope.tableParams = new NgTableParams({}, {
      filterDelay: 0,
      dataset: data
    });
  };

  $.cordys.ajax({
    method: "GetEventsforProject",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      "ProjectCode": $scope.obj.PROJECT_CODE
    },
    success: function success(data) {
      $scope.PannelSupplyIdsArray = [];
      $scope.tableDetails = $.cordys.json.findObjects(data, "ERFQ_EVENT_MASTER");

      if ($scope.tableDetails.length != 0) {
        $scope.tableArray = [];
      } else {
        toastr.error("Error in loading data");
      }

      $scope.tableArray = $.cordys.json.findObjects(data, "ERFQ_EVENT_MASTER");

      for (var i = 0; i < $scope.tableArray.length; i++) {
        if ($scope.tableArray[i].PANNEL_SUPPLY_ID != "" && $scope.tableArray[i].PANNEL_SUPPLY_ID != null && $scope.tableArray[i].PANNEL_SUPPLY_ID != undefined) {
          $scope.PannelSupplyIdsArray.push(parseInt($scope.tableArray[i].PANNEL_SUPPLY_ID));
        }
      }

      $scope.tableArray = $scope.tableArray.map(function (d) {
        delete d.PANNEL_SUPPLY_ID;
        d.EVENT1 = JSON.stringify(d);
        return d;
      });
      data = angular.copy($scope.tableArray);
      $scope.dataCallFunction(data);
      $scope.$apply();
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.getPRDocs = function () {
    $.cordys.ajax({
      method: "GetERFQAllUploadedDoc",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "projectCode": $scope.obj.PROJECT_CODE,
        "documentType": $scope.username
      },
      success: function success(data) {
        if ($scope.roles == "Toolmaker") {
          $scope.FileArray = $.cordys.json.findObjects(data, "ERFQ_UPLOADED_DOCUMENT_HISTORY");
        } else {
          $scope.hFileArray = $.cordys.json.findObjects(data, "ERFQ_UPLOADED_DOCUMENT_HISTORY");
        }

        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  $.cordys.ajax({
    method: "GetERFQDocsbyProjCode",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      "projectCode": $scope.obj.PROJECT_CODE,
      "documentType": "ProcessDocument"
    },
    success: function success(data) {
      console.log(data);
      $scope.HFileArray = data.tuple;
      $scope.getPRDocs();
      $scope.showHide();
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });
  $.cordys.ajax({
    method: "GetERFQ_PROJECT_REQObject",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      "PROJECT_CODE": $scope.obj.PROJECT_CODE
    },
    success: function success(data) {
      if ($.cordys.json.findObjects(data, "ERFQ_PROJECT_REQ").length != 0) {
        $scope.LoadData = $.cordys.json.findObjects(data, "ERFQ_PROJECT_REQ");
        $scope.Total_Vol = $scope.LoadData[0].TOTAL_VALUE;
        $scope.Total_Prod = $scope.LoadData[0].TOTAL_PRODUCTION;
        $scope.Total_Duration = $scope.LoadData[0].DURABILITY_YEARS;
        $scope.Total_Waranty = $scope.LoadData[0].WARRANTY_YEARS;

        if ($scope.LoadData[0].BUILD_QUALITY == "M&M") {
          $scope.selectOne = true;
          $scope.selectTwo = false;
        } else {
          $scope.selectTwo = true;
          $scope.selectOne = false;
        }

        $scope.$apply();
      } else {}
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.markDisabel = function () {
    for (var i = 0; i < $scope.disbleRows.length; i++) {
      for (var j = 0; j < $scope.records.length; j++) {
        if ($scope.disbleRows[i] == $scope.records[j].PART_NUMBER) {
          $scope.isValid[j] = true;
          $scope.noclicks[j] = true;
        } else $scope.noclicks[j] = false;
      }
    }
  };

  $scope.processTemplate = function () {
    $.cordys.ajax({
      method: "GetXMLObject",
      namespace: "http://schemas.cordys.com/1.0/xmlstore",
      dataType: "* json",
      parameters: {
        key: "com/Mahindra/Mahindra_eRFQ/FixedDocuments.xml"
      },
      success: function success(data) {
        $scope.obj.DOCUMENTS = $.cordys.json.findObjects(data, "ProjectReqDoc");
        $scope.docLength = $scope.obj.DOCUMENTS.length;

        for (var i = 0; i < $scope.docLength; i++) {
          $scope.obj.DOCUMENT_PATH = $scope.obj.DOCUMENTS[i];
          $scope.downloadFile($scope.obj, 0);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
      }
    });
  };

  $scope.estimateSheet = function (selRow, num) {
    var inboxObj = $scope.obj;
    $state.go("dieCostEstimation", {
      rowNo: num,
      rowDetails: selRow,
      projDetails: inboxObj
    });
  };

  $scope.startDiscussion = function (btnStatus) {
    $scope.erfq = [];
    $scope.pojCode = [];
    $scope.toolmakerID = [];
    $scope.groupID = [];
    $scope.bomID = [];
    $scope.ToolMakerData = [];
    $scope.erfq = $scope.obj.ERFQ_NUMBER;
    $scope.pojCode = $scope.erfq.substring(0, $scope.erfq.indexOf("-"));
    $scope.erfq = $scope.erfq.substring($scope.erfq.indexOf("-") + 1, $scope.erfq.length);
    $scope.toolmakerID = $scope.erfq.substring(0, $scope.erfq.indexOf("-"));
    $scope.erfq = $scope.erfq.substring($scope.erfq.indexOf("-") + 1, $scope.erfq.length);
    $scope.groupID = $scope.erfq.substring(0, $scope.erfq.indexOf("-"));
    $scope.bomID = $scope.obj.E_BOM;
    $.cordys.ajax({
      method: "GetEmailID",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        groupNo: $scope.groupID,
        pojCode: $scope.pojCode,
        bomID: $scope.bomID,
        toolMakerID: $scope.toolmakerID
      },
      success: function success(data) {
        $scope.ToolMakerData = $.cordys.json.findObjects(data, "erfq_float");

        if (btnStatus == 'Initiate') {
          toastr.info("Please wait till process is getting completed.");
          $.cordys.ajax({
            method: "UpdateErfqInbox",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_INBOX": {
                    TASK_ID: $scope.inboxDetails.TASK_ID,
                    ERFQ_NUMBER: $scope.inboxDetails.ERFQ_NUMBER,
                    PROJECT_CODE: $scope.inboxDetails.PROJECT_CODE,
                    USERNAME: $scope.inboxDetails.USERNAME,
                    USER_ID: $scope.inboxDetails.USER_ID,
                    TARGET_DATE: $scope.inboxDetails.TARGET_DATE,
                    RECEIVED_DATE: $scope.inboxDetails.RECEIVED_DATE,
                    STATUS: $scope.inboxDetails.STATUS,
                    INITIATED_BY: $scope.inboxDetails.INITIATED_BY
                  }
                },
                "new": {
                  "ERFQ_INBOX": {
                    STATUS: "INTRDI",
                    USER_ID: $scope.MSIE.AFSPM_MEMBER_TOKEN
                  }
                }
              }
            },
            success: function success(response) {
              $.cordys.ajax({
                method: "SendMailWrapper",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  toDisplayNames: $scope.ToolMakerData[0].CONTACT_PERSON,
                  toEmailIDs: $scope.ToolMakerData[0].EMAIL_TO,
                  ccDisplayNames: $scope.StampL.AFSPM_MEMBER_NAME + ";" + $scope.MSIE.AFSPM_MEMBER_NAME + ";",
                  ccEmailIDs: $scope.StampL.AFSPM_MEMBER_TOKEN + ";" + $scope.MSIE.AFSPM_MEMBER_TOKEN + ";",
                  emailBody: "Dear (" + $scope.ToolMakerData[0].CONTACT_PERSON + "),<br/><br/>Greetings from Mahindra &amp; Mahindra ltd.!<br/><br/>This is to inform you that you have accomplished first step of Process submission.<br/>Our team has gone through your processes &amp; hence we will like to technically discuss the same in detail.<br/><br/>Below are the details for the meeting plan:<br/>Date:(date)<br/> Time:(time) Indian std time.<br/>Venue:(place) or webex<br/><br/><br/> Kind regards,CME dept.Mahindra &amp; Mahindra Ltd"
                },
                success: function success(data) {
                  toastr.info("Mail has been send to Toolmaker for discussion.");
                  toastr.success("Please discuss with toolmaker and update the status.");
                  $scope.currStatus = 'INTRDI';
                  $scope.showHide();
                },
                error: function error(jqXHR, textStatus, errorThrown) {
                  toastr.error("Error while sending mail to Toolamaker due to technical error, please contact administrator.");
                  $scope.currStatus = 'INTRDI';
                  $scope.showHide();
                }
              });
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
            }
          });
        }

        if (btnStatus == 'MOM') {
          $scope.getInboxStatus($scope.obj.ERFQ_NUMBER, btnStatus);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error while loading Toolmaker details.");
      }
    });
  };

  $scope.decide = function (val, num) {
    if (val == 'Accept') {
      $scope.checkA[num] = true;
      $scope.checkC[num] = false;
      $scope.checkR[num] = false;
      $scope.records[num].DECISION = val;
    } else if (val == 'Conditionally Accept') {
      $scope.checkA[num] = false;
      $scope.checkC[num] = true;
      $scope.checkR[num] = false;
      $scope.records[num].DECISION = val;
    } else if (val == 'Rework') {
      $scope.checkA[num] = false;
      $scope.checkC[num] = false;
      $scope.checkR[num] = true;
      $scope.records[num].DECISION = val;
    }
  };

  $scope.enable = function (data, no) {
    if (data == "Yes") {
      $scope.enableParts[no] = false;
    } else {
      $scope.enableParts[no] = true;
      $scope.records[no].PANEL_QUANTITY = null;
      $scope.records[no].prcsCombo = '';
      $scope.records[no].PROCESS_COMBINATION = '';

      for (var i = 0; i < $scope.parts.length; i++) {
        if ($scope.parts[i].PART_NUMBER == $scope.records[no].part_combined) {
          $scope.isValid[i] = false;
          $scope.noclicks[i] = false;
          document.getElementById("row" + i).style.pointerEvents = "auto";
          document.getElementById("row" + i).style.backgroundColor = "#ffffff";
          $scope.records[no].part_combined = null;
          return;
        }
      }
    }
  };

  $scope.calc = function (number, no) {
    if ($scope.parts[no].PART_NUMBER == number) {
      toastr.warning("cannot select same part");
      $scope.records[no].part_combined = $scope.isParts[no];
      return;
    }

    if ($scope.isParts[no] != null && $scope.isParts[no] != number) {
      for (var c = 0; c < $scope.parts.length; c++) {
        if ($scope.isParts[no] == $scope.parts[c].PART_NUMBER) {
          $scope.isValid[c] = false;
          document.getElementById("row" + c).style.backgroundColor = "#ffffff";
        }
      }
    }

    for (var i = 0; i < $scope.parts.length; i++) {
      if ($scope.parts[i].PART_NUMBER == number) {
        if ($scope.parts[i].prcsCombo == "No") {
          toastr.error("Cannot be Combined");
          $scope.records[no].part_combined = $scope.isParts[no];
          $scope.records[no].PANEL_QUANTITY = null;
          return;
        }

        if ($scope.isValid[i] == true) {
          toastr.error("already selected");
          $scope.records[no].part_combined = $scope.isParts[no];
          $scope.records[no].PANEL_QUANTITY = null;
          document.getElementById("row" + i).style.pointerEvents = "auto";
          document.getElementById("row" + i).style.backgroundColor = "#ffffff";
          return;
        } else {
          $scope.records[no].PANEL_QUANTITY = 2;
          $scope.isParts[no] = number;
          $scope.noclicks[no] = false;
          $scope.noclicks[i] = true;
          $scope.isValid[i] = true;
          $scope.enable('', i);
          document.getElementById("row" + i).readOnly = true;
          document.getElementById("row" + i).style.backgroundColor = "#e9ecef";
          return;
        }
      }
    }
  };

  $.cordys.ajax({
    method: "GetRoles",
    namespace: "http://schemas.cordys.com/1.0/ldap",
    parameters: {
      dn: "",
      depth: ""
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.roles1 = $.cordys.json.findObjects(e, "user");

      for (var i = 0; i < $scope.roles1[0].role.length; i++) {
        $scope.CordysRole = $scope.CordysRole + "," + $scope.roles1[0].role[i].description;
      }

      if ($scope.CordysRole.includes("MSIE")) {
        $scope.roles = "MSIE";
        $scope.msshow = true;

        if ($scope.obj.STATUS == 'CMEAC' || $scope.obj.STATUS == 'INTRDI' || $scope.obj.STATUS == 'TEDIMO') {
          $scope.tpsshow = false;
          $scope.cmeshow = true;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.rejectTC = true;
          $scope.getDataForMSIE();
        } else if ($scope.obj.STATUS == 'QURE') {
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = true;
          $scope.rejectTC = true;
          $scope.getDataForMSIE();
        } else if ($scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = true;
          $scope.qrshow = false;
          $scope.getDataForMSIE();

          if (!$scope.obj.MSIE_REMARKS == "") {
            $("#textArea").val($scope.obj.MSIE_REMARKS);
            document.getElementById("textArea").readOnly = true;
          }
        } else if ($scope.obj.STATUS == 'TOREPRDO') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = true;
          $scope.rejectT = true;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.getDataForMSIE();

          if (!$scope.obj.MSIE_REMARKS == "") {
            $("#textArea").val($scope.obj.MSIE_REMARKS);
            document.getElementById("textArea").readOnly = true;
          }
        } else if ($scope.obj.STATUS == 'Quote Comparison') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = true;
          $scope.getDataForMSIE();

          if (!$scope.obj.MSIE_REMARKS == "") {
            $("#textArea").val($scope.obj.MSIE_REMARKS);
            document.getElementById("textArea").readOnly = true;
          }
        }
      }

      if ($scope.CordysRole.includes("Toolmaker")) {
        $scope.roles = "Toolmaker";
        $scope.tmshow = true;

        if ($scope.obj.STATUS == 'TOPRSU') {
          $scope.tpsshow = true;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.rejectTC = true;
          $scope.getDataForToolmaker();
        } else if ($scope.obj.STATUS == 'RGRT') {
          $scope.tpsshow = true;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.rejectTC = true;
          $scope.getDataForToolmaker();
        } else if ($scope.obj.STATUS == 'TOREPRDO') {
          $scope.tpsshow = true;
          $scope.rejectT = true;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.getDataForMSIE();
        } else if ($scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU') {
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = true;
          $scope.qrshow = false;
          $scope.getDataForMSIE();
        } else if ($scope.obj.STATUS == 'CMEAC') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = false;
          $scope.cmeshow = true;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.rejectTC = false;
          $scope.getDataForMSIE();

          if (!$scope.obj.TOOLMAKER_REMARK == "") {
            $("#textArea").val($scope.obj.TOOLMAKER_REMARK);
            document.getElementById("textArea").readOnly = true;
          }
        } else if ($scope.obj.STATUS == 'QURE') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = true;
          $scope.getDataForMSIE();

          if (!$scope.obj.TOOLMAKER_REMARK == "") {
            $("#textArea").val($scope.obj.TOOLMAKER_REMARK);
            document.getElementById("textArea").readOnly = true;
          }
        }
      }

      if ($scope.CordysRole.includes("Toolmaker") && $scope.CordysRole.includes("MSIE")) {
        $scope.roles = "";
      }
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.CreateDeleteFileArray = function (obj, tid) {
    if ($scope.FiletupleIndex.indexOf(tid) <= -1 && (obj != undefined || obj != "")) {
      $scope.FileNameArray.push(obj);
      $scope.FiletupleIndex.push(tid);
    } else if ($scope.FiletupleIndex.indexOf(tid) > -1 && (obj != undefined || obj != "")) {
      var indxOfObj = $scope.FileNameArray.indexOf(obj);
      var tuplIndxOfObj1 = $scope.FiletupleIndex.indexOf(tid);
      $scope.FileNameArray.splice(indxOfObj, 1);
      $scope.FiletupleIndex.splice(tuplIndxOfObj1, 1);
    }
  };

  $scope.FiledeleteRow = function () {
    $scope.FiletupleIndex = $scope.FiletupleIndex.sort(function (a, b) {
      return b - a;
    });

    if ($scope.FiletupleIndex.length != 0) {
      for (var i = 0; i < $scope.FiletupleIndex.length; i++) {
        $scope.deleteFileFrom_UDH($scope.FileArray[$scope.FiletupleIndex[i]]);
        $scope.FileArray.splice($scope.FiletupleIndex[i], 1);
      }
    }

    $scope.FiletupleIndex.length = 0;
    $scope.FiletupleIndex = [];
  };

  $scope.deleteFileFrom_UDH = function (DeleteFile) {
    $.cordys.ajax({
      method: "UpdateErfqUploadedDocumentHistory",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: '* json',
      parameters: {
        tuple: {
          "old": {
            "ERFQ_UPLOADED_DOCUMENT_HISTORY": {
              "DOCUMENT_HISTORY_SEQID": DeleteFile.DOCUMENT_HISTORY_SEQID
            }
          }
        }
      },
      success: function success(e) {
        toastr.success("File is deleted!");
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in uploading file");
      }
    });
  };

  $scope.downloadFile = function (grid, myRow) {
    debugger;
    $scope.attachObj = grid;
    var filPath = window.location.href.split("com")[0] + grid.DOCUMENT_PATH.split("shared\\")[1];
    var dnldFile = document.createElement("A");
    dnldFile.href = filPath;
    dnldFile.download = filPath.substr(filPath.lastIndexOf('/') + 1);
    document.body.appendChild(dnldFile);
    dnldFile.click();
    document.body.removeChild(dnldFile);
    console.log("download file=>", myRow.entity);
  };

  $scope.InsertUD_InsertUDH = function (type) {
    if (type == 'ProjectReq') {
      $scope.caughtPN = null;
      doctype = $scope.username;
    } else {
      doctype = type;
    }

    if ($scope.obj.STATUS == 'TOPRSU') {
      $scope.revision = '001';
    } else if ($scope.obj.STATUS == 'TOREPRDO') {
      $scope.revision = '002';
    }

    $.cordys.ajax({
      method: "UpdateErfqUploadedDocument",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: '* json',
      parameters: {
        tuple: {
          "new": {
            "ERFQ_UPLOADED_DOCUMENT": {
              "PROJECT_CODE": $scope.obj.PROJECT_CODE,
              "DOCUMENT_NAME": $scope.fileName,
              "DOCUMENT_PATH": $scope.ServerFilePath,
              "DOCUMENT_TYPE": doctype,
              "DOCUMENT_DESC": 'uploaded from inbox task',
              "PART_NUMBER": $scope.caughtPN,
              "REVISION": $scope.revision
            }
          }
        }
      },
      success: function success(e) {
        $scope.ids = $.cordys.json.findObjects(e, "ERFQ_UPLOADED_DOCUMENT")[0].DOCUMENT_ID;
        toastr.info("File Uploaded!");
        $scope.$apply;

        if (type == 'ProjectReq') {
          var FileNameObj = {
            "DOCUMENT_NAME": $scope.fileName,
            "DOCUMENT_PATH": $scope.ServerFilePath,
            "DOCUMENT_TYPE": doctype,
            "REVISION": $scope.revision
          };
          $scope.FileArray.push(FileNameObj);
          $scope.$apply();
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in uploading file");
      }
    });
  };

  $scope.browseAndAddRow = function (fileObj, ev, screen) {
    debugger;
    $scope.ev = ev;

    if (screen == 'ProcessDocument') {
      fileObj = ev.target.files[0];
      $scope.fileName = fileObj.name;
      $scope.fileData.push($scope.fileName);
      $scope.isView[$scope.rowNo] = true;
    }

    if (fileObj != null) {
      $scope.fileName = fileObj.name;

      if ($scope.fileName.split('.')[1] == 'pdf' || $scope.fileName.split('.')[1] == 'jpg' || $scope.fileName.split('.')[1] == 'png' || $scope.fileName.split('.')[1] == 'jpeg' || $scope.fileName.split('.')[1] == 'docx' || $scope.fileName.split('.')[1] == 'doc') {}

      extension = fileObj.name.substr(fileObj.name.lastIndexOf(".") + 1);

      if ("dll" != extension.toLowerCase() && "exe" != extension.toLowerCase()) {
        var fileReader = new FileReader();

        fileReader.onload = function (fileLoadedEvent) {
          $scope.uploadFile(fileLoadedEvent.target.result, fileLoadedEvent.target.filename);
        };

        fileReader.filename = fileObj.name;
        fileReader.readAsDataURL(fileObj);
      } else {
        toastr.error('Unable to Read File');
      }

      $scope.uploadFile = function (file, name) {
        debugger;
        name = $scope.fileName;

        if (!(file == "data:" || file == null)) {
          file = file.split("base64,")[1];
          $.cordys.ajax({
            method: "UploadERFQDoc",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: '* json',
            parameters: {
              FileName: name,
              FileContent: file
            },
            success: function success(e) {
              debugger;
              $scope.ServerFilePath = $.cordys.json.findObjects(e, "uploadERFQDoc")[0].uploadERFQDoc;
              $scope.InsertUD_InsertUDH(screen);
              $scope.$apply;
              $.cordys.ajax({
                method: "GetERFQDocsbyProjCode",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  "projectCode": $scope.obj.PROJECT_CODE,
                  "documentType": screen
                },
                success: function success(data) {
                  debugger;
                  console.log(data);
                },
                error: function error(jqXHR, textStatus, errorThrown) {
                  toastr.error("Error in loading data");
                }
              });
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in uploading file");
            }
          });
        } else {
          toastr.error("Sorry file is empty, Pls upload other file");
          $scope.fileData.pop();
          $scope.$apply;
        }
      };
    } else {}
  };

  $scope.ViewFileName = function (fileObj) {
    if (fileObj != null) {
      $scope.FileObject = fileObj;
      $scope.fileName = fileObj.name;
      $scope.fileData.push(fileObj.name);
      $scope.DOCUMENT_NAME1 = fileObj.name;

      if ($scope.fileName.split('.')[1] == 'pdf' || $scope.fileName.split('.')[1] == 'jpg' || $scope.fileName.split('.')[1] == 'png' || $scope.fileName.split('.')[1] == 'jpeg' || $scope.fileName.split('.')[1] == 'docx' || $scope.fileName.split('.')[1] == 'doc') {}

      extension = fileObj.name.substr(fileObj.name.lastIndexOf(".") + 1);

      if ("dll" != extension.toLowerCase() && "exe" != extension.toLowerCase()) {
        var fileReader = new FileReader();

        fileReader.onload = function (fileLoadedEvent) {};

        fileReader.filename = fileObj.name;
        fileReader.readAsDataURL(fileObj);
      } else {
        toastr.error('Unable to Read File');
      }
    } else {}
  };

  $scope.getPartN = function (arr, no) {
    console.log(arr);
    $scope.caughtPN = arr.PART_NUMBER;
    $scope.rowNo = no;
    $scope.fileData = [];
    $.cordys.ajax({
      method: "GetDocumentDetailsByPartNumber",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "projCode": $scope.obj.PROJECT_CODE,
        "documentType": "ProcessDocument",
        "partNumber": $scope.caughtPN
      },
      success: function success(data) {
        if (data.tuple != undefined) {
          $scope.allDocs = $.cordys.json.findObjects(data, "erfq_uploaded_document");
          $scope.fileData.push();
        } else {
          $scope.allDocs = [];
          $scope.fileData.push();
        }

        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  function completeTask() {
    $.cordys.ajax({
      method: "PerformTaskAction",
      namespace: "http://schemas.cordys.com/notification/workflow/1.0",
      dataType: "* json",
      parameters: {
        TaskId: $scope.obj.TASK_ID,
        Action: 'COMPLETE',
        Memo: ''
      },
      success: function success(response) {
        toastr.success("Task Completed");
        $state.go("erfqInbox", {
          flag: "child"
        });
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
      }
    });
  }

  function updateinbox(getstatus, username) {
    $.cordys.ajax({
      method: "UpdateErfqInbox",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": {
          "old": {
            "ERFQ_INBOX": {
              TASK_ID: $scope.inboxDetails.TASK_ID,
              ERFQ_NUMBER: $scope.inboxDetails.ERFQ_NUMBER,
              PROJECT_CODE: $scope.inboxDetails.PROJECT_CODE,
              USERNAME: $scope.inboxDetails.USERNAME,
              USER_ID: $scope.inboxDetails.USER_ID,
              TARGET_DATE: $scope.inboxDetails.TARGET_DATE,
              RECEIVED_DATE: $scope.inboxDetails.RECEIVED_DATE,
              STATUS: $scope.inboxDetails.STATUS,
              INITIATED_BY: $scope.inboxDetails.INITIATED_BY
            }
          },
          "new": {
            "ERFQ_INBOX": {
              STATUS: getstatus
            }
          }
        }
      },
      success: function success(response) {
        toastr.success("Inbox Updated");
        completeTask();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
      }
    });
  }

  $scope.updateLastRemarks = function (setStatus) {
    if ($scope.obj.LastRemarks != undefined) {
      if ($scope.roles == "Toolmaker") {
        $.cordys.ajax({
          method: "UpdateErfqProcessSubmission",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_PROCESS_SUBMISSION": {
                  ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
                }
              },
              "new": {
                "ERFQ_PROCESS_SUBMISSION": {
                  TOOLMAKER_REMARK: $scope.obj.LastRemarks,
                  STATUS: setStatus
                }
              }
            }
          },
          success: function success(response) {
            console.log("updated");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      } else if ($scope.roles == "MSIE") {
        $.cordys.ajax({
          method: "UpdateErfqProcessSubmission",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_PROCESS_SUBMISSION": {
                  ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
                }
              },
              "new": {
                "ERFQ_PROCESS_SUBMISSION": {
                  MSIE_REMARKS: $scope.obj.LastRemarks,
                  STATUS: setStatus
                }
              }
            }
          },
          success: function success(response) {
            console.log("updated");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }
    }
  };

  $scope.savechanges = function () {
    if ($scope.obj.STATUS == 'TOPRSU') {
      for (var i = 0; i < $scope.records.length; i++) {
        if ($scope.records[i].prcsCombo != "Yes") {
          $scope.records[i].prcsCombo = '';
          $scope.records[i].PANEL_QUANTITY = null;
          $scope.records[i].part_combined = null;
        }

        if ($scope.records[i].TMRemarks == undefined) {
          $scope.records[i].TMRemarks = null;
        }

        $.cordys.ajax({
          method: "UpdateErfqProcessParts",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "new": {
                "ERFQ_PROCESS_PARTS": {
                  ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER,
                  PROJECT_CODE: $scope.obj.PROJECT_CODE,
                  TOOLMAKER_NAME: $scope.obj.TOOLMAKER_ID,
                  PROCESS_COMBINATION: $scope.records[i].prcsCombo,
                  PART_COMBINED: $scope.records[i].part_combined,
                  PANEL_QUANTITY: $scope.records[i].PANEL_QUANTITY,
                  TOOLMAKER_REMARK: $scope.records[i].TMRemarks,
                  MSIE_REMARK: "",
                  PART_NUMBER: $scope.records[i].PART_NUMBER,
                  DECISION: "",
                  COST: "",
                  STATUS: $scope.obj.STATUS,
                  PANEL_GROUPING: $scope.group
                }
              }
            }
          },
          success: function success(response) {
            console.log('updated');
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }

      $scope.updateLastRemarks("CMEAC");
      updateinbox("CMEAC", $scope.MSIE.AFSPM_MEMBER_NAME);
    }

    if ($scope.obj.STATUS == 'TOREPRDO') {
      for (var i = 0; i < $scope.records.length; i++) {
        if ($scope.records[i].prcsCombo != "Yes") {
          $scope.records[i].prcsCombo = '';
          $scope.records[i].PANEL_QUANTITY = null;
          $scope.records[i].part_combined = null;
          $.cordys.ajax({
            method: "GetSeqNoByErfqAndPartNumber",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "erfqNumber": $scope.obj.ERFQ_NUMBER,
              "partNumber": $scope.records[i].PART_NUMBER
            },
            success: function success(data) {
              if (data.tuple != undefined) {
                $scope.records[i].PARTS_SEQ = data.tuple.old.PROCESS_PARTS_SEQ;
              }

              $scope.$apply();
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in loading data");
            }
          });
        }

        if ($scope.records[i].TMRemarks == undefined) {
          $scope.records[i].TMRemarks = null;
        }

        if ($scope.records[i].PARTS_SEQ != undefined) {
          $.cordys.ajax({
            method: "UpdateErfqProcessParts",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_PROCESS_PARTS": {
                    PROCESS_PARTS_SEQ: $scope.records[i].PARTS_SEQ
                  }
                },
                "new": {
                  "ERFQ_PROCESS_PARTS": {
                    PROCESS_COMBINATION: $scope.records[i].prcsCombo,
                    PART_COMBINED: $scope.records[i].part_combined,
                    PANEL_QUANTITY: $scope.records[i].PANEL_QUANTITY,
                    TOOLMAKER_REMARK: $scope.records[i].TMRemarks,
                    STATUS: "QUCO"
                  }
                }
              }
            },
            success: function success(response) {
              console.log('updated');
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
            }
          });
        }
      }

      $scope.updateLastRemarks("CMEAC");
      updateinbox("CMEAC", $scope.MSIE.AFSPM_MEMBER_NAME);
    }

    if ($scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU') {
      for (var i = 0; i < $scope.records.length; i++) {
        if ($scope.records[i].prcsCombo != "Yes") {
          $.cordys.ajax({
            method: "GetSeqNoByErfqAndPartNumber",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "erfqNumber": $scope.obj.ERFQ_NUMBER,
              "partNumber": $scope.records[i].PART_NUMBER
            },
            success: function success(data) {
              $scope.records[i].PARTS_SEQ = data.tuple.old.PROCESS_PARTS_SEQ;
              $scope.$apply();
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in loading data");
            }
          });
        }

        if ($scope.records[i].TMRemarks == undefined) {
          $scope.records[i].TMRemarks = null;
        }

        if ($scope.records[i].PARTS_SEQ != undefined) {
          $.cordys.ajax({
            method: "UpdateErfqProcessParts",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_PROCESS_PARTS": {
                    PROCESS_PARTS_SEQ: $scope.records[i].PARTS_SEQ
                  }
                },
                "new": {
                  "ERFQ_PROCESS_PARTS": {
                    PROCESS_COMBINATION: $scope.records[i].prcsCombo,
                    PART_COMBINED: $scope.records[i].part_combined,
                    PANEL_QUANTITY: $scope.records[i].PANEL_QUANTITY,
                    COST: $scope.records[i].COST,
                    DIE_COST_STATUS: 'submitted'
                  }
                }
              }
            },
            success: function success(response) {
              console.log('updated');
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
            }
          });
        }
      }

      $scope.updateLastRemarks("QURE");
      updateinbox("QURE", $scope.MSIE.AFSPM_MEMBER_NAME);
    }

    if ($scope.obj.STATUS == 'CMEAC' || $scope.obj.STATUS == 'TEDIMO' || $scope.obj.STATUS == 'INTRDI') {
      for (var i = 0; i < $scope.records.length; i++) {
        if ($scope.records[i].MSIERemarks == undefined) {
          $scope.records[i].MSIERemarks = null;
        }

        $.cordys.ajax({
          method: "UpdateErfqProcessParts",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_PROCESS_PARTS": {
                  PROCESS_PARTS_SEQ: $scope.records[i].PARTS_SEQ
                }
              },
              "new": {
                "ERFQ_PROCESS_PARTS": {
                  MSIE_REMARK: $scope.records[i].MSIERemarks,
                  DECISION: $scope.records[i].DECISION,
                  STATUS: $scope.obj.STATUS
                }
              }
            }
          },
          success: function success(response) {
            console.log('updated');
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }

      $scope.getInboxStatus($scope.obj.ERFQ_NUMBER, "");
      $scope.updateLastRemarks("QUSU");
    }

    if ($scope.obj.STATUS == 'QURE') {
      $scope.getInboxStatus($scope.obj.ERFQ_NUMBER, "qReview");
      $scope.updateLastRemarks("QUCO");
    }
  };

  $scope.dumpchanges = function () {
    if ($scope.obj.LastRemarks != undefined) {
      $.cordys.ajax({
        method: "UpdateErfqProcessSubmission",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          "tuple": {
            "old": {
              "ERFQ_PROCESS_SUBMISSION": {
                ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
              }
            },
            "new": {
              "ERFQ_PROCESS_SUBMISSION": {
                TOOLMAKER_REMARK: $scope.obj.LastRemarks,
                STATUS: $scope.obj.STATUS
              }
            }
          }
        },
        success: function success(response) {
          updateinbox("RGRT", $scope.username);
          localStorage.oldURL = window.location.href;
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
        }
      });
    } else {
      toastr.warning("Remarks Mandatory!");
      return;
    }
  };

  $scope.revertchanges = function () {
    if ($scope.obj.rejectRemarks != undefined) {
      if ($scope.obj.rejectRemarks != "") {
        $.cordys.ajax({
          method: "UpdateErfqProcessSubmission",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_PROCESS_SUBMISSION": {
                  ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
                }
              },
              "new": {
                "ERFQ_PROCESS_SUBMISSION": {
                  MSIE_REMARKS: $scope.obj.rejectRemarks,
                  STATUS: $scope.obj.STATUS
                }
              }
            }
          },
          success: function success(response) {
            $scope.getInboxStatus($scope.obj.ERFQ_NUMBER, "reject");
            localStorage.oldURL = window.location.href;
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      } else {
        toastr.warning("Remarks Mandatory!");
        return;
      }
    } else {
      toastr.warning("Remarks Mandatory!");
      return;
    }
  };

  $scope.rejectchanges = function () {
    if ($scope.obj.LastRemarks != undefined) {
      $.cordys.ajax({
        method: "UpdateErfqProcessSubmission",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          "tuple": {
            "old": {
              "ERFQ_PROCESS_SUBMISSION": {
                ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
              }
            },
            "new": {
              "ERFQ_PROCESS_SUBMISSION": {
                TOOLMAKER_REMARK: $scope.obj.LastRemarks,
                STATUS: $scope.obj.STATUS
              }
            }
          }
        },
        success: function success(response) {
          updateinbox("QURESU", $scope.username);
          localStorage.oldURL = window.location.href;
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
        }
      });
    } else {
      toastr.warning("Remarks Mandatory!");
      return;
    }
  };

  setTimeout(function () {}, 500);
});
"use strict";

angular.module('App.tmProcessSubmission', ['ui.router', 'ngAnimate', 'ngSanitize', 'ui.bootstrap', 'ngFileUpload']).component('dbmultiple', {
  transclude: true,
  template: "<div class=\"dropdown\" ng-transclude>\n    <button class=\"btn border dropdown-toggle\" \n    type=\"button\" \n    style=\"width:100%;\"\n    id=\"dropdownMenuButton\" \n    data-toggle=\"dropdown\" \n    aria-haspopup=\"true\" \n    aria-expanded=\"false\"\n    ng-class=\"{disabled:!($ctrl.dbdisabled=='Yes')}\"\n    >\n    <div class=\"float-left\">\n    </div>\n      Select\n    </button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n    <span class=\"dropdown-item\" ng-repeat=\"d in $ctrl.op\">\n        <input type=\"checkbox\" class=\"m-2\" ng-model=\"$ctrl.arr[$index]\" ng-change=\"$ctrl.change($index)\">{{d.PART_NUMBER}}\n      </span>\n    </div>\n  </div>",
  controller: function controller($compile) {
    var that = this;
    this.arr = [];

    this.$onInit = function () {
      this.model = [];
      console.log("this.op", this.op);
      console.log("this.model", this.model);
      console.log("this.scope", this.scope);
    };

    this.change = function (id) {
      console.log("index=>", that.index);

      if (that.index == id) {
        console.log("not select");
        return;
      }

      if (that.model.find(function (dd) {
        return dd == that.op[id];
      }) == undefined) {
        console.log("id true=>", that.op[id]);
        that.model.push(that.op[id].PART_NUMBER);
      } else {
        var index = that.model.findIndex(function (d) {
          return d == that.op[id];
        });
        console.log("else=>", that.model[index]);
        console.log(index);
        that.model.splice(index, 1);
      }

      console.log("that.model=>", that.model);
    };
  },
  bindings: {
    op: '<',
    model: '=',
    dbdisabled: '<',
    index: '<',
    scope: '='
  }
}).config(function ($stateProvider, $urlRouterProvider, $locationProvider) {
  $stateProvider.state('tmProcessSubmission', {
    url: '/tmProcessSubmission/:erfqID',
    templateUrl: 'app/TMProcessSubmission/tmProcessSubmission.tpl.htm',
    controller: 'tmProcessSubmission as vm',
    params: {
      erfqID: null,
      erfqDetails: []
    }
  });
}).controller('tmProcessSubmission', function ($scope, NgTableParams, $state, Upload, $timeout) {
  var that = this;

  $scope.scope = function () {
    return $scope;
  };

  if ($state.params.erfqDetails.hasOwnProperty("TASK_ID")) {
    $scope.obj = $state.params.erfqDetails;
    $scope.indix = $state.params.erfqID;
    $scope.group = $scope.obj.ERFQ_NUMBER.split("-")[2];
    localStorage.setItem("erfqdetails", JSON.stringify($scope.obj));
  } else if (JSON.parse(localStorage.getItem("erfqdetails")) != null) {
    $scope.obj = JSON.parse(localStorage.getItem("erfqdetails"));
  } else {
    $state.go("erfqInbox");
  }

  $scope.row = {};
  $scope.isValid = [];
  $scope.isView = [];
  $scope.isParts = [];
  $scope.enableParts = [];
  $scope.noclicks = [];
  $scope.fileData = [];
  $scope.FiletupleIndex = [];
  $scope.loggedUserID = [];
  $scope.xmlObject = [];
  $scope.currStatus = [];
  $scope.newERFQNum = [];
  $.cordys.ajax({
    method: "GetLoggedInUserID",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.loggedUserID = $.cordys.json.findObjects(e, "getLoggedInUserID")[0];
      $scope.username = $scope.loggedUserID.getLoggedInUserID;
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });
  $.cordys.ajax({
    method: "GetXMLObject",
    namespace: "http://schemas.cordys.com/1.0/xmlstore",
    dataType: "* json",
    parameters: {
      key: "com/Mahindra/Mahindra_eRFQ/erfqMailConfig.xml"
    },
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.xmlObject = $.cordys.json.findObjects(e, "eRFQConfig");
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error while loading XML object data");
    }
  });

  $scope.getInboxStatus = function (erfq, btnStatus) {
    $.cordys.ajax({
      method: "GetErfqInboxObject",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        ERFQ_NUMBER: erfq
      },
      success: function success(response) {
        $scope.inboxDetails = $.cordys.json.findObjects(response, "ERFQ_INBOX")[0];

        if (btnStatus == 'MOM') {
          toastr.info("Please wait till process is getting completed");
          $.cordys.ajax({
            method: "UpdateErfqInbox",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_INBOX": {
                    TASK_ID: $scope.inboxDetails.TASK_ID,
                    ERFQ_NUMBER: $scope.inboxDetails.ERFQ_NUMBER,
                    PROJECT_CODE: $scope.inboxDetails.PROJECT_CODE,
                    USERNAME: $scope.inboxDetails.USERNAME,
                    USER_ID: $scope.inboxDetails.USER_ID,
                    TARGET_DATE: $scope.inboxDetails.TARGET_DATE,
                    RECEIVED_DATE: $scope.inboxDetails.RECEIVED_DATE,
                    STATUS: $scope.inboxDetails.STATUS,
                    INITIATED_BY: $scope.inboxDetails.INITIATED_BY
                  }
                },
                "new": {
                  "ERFQ_INBOX": {
                    STATUS: "TEDIMO",
                    USER_ID: $scope.MSIE.AFSPM_MEMBER_TOKEN
                  }
                }
              }
            },
            success: function success(response) {
              $.cordys.ajax({
                method: "SendMailWrapper",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  toDisplayNames: $scope.ToolMakerData[0].CONTACT_PERSON,
                  toEmailIDs: $scope.ToolMakerData[0].EMAIL_TO,
                  ccDisplayNames: $scope.StampL.AFSPM_MEMBER_NAME + ";" + $scope.MSIE.AFSPM_MEMBER_NAME + ";",
                  ccEmailIDs: $scope.StampL.AFSPM_MEMBER_TOKEN + ";" + $scope.MSIE.AFSPM_MEMBER_TOKEN + ";",
                  emailBody: "Dear " + $scope.ToolMakerData[0].CONTACT_PERSON + ",<br/>Greetings from Mahindra &amp; Mahindra Ltd.!<br/><br/>This is to inform you that our team has uploaded TEDIMO on VOB system. <br/>Please go through all the point.<br/>In-case of queries please contact project lead Mr. (" + $scope.MSIE.AFSPM_MEMBER_NAME + "), contact no (number).<br/><br/>Direct link: www.xxxxxxxxxxxxxxxxxxxx.com <br/><br/><br/>Kind regards, CME dept, Mahindra &amp; Mahindra Ltd."
                },
                success: function success(data) {
                  toastr.info("Mail has been send to Toolmaker for Technical discussion confirmation.");
                  $scope.currStatus = 'TEDIMO';
                  $scope.showHide();
                },
                error: function error(jqXHR, textStatus, errorThrown) {
                  toastr.error("Error while sending mail of technical discussion confirmation to Toolamaker,please contact administrator");
                  $scope.currStatus = 'TEDIMO';
                  $scope.showHide();
                }
              });
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
            }
          });
        }

        if (btnStatus == '') {
          if ($scope.obj.STATUS == 'TEDIMO' || $scope.inboxDetails.STATUS == 'TEDIMO') {
            updateinbox("QUSU", $scope.username);
          }
        }

        if (btnStatus == 'reject') {
          updateinbox("TOREPRDO", $scope.username);
        }

        if (btnStatus == 'qReview') {
          updateinbox("QUCO", $scope.MSIE.AFSPM_MEMBER_NAME);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
      }
    });
  };

  $scope.showHide = function () {
    if ($scope.roles == 'Toolmaker') {
      if ($scope.obj.STATUS == 'TOPRSU' || $scope.obj.STATUS == 'TOREPRDO') {
        $('#BtnSubmit').show();
        $('#BtnRegret').show();
        $('#BtnIntTechD').hide();
        $('#BtnTechDM').hide();
        $('#BTNReject').hide();
      } else if ($scope.obj.STATUS == 'RGRT') {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
      } else if ($scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU') {
        $('#BtnSubmit').show();
        $('#BtnRegret').hide();
        $('#BtnIntTechD').hide();
        $('#BtnTechDM').hide();
        $('#BTNReject').hide();
      } else if ($scope.obj.STATUS == 'CMEAC' || $scope.obj.STATUS == 'QURE') {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
        $('#BtnIntTechD').hide();
        $('#BtnTechDM').hide();
        $('#BTNReject').hide();
        $('#BTNReject1').hide();
        $("#textArea").val($scope.obj.TOOLMAKER_REMARK);
      }
    } else if ($scope.roles == 'MSIE' && ($scope.obj.STATUS == 'TOREPRDO' || $scope.obj.STATUS == 'CMEAC' || $scope.obj.STATUS == 'INTRDI' || $scope.obj.STATUS == 'TEDIMO' || $scope.obj.STATUS == 'QURE' || $scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU')) {
      if ($scope.roles == 'MSIE' && $scope.currStatus == 'INTRDI') {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
        document.getElementById("BtnIntTechD").disabled = true;
        document.getElementById("BtnTechDM").disabled = false;
        $('#BTNReject').show();
      } else if ($scope.roles == 'MSIE' && $scope.currStatus == 'TEDIMO') {
        document.getElementById("BtnIntTechD").disabled = true;
        document.getElementById("BtnTechDM").disabled = true;
        $('#BtnSubmit').show();
        $('#BtnRegret').hide();
        $('#BTNReject').show();
      } else if ($scope.roles == 'MSIE' && $scope.obj.STATUS == 'QUSU') {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
        $("#textArea").val($scope.obj.MSIE_REMARKS);
      } else if ($scope.roles == 'MSIE' && ($scope.obj.STATUS == 'TOREPRDO' || $scope.obj.STATUS == 'QURESU')) {
        $('#BtnSubmit').hide();
        $('#BtnRegret').hide();
        $("#textArea").val($scope.obj.MSIE_REMARKS);
      } else {
        if ($scope.obj.STATUS == 'INTRDI') {
          document.getElementById("BtnIntTechD").disabled = true;
          document.getElementById("BtnTechDM").disabled = false;
          $('#BtnSubmit').hide();
          $('#BtnRegret').hide();
          $('#BTNReject').show();
        } else if ($scope.obj.STATUS == 'TEDIMO') {
          document.getElementById("BtnIntTechD").disabled = true;
          document.getElementById("BtnTechDM").disabled = true;
          $('#BtnSubmit').show();
          $('#BtnRegret').hide();
          $('#BTNReject').show();
        } else {
          if ($scope.roles == 'MSIE' && $scope.obj.STATUS != 'QURE') {
            document.getElementById("BtnIntTechD").disabled = false;
            document.getElementById("BtnTechDM").disabled = true;
            $('#BtnSubmit').hide();
            $('#BtnRegret').hide();
            $('#BTNReject').hide();
          }
        }
      }
    }
  };

  $scope.combinations = ["Yes", "No"];
  var data = [];
  $scope.roleValue = [];
  $scope.roles = [];
  $scope.onerow = false;
  $scope.tmshow = false;
  $scope.msshow = false;
  $scope.tpsshow = false;
  $scope.cmeshow = false;
  $scope.qsshow = false;
  $scope.qrshow = false;
  $scope.msrows = false;
  $scope.complete = false;
  $scope.rejectT = false;
  $scope.rejectTC = false;
  $scope.checkA = [];
  $scope.checkA.push("false");
  $scope.checkR = [];
  $scope.checkR.push("false");
  $scope.checkC = [];
  $scope.checkC.push("false");
  $scope.disbleRows = [];

  $scope.dataCall = function (records) {
    $scope.tableParams = new NgTableParams({}, {
      filterDelay: 0,
      dataset: records
    });
  };

  $scope.FileArray = [];
  $scope.HFileArray = [];
  $.cordys.ajax({
    method: "GetDataByToolMakerID",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      toolMaker_id: $scope.obj.TOOLMAKER_ID
    },
    success: function success(response) {
      $scope.tmDetails = response.tuple.old.ERFQ_TOOLMAKER_MASTER;
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
    }
  });
  $.cordys.ajax({
    method: "GetTaskIDByErfqNum",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      erfqNumber: $scope.obj.ERFQ_NUMBER
    },
    success: function success(response) {
      $scope.obj.TASK_ID = response.tuple.old.erfq_inbox.TASK_ID;
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
    }
  });
  $.cordys.ajax({
    method: "GetErfqInboxObject",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
    },
    success: function success(response) {
      $scope.inboxDetails = $.cordys.json.findObjects(response, "ERFQ_INBOX")[0];
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
    }
  });

  $scope.getSLnMSIE = function () {
    if ($scope.complete == true) {
      $.cordys.ajax({
        method: "GetMSIEStampingLeadByTaskIDForComp",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          taskid: $scope.obj.TASK_ID
        },
        success: function success(response) {
          for (var i = 0; i < response.tuple.length; i++) {
            if (response.tuple[i].old.afs_proj_members.AFSPM_MEMBER_ROLE == "MSIE") {
              $scope.MSIE = response.tuple[i].old.afs_proj_members;
            } else if (response.tuple[i].old.afs_proj_members.AFSPM_MEMBER_ROLE == "Stamping Lead") {
              $scope.StampL = response.tuple[i].old.afs_proj_members;
            }
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
        }
      });
    } else {
      $.cordys.ajax({
        method: "GetMSIEStampingLeadByTaskID",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          taskID: $scope.obj.TASK_ID
        },
        success: function success(response) {
          for (var i = 0; i < response.tuple.length; i++) {
            if (response.tuple[i].old.afs_proj_members.AFSPM_MEMBER_ROLE == "MSIE") {
              $scope.MSIE = response.tuple[i].old.afs_proj_members;
            } else if (response.tuple[i].old.afs_proj_members.AFSPM_MEMBER_ROLE == "Stamping Lead") {
              $scope.StampL = response.tuple[i].old.afs_proj_members;
            }
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
        }
      });
    }
  };

  $scope.$watchGroup('records', function (newNames, oldNames) {
    console.log("newNames=>", newNames);
    console.log("oldNames=>", oldNames);
  }, true);

  $scope.getDataForToolmaker = function () {
    $scope.getSLnMSIE();
    $scope.newERFQNum = $scope.obj.ERFQ_NUMBER;
    $scope.newERFQNum = $scope.newERFQNum.substring(0, $scope.newERFQNum.lastIndexOf("-"));
    $scope.newERFQNum = $scope.newERFQNum + "-" + $scope.obj.E_BOM;
    $.cordys.ajax({
      method: "GetPartAndDocDataByErfqNumber",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        erfqNumber: $scope.newERFQNum
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        console.log(e);
        $scope.docData = $.cordys.json.findObjects(e, "TABLE");
        $scope.records = angular.copy($scope.docData);
        $scope.parts = $scope.records;
        $scope.dataCall($scope.records);

        for (var i = 0; i < $scope.records.length; i++) {
          $scope.isValid[i] = false;
          $scope.isParts[i] = null;
          $scope.enableParts[i] = true;

          if ($scope.records[i].DOCEXIST == 'YES') {
            $scope.isView[i] = true;
          }

          $.cordys.ajax({
            method: "GetTotalCostByErfqNumberAndPart",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            parameters: {
              erfqNumber: $scope.obj.ERFQ_NUMBER,
              partNum: $scope.records[i].PART_NUMBER
            },
            dataType: "* json",
            async: false,
            success: function success(resp) {
              if (resp.tuple == undefined) {
                $scope.records[i].COST = null;
              } else {
                $scope.records[i].COST = resp.tuple.old.erfq_die_cost_Data.TOTAL_COST;
              }
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in loading data");
            }
          });
        }

        if ($scope.records.length == 1) {
          $scope.onerow = true;
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  $scope.getDataForMSIE = function () {
    $scope.getSLnMSIE();
    $.cordys.ajax({
      method: "GetPartAndDocDataByErfqNumberForMSIE",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      parameters: {
        erfqNumber: $scope.obj.ERFQ_NUMBER
      },
      dataType: "* json",
      async: false,
      success: function success(e) {
        console.log(e);
        $scope.docData = $.cordys.json.findObjects(e, "TABLE");
        $scope.records = angular.copy($scope.docData);
        $scope.parts = $scope.records;
        $scope.dataCall($scope.records);

        for (var i = 0; i < $scope.records.length; i++) {
          $scope.isValid[i] = false;
          $scope.isParts[i] = null;
          $scope.checkA[i] = false;
          $scope.checkR[i] = false;
          $scope.checkC[i] = false;
          $scope.enableParts[i] = true;

          if ($scope.records[i].DOCEXIST == 'YES') {
            $scope.isView[i] = true;
          }

          if ($scope.records[i].PROCESS_COMBINATION == 'Yes') {
            $scope.records[i].prcsCombo = $scope.records[i].PROCESS_COMBINATION;
            $scope.records[i].part_combined = $scope.records[i].PART_COMBINED;
            $scope.disbleRows.push($scope.records[i].PART_COMBINED);
            $scope.enableParts[i] = false;
          }

          $.cordys.ajax({
            method: "GetTotalCostByErfqNumberAndPart",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            parameters: {
              erfqNumber: $scope.obj.ERFQ_NUMBER,
              partNum: $scope.records[i].PART_NUMBER
            },
            dataType: "* json",
            async: false,
            success: function success(resp) {
              if (resp.tuple == undefined) {
                $scope.records[i].COST = null;
              } else {
                $scope.records[i].COST = resp.tuple.old.erfq_die_cost_Data.TOTAL_COST;
              }
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in loading data");
            }
          });
        }

        $scope.markDisabel();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  $scope.cftMappedUsers = [];
  $.cordys.ajax({
    method: "GetMyERFQDetails",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    parameters: {
      UserID: $scope.username
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.cftMappedUsers = $.cordys.json.findObjects(e, "ERFQ_PROJECT_REQ");
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.dataCallFunction = function (data) {
    $scope.tableParams = new NgTableParams({}, {
      filterDelay: 0,
      dataset: data
    });
  };

  $.cordys.ajax({
    method: "GetEventsforProject",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      "ProjectCode": $scope.obj.PROJECT_CODE
    },
    success: function success(data) {
      $scope.PannelSupplyIdsArray = [];
      $scope.tableDetails = $.cordys.json.findObjects(data, "ERFQ_EVENT_MASTER");

      if ($scope.tableDetails.length != 0) {
        $scope.tableArray = [];
      } else {
        toastr.error("Error in loading data");
      }

      $scope.tableArray = $.cordys.json.findObjects(data, "ERFQ_EVENT_MASTER");

      for (var i = 0; i < $scope.tableArray.length; i++) {
        if ($scope.tableArray[i].PANNEL_SUPPLY_ID != "" && $scope.tableArray[i].PANNEL_SUPPLY_ID != null && $scope.tableArray[i].PANNEL_SUPPLY_ID != undefined) {
          $scope.PannelSupplyIdsArray.push(parseInt($scope.tableArray[i].PANNEL_SUPPLY_ID));
        }
      }

      $scope.tableArray = $scope.tableArray.map(function (d) {
        delete d.PANNEL_SUPPLY_ID;
        d.EVENT1 = JSON.stringify(d);
        return d;
      });
      data = angular.copy($scope.tableArray);
      $scope.dataCallFunction(data);
      $scope.$apply();
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.getPRDocs = function () {
    $.cordys.ajax({
      method: "GetERFQAllUploadedDoc",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "projectCode": $scope.obj.PROJECT_CODE,
        "documentType": $scope.username
      },
      success: function success(data) {
        if ($scope.roles == "Toolmaker") {
          $scope.FileArray = $.cordys.json.findObjects(data, "ERFQ_UPLOADED_DOCUMENT_HISTORY");
        } else {
          $scope.hFileArray = $.cordys.json.findObjects(data, "ERFQ_UPLOADED_DOCUMENT_HISTORY");
        }

        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  $.cordys.ajax({
    method: "GetERFQDocsbyProjCode",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      "projectCode": $scope.obj.PROJECT_CODE,
      "documentType": "ProcessDocument"
    },
    success: function success(data) {
      console.log(data);
      $scope.HFileArray = data.tuple;
      $scope.getPRDocs();
      $scope.showHide();
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });
  $.cordys.ajax({
    method: "GetERFQ_PROJECT_REQObject",
    namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
    dataType: "* json",
    parameters: {
      "PROJECT_CODE": $scope.obj.PROJECT_CODE
    },
    success: function success(data) {
      if ($.cordys.json.findObjects(data, "ERFQ_PROJECT_REQ").length != 0) {
        $scope.LoadData = $.cordys.json.findObjects(data, "ERFQ_PROJECT_REQ");
        $scope.Total_Vol = $scope.LoadData[0].TOTAL_VALUE;
        $scope.Total_Prod = $scope.LoadData[0].TOTAL_PRODUCTION;
        $scope.Total_Duration = $scope.LoadData[0].DURABILITY_YEARS;
        $scope.Total_Waranty = $scope.LoadData[0].WARRANTY_YEARS;

        if ($scope.LoadData[0].BUILD_QUALITY == "M&M") {
          $scope.selectOne = true;
          $scope.selectTwo = false;
        } else {
          $scope.selectTwo = true;
          $scope.selectOne = false;
        }

        $scope.$apply();
      } else {}
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.markDisabel = function () {
    for (var i = 0; i < $scope.disbleRows.length; i++) {
      for (var j = 0; j < $scope.records.length; j++) {
        if ($scope.disbleRows[i] == $scope.records[j].PART_NUMBER) {
          $scope.isValid[j] = true;
          $scope.noclicks[j] = true;
        } else $scope.noclicks[j] = false;
      }
    }
  };

  $scope.processTemplate = function () {
    $.cordys.ajax({
      method: "GetXMLObject",
      namespace: "http://schemas.cordys.com/1.0/xmlstore",
      dataType: "* json",
      parameters: {
        key: "com/Mahindra/Mahindra_eRFQ/FixedDocuments.xml"
      },
      success: function success(data) {
        $scope.obj.DOCUMENTS = $.cordys.json.findObjects(data, "ProjectReqDoc");
        $scope.docLength = $scope.obj.DOCUMENTS.length;

        for (var i = 0; i < $scope.docLength; i++) {
          $scope.obj.DOCUMENT_PATH = $scope.obj.DOCUMENTS[i];
          $scope.downloadFile($scope.obj, 0);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
      }
    });
  };

  $scope.estimateSheet = function (selRow, num) {
    var inboxObj = $scope.obj;
    $state.go("dieCostEstimation", {
      rowNo: num,
      rowDetails: selRow,
      projDetails: inboxObj
    });
  };

  $scope.startDiscussion = function (btnStatus) {
    $scope.erfq = [];
    $scope.pojCode = [];
    $scope.toolmakerID = [];
    $scope.groupID = [];
    $scope.bomID = [];
    $scope.ToolMakerData = [];
    $scope.erfq = $scope.obj.ERFQ_NUMBER;
    $scope.pojCode = $scope.erfq.substring(0, $scope.erfq.indexOf("-"));
    $scope.erfq = $scope.erfq.substring($scope.erfq.indexOf("-") + 1, $scope.erfq.length);
    $scope.toolmakerID = $scope.erfq.substring(0, $scope.erfq.indexOf("-"));
    $scope.erfq = $scope.erfq.substring($scope.erfq.indexOf("-") + 1, $scope.erfq.length);
    $scope.groupID = $scope.erfq.substring(0, $scope.erfq.indexOf("-"));
    $scope.bomID = $scope.obj.E_BOM;
    $.cordys.ajax({
      method: "GetEmailID",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        groupNo: $scope.groupID,
        pojCode: $scope.pojCode,
        bomID: $scope.bomID,
        toolMakerID: $scope.toolmakerID
      },
      success: function success(data) {
        $scope.ToolMakerData = $.cordys.json.findObjects(data, "erfq_float");

        if (btnStatus == 'Initiate') {
          toastr.info("Please wait till process is getting completed.");
          $.cordys.ajax({
            method: "UpdateErfqInbox",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_INBOX": {
                    TASK_ID: $scope.inboxDetails.TASK_ID,
                    ERFQ_NUMBER: $scope.inboxDetails.ERFQ_NUMBER,
                    PROJECT_CODE: $scope.inboxDetails.PROJECT_CODE,
                    USERNAME: $scope.inboxDetails.USERNAME,
                    USER_ID: $scope.inboxDetails.USER_ID,
                    TARGET_DATE: $scope.inboxDetails.TARGET_DATE,
                    RECEIVED_DATE: $scope.inboxDetails.RECEIVED_DATE,
                    STATUS: $scope.inboxDetails.STATUS,
                    INITIATED_BY: $scope.inboxDetails.INITIATED_BY
                  }
                },
                "new": {
                  "ERFQ_INBOX": {
                    STATUS: "INTRDI",
                    USER_ID: $scope.MSIE.AFSPM_MEMBER_TOKEN
                  }
                }
              }
            },
            success: function success(response) {
              $.cordys.ajax({
                method: "SendMailWrapper",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  toDisplayNames: $scope.ToolMakerData[0].CONTACT_PERSON,
                  toEmailIDs: $scope.ToolMakerData[0].EMAIL_TO,
                  ccDisplayNames: $scope.StampL.AFSPM_MEMBER_NAME + ";" + $scope.MSIE.AFSPM_MEMBER_NAME + ";",
                  ccEmailIDs: $scope.StampL.AFSPM_MEMBER_TOKEN + ";" + $scope.MSIE.AFSPM_MEMBER_TOKEN + ";",
                  emailBody: "Dear (" + $scope.ToolMakerData[0].CONTACT_PERSON + "),<br/><br/>Greetings from Mahindra &amp; Mahindra ltd.!<br/><br/>This is to inform you that you have accomplished first step of Process submission.<br/>Our team has gone through your processes &amp; hence we will like to technically discuss the same in detail.<br/><br/>Below are the details for the meeting plan:<br/>Date:(date)<br/> Time:(time) Indian std time.<br/>Venue:(place) or webex<br/><br/><br/> Kind regards,CME dept.Mahindra &amp; Mahindra Ltd"
                },
                success: function success(data) {
                  toastr.info("Mail has been send to Toolmaker for discussion.");
                  toastr.success("Please discuss with toolmaker and update the status.");
                  $scope.currStatus = 'INTRDI';
                  $scope.showHide();
                },
                error: function error(jqXHR, textStatus, errorThrown) {
                  toastr.error("Error while sending mail to Toolamaker due to technical error, please contact administrator.");
                  $scope.currStatus = 'INTRDI';
                  $scope.showHide();
                }
              });
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
            }
          });
        }

        if (btnStatus == 'MOM') {
          $scope.getInboxStatus($scope.obj.ERFQ_NUMBER, btnStatus);
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error while loading Toolmaker details.");
      }
    });
  };

  $scope.decide = function (val, num) {
    if (val == 'Accept') {
      $scope.checkA[num] = true;
      $scope.checkC[num] = false;
      $scope.checkR[num] = false;
      $scope.records[num].DECISION = val;
    } else if (val == 'Conditionally Accept') {
      $scope.checkA[num] = false;
      $scope.checkC[num] = true;
      $scope.checkR[num] = false;
      $scope.records[num].DECISION = val;
    } else if (val == 'Rework') {
      $scope.checkA[num] = false;
      $scope.checkC[num] = false;
      $scope.checkR[num] = true;
      $scope.records[num].DECISION = val;
    }
  };

  $scope.enable = function (data, no) {
    if (data == "Yes") {
      $scope.enableParts[no] = false;
    } else {
      $scope.enableParts[no] = true;
      $scope.records[no].PANEL_QUANTITY = null;
      $scope.records[no].prcsCombo = '';
      $scope.records[no].PROCESS_COMBINATION = '';

      for (var i = 0; i < $scope.parts.length; i++) {
        if ($scope.parts[i].PART_NUMBER == $scope.records[no].part_combined) {
          $scope.isValid[i] = false;
          $scope.noclicks[i] = false;
          document.getElementById("row" + i).style.pointerEvents = "auto";
          document.getElementById("row" + i).style.backgroundColor = "#ffffff";
          $scope.records[no].part_combined = null;
          return;
        }
      }
    }
  };

  $scope.calc = function (number, no) {
    if ($scope.parts[no].PART_NUMBER == number) {
      toastr.warning("cannot select same part");
      $scope.records[no].part_combined = $scope.isParts[no];
      return;
    }

    if ($scope.isParts[no] != null && $scope.isParts[no] != number) {
      for (var c = 0; c < $scope.parts.length; c++) {
        if ($scope.isParts[no] == $scope.parts[c].PART_NUMBER) {
          $scope.isValid[c] = false;
          document.getElementById("row" + c).style.backgroundColor = "#ffffff";
        }
      }
    }

    for (var i = 0; i < $scope.parts.length; i++) {
      if ($scope.parts[i].PART_NUMBER == number) {
        if ($scope.parts[i].prcsCombo == "No") {
          toastr.error("Cannot be Combined");
          $scope.records[no].part_combined = $scope.isParts[no];
          $scope.records[no].PANEL_QUANTITY = null;
          return;
        }

        if ($scope.isValid[i] == true) {
          toastr.error("already selected");
          $scope.records[no].part_combined = $scope.isParts[no];
          $scope.records[no].PANEL_QUANTITY = null;
          document.getElementById("row" + i).style.pointerEvents = "auto";
          document.getElementById("row" + i).style.backgroundColor = "#ffffff";
          return;
        } else {
          $scope.records[no].PANEL_QUANTITY = 2;
          $scope.isParts[no] = number;
          $scope.noclicks[no] = false;
          $scope.noclicks[i] = true;
          $scope.isValid[i] = true;
          $scope.enable('', i);
          document.getElementById("row" + i).readOnly = true;
          document.getElementById("row" + i).style.backgroundColor = "#e9ecef";
          return;
        }
      }
    }
  };

  $.cordys.ajax({
    method: "GetRoles",
    namespace: "http://schemas.cordys.com/1.0/ldap",
    parameters: {
      dn: "",
      depth: ""
    },
    dataType: "* json",
    async: false,
    success: function success(e) {
      console.log(e);
      $scope.roles1 = $.cordys.json.findObjects(e, "user");

      for (var i = 0; i < $scope.roles1[0].role.length; i++) {
        $scope.CordysRole = $scope.CordysRole + "," + $scope.roles1[0].role[i].description;
      }

      if ($scope.CordysRole.includes("MSIE")) {
        $scope.roles = "MSIE";
        $scope.msshow = true;

        if ($scope.obj.STATUS == 'CMEAC' || $scope.obj.STATUS == 'INTRDI' || $scope.obj.STATUS == 'TEDIMO') {
          $scope.tpsshow = false;
          $scope.cmeshow = true;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.rejectTC = true;
          $scope.getDataForMSIE();
        } else if ($scope.obj.STATUS == 'QURE') {
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = true;
          $scope.rejectTC = true;
          $scope.getDataForMSIE();
        } else if ($scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = true;
          $scope.qrshow = false;
          $scope.getDataForMSIE();

          if (!$scope.obj.MSIE_REMARKS == "") {
            $("#textArea").val($scope.obj.MSIE_REMARKS);
            document.getElementById("textArea").readOnly = true;
          }
        } else if ($scope.obj.STATUS == 'TOREPRDO') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = true;
          $scope.rejectT = true;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.getDataForMSIE();

          if (!$scope.obj.MSIE_REMARKS == "") {
            $("#textArea").val($scope.obj.MSIE_REMARKS);
            document.getElementById("textArea").readOnly = true;
          }
        } else if ($scope.obj.STATUS == 'Quote Comparison') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = true;
          $scope.getDataForMSIE();

          if (!$scope.obj.MSIE_REMARKS == "") {
            $("#textArea").val($scope.obj.MSIE_REMARKS);
            document.getElementById("textArea").readOnly = true;
          }
        }
      }

      if ($scope.CordysRole.includes("Toolmaker")) {
        $scope.roles = "Toolmaker";
        $scope.tmshow = true;

        if ($scope.obj.STATUS == 'TOPRSU') {
          $scope.tpsshow = true;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.rejectTC = true;
          $scope.getDataForToolmaker();
        } else if ($scope.obj.STATUS == 'RGRT') {
          $scope.tpsshow = true;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.rejectTC = true;
          $scope.getDataForToolmaker();
        } else if ($scope.obj.STATUS == 'TOREPRDO') {
          $scope.tpsshow = true;
          $scope.rejectT = true;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.getDataForMSIE();
        } else if ($scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU') {
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = true;
          $scope.qrshow = false;
          $scope.getDataForMSIE();
        } else if ($scope.obj.STATUS == 'CMEAC') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = false;
          $scope.cmeshow = true;
          $scope.qsshow = false;
          $scope.qrshow = false;
          $scope.rejectTC = false;
          $scope.getDataForMSIE();

          if (!$scope.obj.TOOLMAKER_REMARK == "") {
            $("#textArea").val($scope.obj.TOOLMAKER_REMARK);
            document.getElementById("textArea").readOnly = true;
          }
        } else if ($scope.obj.STATUS == 'QURE') {
          toastr.info("Task Completed");
          $scope.complete = true;
          $scope.tpsshow = false;
          $scope.cmeshow = false;
          $scope.qsshow = false;
          $scope.qrshow = true;
          $scope.getDataForMSIE();

          if (!$scope.obj.TOOLMAKER_REMARK == "") {
            $("#textArea").val($scope.obj.TOOLMAKER_REMARK);
            document.getElementById("textArea").readOnly = true;
          }
        }
      }

      if ($scope.CordysRole.includes("Toolmaker") && $scope.CordysRole.includes("MSIE")) {
        $scope.roles = "";
      }
    },
    error: function error(jqXHR, textStatus, errorThrown) {
      toastr.error("Error in loading data");
    }
  });

  $scope.CreateDeleteFileArray = function (obj, tid) {
    if ($scope.FiletupleIndex.indexOf(tid) <= -1 && (obj != undefined || obj != "")) {
      $scope.FileNameArray.push(obj);
      $scope.FiletupleIndex.push(tid);
    } else if ($scope.FiletupleIndex.indexOf(tid) > -1 && (obj != undefined || obj != "")) {
      var indxOfObj = $scope.FileNameArray.indexOf(obj);
      var tuplIndxOfObj1 = $scope.FiletupleIndex.indexOf(tid);
      $scope.FileNameArray.splice(indxOfObj, 1);
      $scope.FiletupleIndex.splice(tuplIndxOfObj1, 1);
    }
  };

  $scope.FiledeleteRow = function () {
    $scope.FiletupleIndex = $scope.FiletupleIndex.sort(function (a, b) {
      return b - a;
    });

    if ($scope.FiletupleIndex.length != 0) {
      for (var i = 0; i < $scope.FiletupleIndex.length; i++) {
        $scope.deleteFileFrom_UDH($scope.FileArray[$scope.FiletupleIndex[i]]);
        $scope.FileArray.splice($scope.FiletupleIndex[i], 1);
      }
    }

    $scope.FiletupleIndex.length = 0;
    $scope.FiletupleIndex = [];
  };

  $scope.deleteFileFrom_UDH = function (DeleteFile) {
    $.cordys.ajax({
      method: "UpdateErfqUploadedDocumentHistory",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: '* json',
      parameters: {
        tuple: {
          "old": {
            "ERFQ_UPLOADED_DOCUMENT_HISTORY": {
              "DOCUMENT_HISTORY_SEQID": DeleteFile.DOCUMENT_HISTORY_SEQID
            }
          }
        }
      },
      success: function success(e) {
        toastr.success("File is deleted!");
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in uploading file");
      }
    });
  };

  $scope.downloadFile = function (grid, myRow) {
    debugger;
    $scope.attachObj = grid;
    var filPath = window.location.href.split("com")[0] + grid.DOCUMENT_PATH.split("shared\\")[1];
    var dnldFile = document.createElement("A");
    dnldFile.href = filPath;
    dnldFile.download = filPath.substr(filPath.lastIndexOf('/') + 1);
    document.body.appendChild(dnldFile);
    dnldFile.click();
    document.body.removeChild(dnldFile);
    console.log("download file=>", myRow.entity);
  };

  $scope.InsertUD_InsertUDH = function (type) {
    if (type == 'ProjectReq') {
      $scope.caughtPN = null;
      doctype = $scope.username;
    } else {
      doctype = type;
    }

    if ($scope.obj.STATUS == 'TOPRSU') {
      $scope.revision = '001';
    } else if ($scope.obj.STATUS == 'TOREPRDO') {
      $scope.revision = '002';
    }

    $.cordys.ajax({
      method: "UpdateErfqUploadedDocument",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: '* json',
      parameters: {
        tuple: {
          "new": {
            "ERFQ_UPLOADED_DOCUMENT": {
              "PROJECT_CODE": $scope.obj.PROJECT_CODE,
              "DOCUMENT_NAME": $scope.fileName,
              "DOCUMENT_PATH": $scope.ServerFilePath,
              "DOCUMENT_TYPE": doctype,
              "DOCUMENT_DESC": 'uploaded from inbox task',
              "PART_NUMBER": $scope.caughtPN,
              "REVISION": $scope.revision
            }
          }
        }
      },
      success: function success(e) {
        $scope.ids = $.cordys.json.findObjects(e, "ERFQ_UPLOADED_DOCUMENT")[0].DOCUMENT_ID;
        toastr.info("File Uploaded!");
        $scope.$apply;

        if (type == 'ProjectReq') {
          var FileNameObj = {
            "DOCUMENT_NAME": $scope.fileName,
            "DOCUMENT_PATH": $scope.ServerFilePath,
            "DOCUMENT_TYPE": doctype,
            "REVISION": $scope.revision
          };
          $scope.FileArray.push(FileNameObj);
          $scope.$apply();
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in uploading file");
      }
    });
  };

  $scope.browseAndAddRow = function (fileObj, ev, screen) {
    debugger;
    $scope.ev = ev;

    if (screen == 'ProcessDocument') {
      fileObj = ev.target.files[0];
      $scope.fileName = fileObj.name;
      $scope.fileData.push($scope.fileName);
      $scope.isView[$scope.rowNo] = true;
    }

    if (fileObj != null) {
      $scope.fileName = fileObj.name;

      if ($scope.fileName.split('.')[1] == 'pdf' || $scope.fileName.split('.')[1] == 'jpg' || $scope.fileName.split('.')[1] == 'png' || $scope.fileName.split('.')[1] == 'jpeg' || $scope.fileName.split('.')[1] == 'docx' || $scope.fileName.split('.')[1] == 'doc') {}

      extension = fileObj.name.substr(fileObj.name.lastIndexOf(".") + 1);

      if ("dll" != extension.toLowerCase() && "exe" != extension.toLowerCase()) {
        var fileReader = new FileReader();

        fileReader.onload = function (fileLoadedEvent) {
          $scope.uploadFile(fileLoadedEvent.target.result, fileLoadedEvent.target.filename);
        };

        fileReader.filename = fileObj.name;
        fileReader.readAsDataURL(fileObj);
      } else {
        toastr.error('Unable to Read File');
      }

      $scope.uploadFile = function (file, name) {
        debugger;
        name = $scope.fileName;

        if (!(file == "data:" || file == null)) {
          file = file.split("base64,")[1];
          $.cordys.ajax({
            method: "UploadERFQDoc",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: '* json',
            parameters: {
              FileName: name,
              FileContent: file
            },
            success: function success(e) {
              debugger;
              $scope.ServerFilePath = $.cordys.json.findObjects(e, "uploadERFQDoc")[0].uploadERFQDoc;
              $scope.InsertUD_InsertUDH(screen);
              $scope.$apply;
              $.cordys.ajax({
                method: "GetERFQDocsbyProjCode",
                namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
                dataType: "* json",
                parameters: {
                  "projectCode": $scope.obj.PROJECT_CODE,
                  "documentType": screen
                },
                success: function success(data) {
                  debugger;
                  console.log(data);
                },
                error: function error(jqXHR, textStatus, errorThrown) {
                  toastr.error("Error in loading data");
                }
              });
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in uploading file");
            }
          });
        } else {
          toastr.error("Sorry file is empty, Pls upload other file");
          $scope.fileData.pop();
          $scope.$apply;
        }
      };
    } else {}
  };

  $scope.ViewFileName = function (fileObj) {
    if (fileObj != null) {
      $scope.FileObject = fileObj;
      $scope.fileName = fileObj.name;
      $scope.fileData.push(fileObj.name);
      $scope.DOCUMENT_NAME1 = fileObj.name;

      if ($scope.fileName.split('.')[1] == 'pdf' || $scope.fileName.split('.')[1] == 'jpg' || $scope.fileName.split('.')[1] == 'png' || $scope.fileName.split('.')[1] == 'jpeg' || $scope.fileName.split('.')[1] == 'docx' || $scope.fileName.split('.')[1] == 'doc') {}

      extension = fileObj.name.substr(fileObj.name.lastIndexOf(".") + 1);

      if ("dll" != extension.toLowerCase() && "exe" != extension.toLowerCase()) {
        var fileReader = new FileReader();

        fileReader.onload = function (fileLoadedEvent) {};

        fileReader.filename = fileObj.name;
        fileReader.readAsDataURL(fileObj);
      } else {
        toastr.error('Unable to Read File');
      }
    } else {}
  };

  $scope.getPartN = function (arr, no) {
    console.log(arr);
    $scope.caughtPN = arr.PART_NUMBER;
    $scope.rowNo = no;
    $scope.fileData = [];
    $.cordys.ajax({
      method: "GetDocumentDetailsByPartNumber",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "projCode": $scope.obj.PROJECT_CODE,
        "documentType": "ProcessDocument",
        "partNumber": $scope.caughtPN
      },
      success: function success(data) {
        if (data.tuple != undefined) {
          $scope.allDocs = $.cordys.json.findObjects(data, "erfq_uploaded_document");
          $scope.fileData.push();
        } else {
          $scope.allDocs = [];
          $scope.fileData.push();
        }

        $scope.$apply();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.error("Error in loading data");
      }
    });
  };

  function completeTask() {
    $.cordys.ajax({
      method: "PerformTaskAction",
      namespace: "http://schemas.cordys.com/notification/workflow/1.0",
      dataType: "* json",
      parameters: {
        TaskId: $scope.obj.TASK_ID,
        Action: 'COMPLETE',
        Memo: ''
      },
      success: function success(response) {
        toastr.success("Task Completed");
        $state.go("erfqInbox", {
          flag: "child"
        });
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
      }
    });
  }

  function updateinbox(getstatus, username) {
    $.cordys.ajax({
      method: "UpdateErfqInbox",
      namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
      dataType: "* json",
      parameters: {
        "tuple": {
          "old": {
            "ERFQ_INBOX": {
              TASK_ID: $scope.inboxDetails.TASK_ID,
              ERFQ_NUMBER: $scope.inboxDetails.ERFQ_NUMBER,
              PROJECT_CODE: $scope.inboxDetails.PROJECT_CODE,
              USERNAME: $scope.inboxDetails.USERNAME,
              USER_ID: $scope.inboxDetails.USER_ID,
              TARGET_DATE: $scope.inboxDetails.TARGET_DATE,
              RECEIVED_DATE: $scope.inboxDetails.RECEIVED_DATE,
              STATUS: $scope.inboxDetails.STATUS,
              INITIATED_BY: $scope.inboxDetails.INITIATED_BY
            }
          },
          "new": {
            "ERFQ_INBOX": {
              STATUS: getstatus
            }
          }
        }
      },
      success: function success(response) {
        toastr.success("Inbox Updated");
        completeTask();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
      }
    });
  }

  $scope.updateLastRemarks = function (setStatus) {
    if ($scope.obj.LastRemarks != undefined) {
      if ($scope.roles == "Toolmaker") {
        $.cordys.ajax({
          method: "UpdateErfqProcessSubmission",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_PROCESS_SUBMISSION": {
                  ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
                }
              },
              "new": {
                "ERFQ_PROCESS_SUBMISSION": {
                  TOOLMAKER_REMARK: $scope.obj.LastRemarks,
                  STATUS: setStatus
                }
              }
            }
          },
          success: function success(response) {
            console.log("updated");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      } else if ($scope.roles == "MSIE") {
        $.cordys.ajax({
          method: "UpdateErfqProcessSubmission",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_PROCESS_SUBMISSION": {
                  ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
                }
              },
              "new": {
                "ERFQ_PROCESS_SUBMISSION": {
                  MSIE_REMARKS: $scope.obj.LastRemarks,
                  STATUS: setStatus
                }
              }
            }
          },
          success: function success(response) {
            console.log("updated");
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }
    }
  };

  $scope.savechanges = function () {
    if ($scope.obj.STATUS == 'TOPRSU') {
      for (var i = 0; i < $scope.records.length; i++) {
        if ($scope.records[i].prcsCombo != "Yes") {
          $scope.records[i].prcsCombo = '';
          $scope.records[i].PANEL_QUANTITY = null;
          $scope.records[i].part_combined = null;
        }

        if ($scope.records[i].TMRemarks == undefined) {
          $scope.records[i].TMRemarks = null;
        }

        $.cordys.ajax({
          method: "UpdateErfqProcessParts",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "new": {
                "ERFQ_PROCESS_PARTS": {
                  ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER,
                  PROJECT_CODE: $scope.obj.PROJECT_CODE,
                  TOOLMAKER_NAME: $scope.obj.TOOLMAKER_ID,
                  PROCESS_COMBINATION: $scope.records[i].prcsCombo,
                  PART_COMBINED: $scope.records[i].part_combined,
                  PANEL_QUANTITY: $scope.records[i].PANEL_QUANTITY,
                  TOOLMAKER_REMARK: $scope.records[i].TMRemarks,
                  MSIE_REMARK: "",
                  PART_NUMBER: $scope.records[i].PART_NUMBER,
                  DECISION: "",
                  COST: "",
                  STATUS: $scope.obj.STATUS,
                  PANEL_GROUPING: $scope.group
                }
              }
            }
          },
          success: function success(response) {
            console.log('updated');
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }

      $scope.updateLastRemarks("CMEAC");
      updateinbox("CMEAC", $scope.MSIE.AFSPM_MEMBER_NAME);
    }

    if ($scope.obj.STATUS == 'TOREPRDO') {
      for (var i = 0; i < $scope.records.length; i++) {
        if ($scope.records[i].prcsCombo != "Yes") {
          $scope.records[i].prcsCombo = '';
          $scope.records[i].PANEL_QUANTITY = null;
          $scope.records[i].part_combined = null;
          $.cordys.ajax({
            method: "GetSeqNoByErfqAndPartNumber",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "erfqNumber": $scope.obj.ERFQ_NUMBER,
              "partNumber": $scope.records[i].PART_NUMBER
            },
            success: function success(data) {
              if (data.tuple != undefined) {
                $scope.records[i].PARTS_SEQ = data.tuple.old.PROCESS_PARTS_SEQ;
              }

              $scope.$apply();
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in loading data");
            }
          });
        }

        if ($scope.records[i].TMRemarks == undefined) {
          $scope.records[i].TMRemarks = null;
        }

        if ($scope.records[i].PARTS_SEQ != undefined) {
          $.cordys.ajax({
            method: "UpdateErfqProcessParts",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_PROCESS_PARTS": {
                    PROCESS_PARTS_SEQ: $scope.records[i].PARTS_SEQ
                  }
                },
                "new": {
                  "ERFQ_PROCESS_PARTS": {
                    PROCESS_COMBINATION: $scope.records[i].prcsCombo,
                    PART_COMBINED: $scope.records[i].part_combined,
                    PANEL_QUANTITY: $scope.records[i].PANEL_QUANTITY,
                    TOOLMAKER_REMARK: $scope.records[i].TMRemarks
                  }
                }
              }
            },
            success: function success(response) {
              console.log('updated');
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
            }
          });
        }
      }

      $scope.updateLastRemarks("CMEAC");
      updateinbox("CMEAC", $scope.MSIE.AFSPM_MEMBER_NAME);
    }

    if ($scope.obj.STATUS == 'QUSU' || $scope.obj.STATUS == 'QURESU') {
      for (var i = 0; i < $scope.records.length; i++) {
        if ($scope.records[i].prcsCombo != "Yes") {
          $.cordys.ajax({
            method: "GetSeqNoByErfqAndPartNumber",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "erfqNumber": $scope.obj.ERFQ_NUMBER,
              "partNumber": $scope.records[i].PART_NUMBER
            },
            success: function success(data) {
              $scope.records[i].PARTS_SEQ = data.tuple.old.PROCESS_PARTS_SEQ;
              $scope.$apply();
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.error("Error in loading data");
            }
          });
        }

        if ($scope.records[i].TMRemarks == undefined) {
          $scope.records[i].TMRemarks = null;
        }

        if ($scope.records[i].PARTS_SEQ != undefined) {
          $.cordys.ajax({
            method: "UpdateErfqProcessParts",
            namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
            dataType: "* json",
            parameters: {
              "tuple": {
                "old": {
                  "ERFQ_PROCESS_PARTS": {
                    PROCESS_PARTS_SEQ: $scope.records[i].PARTS_SEQ
                  }
                },
                "new": {
                  "ERFQ_PROCESS_PARTS": {
                    PROCESS_COMBINATION: $scope.records[i].prcsCombo,
                    PART_COMBINED: $scope.records[i].part_combined,
                    PANEL_QUANTITY: $scope.records[i].PANEL_QUANTITY,
                    COST: $scope.records[i].COST,
                    DIE_COST_STATUS: 'submitted'
                  }
                }
              }
            },
            success: function success(response) {
              console.log('updated');
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
            }
          });
        }
      }

      $scope.updateLastRemarks("QURE");
      updateinbox("QURE", $scope.MSIE.AFSPM_MEMBER_NAME);
    }

    if ($scope.obj.STATUS == 'CMEAC' || $scope.obj.STATUS == 'TEDIMO' || $scope.obj.STATUS == 'INTRDI') {
      for (var i = 0; i < $scope.records.length; i++) {
        if ($scope.records[i].MSIERemarks == undefined) {
          $scope.records[i].MSIERemarks = null;
        }

        $.cordys.ajax({
          method: "UpdateErfqProcessParts",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_PROCESS_PARTS": {
                  PROCESS_PARTS_SEQ: $scope.records[i].PARTS_SEQ
                }
              },
              "new": {
                "ERFQ_PROCESS_PARTS": {
                  MSIE_REMARK: $scope.records[i].MSIERemarks,
                  DECISION: $scope.records[i].DECISION,
                  STATUS: $scope.obj.STATUS
                }
              }
            }
          },
          success: function success(response) {
            console.log('updated');
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      }

      $scope.getInboxStatus($scope.obj.ERFQ_NUMBER, "");
      $scope.updateLastRemarks("QUSU");
    }

    if ($scope.obj.STATUS == 'QURE') {
      $scope.getInboxStatus($scope.obj.ERFQ_NUMBER, "qReview");
      $scope.updateLastRemarks("QUCO");
    }
  };

  $scope.dumpchanges = function () {
    if ($scope.obj.LastRemarks != undefined) {
      $.cordys.ajax({
        method: "UpdateErfqProcessSubmission",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          "tuple": {
            "old": {
              "ERFQ_PROCESS_SUBMISSION": {
                ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
              }
            },
            "new": {
              "ERFQ_PROCESS_SUBMISSION": {
                TOOLMAKER_REMARK: $scope.obj.LastRemarks,
                STATUS: $scope.obj.STATUS
              }
            }
          }
        },
        success: function success(response) {
          updateinbox("RGRT", $scope.username);
          localStorage.oldURL = window.location.href;
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
        }
      });
    } else {
      toastr.warning("Remarks Mandatory!");
      return;
    }
  };

  $scope.revertchanges = function () {
    if ($scope.obj.rejectRemarks != undefined) {
      if ($scope.obj.rejectRemarks != "") {
        $.cordys.ajax({
          method: "UpdateErfqProcessSubmission",
          namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
          dataType: "* json",
          parameters: {
            "tuple": {
              "old": {
                "ERFQ_PROCESS_SUBMISSION": {
                  ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
                }
              },
              "new": {
                "ERFQ_PROCESS_SUBMISSION": {
                  MSIE_REMARKS: $scope.obj.rejectRemarks,
                  STATUS: $scope.obj.STATUS
                }
              }
            }
          },
          success: function success(response) {
            $scope.getInboxStatus($scope.obj.ERFQ_NUMBER, "reject");
            localStorage.oldURL = window.location.href;
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
          }
        });
      } else {
        toastr.warning("Remarks Mandatory!");
        return;
      }
    } else {
      toastr.warning("Remarks Mandatory!");
      return;
    }
  };

  $scope.rejectchanges = function () {
    if ($scope.obj.LastRemarks != undefined) {
      $.cordys.ajax({
        method: "UpdateErfqProcessSubmission",
        namespace: "http://schemas.cordys.com/Mahindra_eRFQ_WSAppPackage",
        dataType: "* json",
        parameters: {
          "tuple": {
            "old": {
              "ERFQ_PROCESS_SUBMISSION": {
                ERFQ_NUMBER: $scope.obj.ERFQ_NUMBER
              }
            },
            "new": {
              "ERFQ_PROCESS_SUBMISSION": {
                TOOLMAKER_REMARK: $scope.obj.LastRemarks,
                STATUS: $scope.obj.STATUS
              }
            }
          }
        },
        success: function success(response) {
          updateinbox("QURESU", $scope.username);
          localStorage.oldURL = window.location.href;
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          toastr.info("request:" + jqXHR + " \nStatus :" + textStatus + " \n error:" + errorThrown);
        }
      });
    } else {
      toastr.warning("Remarks Mandatory!");
      return;
    }
  };

  setTimeout(function () {}, 500);
});
"use strict";

var xlsx = function () {
  function xlsx() {}

  var _proto = xlsx.prototype;

  _proto.write = function write(data, fileName, sheetName) {
    var wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(data), sheetName, {
      compression: true
    });
    XLSX.writeFile(wb, fileName);
  };

  _proto.read = function read(target, cb) {
    var reader = new FileReader();

    reader.onload = function (e) {
      var data = e.target.result;
      var result = {};
      var workbook = XLSX.read(data, {
        type: 'binary'
      });
      workbook.SheetNames.forEach(function (sheetName) {
        var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {
          raw: true
        });
        if (roa.length) result[sheetName] = roa;
      });
      cb(result);
    };

    reader.readAsBinaryString(target.files[0]);
  };

  return xlsx;
}();

window.xlsx = new xlsx();
